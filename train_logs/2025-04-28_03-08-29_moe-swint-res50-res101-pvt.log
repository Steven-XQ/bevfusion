2025-04-28 03:08:40,591 - mmdet3d - INFO - Config:
seed = 0
deterministic = False
checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
load_from = None
resume_from = None
cudnn_benchmark = False
fp16 = dict(loss_scale=dict(growth_interval=2000))
max_epochs = 6
runner = dict(type='CustomEpochBasedRunner', max_epochs=6)
dataset_type = 'NuScenesDataset'
dataset_root = 'data/nuscenes/'
gt_paste_stop_epoch = -1
reduce_beams = 32
load_dim = 5
use_dim = 5
load_augmented = None
point_cloud_range = [-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]
voxel_size = [0.075, 0.075, 0.2]
image_size = [256, 704]
augment2d = dict(
    resize=[[0.38, 0.55], [0.48, 0.48]],
    rotate=[-5.4, 5.4],
    gridmask=dict(prob=0.0, fixed_prob=True))
augment3d = dict(
    scale=[0.9, 1.1], rotate=[-0.78539816, 0.78539816], translate=0.5)
object_classes = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
map_classes = [
    'drivable_area', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area',
    'divider'
]
input_modality = dict(
    use_lidar=True,
    use_camera=True,
    use_radar=False,
    use_map=False,
    use_external=False)
train_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        load_augmented=None),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=0,
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        pad_empty_sweeps=True,
        remove_close=True,
        load_augmented=None),
    dict(
        type='LoadRadarPointsMultiSweeps',
        load_dim=18,
        sweeps_num=6,
        use_dim=[
            0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
            30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
            47, 48, 49, 50, 51, 52, 53, 54, 55, 56
        ],
        max_num=2500,
        compensate_velocity=True,
        filtering='none',
        normalize=False),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False),
    dict(
        type='ObjectPaste',
        stop_epoch=-1,
        db_sampler=dict(
            dataset_root='data/nuscenes/',
            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
            rate=1.0,
            prepare=dict(
                filter_by_difficulty=[-1],
                filter_by_min_points=dict(
                    car=5,
                    truck=5,
                    bus=5,
                    trailer=5,
                    construction_vehicle=5,
                    traffic_cone=5,
                    barrier=5,
                    motorcycle=5,
                    bicycle=5,
                    pedestrian=5)),
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            sample_groups=dict(
                car=2,
                truck=3,
                construction_vehicle=7,
                bus=4,
                trailer=6,
                barrier=2,
                motorcycle=6,
                bicycle=6,
                pedestrian=2,
                traffic_cone=2),
            points_loader=dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32))),
    dict(
        type='ImageAug3D',
        final_dim=[256, 704],
        resize_lim=[0.38, 0.55],
        bot_pct_lim=[0.0, 0.0],
        rot_lim=[-5.4, 5.4],
        rand_flip=True,
        is_train=True),
    dict(
        type='GlobalRotScaleTrans',
        resize_lim=[0.9, 1.1],
        rot_lim=[-0.78539816, 0.78539816],
        trans_lim=0.5,
        is_train=True),
    dict(type='RandomFlip3D'),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(
        type='ObjectNameFilter',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='ImageNormalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(
        type='GridMask',
        use_h=True,
        use_w=True,
        max_epoch=6,
        rotate=1,
        offset=False,
        ratio=0.5,
        mode=1,
        prob=0.0,
        fixed_prob=True),
    dict(type='PointShuffle'),
    dict(
        type='DefaultFormatBundle3D',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='Collect3D',
        keys=['img', 'points', 'radar', 'gt_bboxes_3d', 'gt_labels_3d'],
        meta_keys=[
            'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
            'lidar2image', 'camera2lidar', 'img_aug_matrix', 'lidar_aug_matrix'
        ]),
    dict(type='GTDepth', keyframe_only=True)
]
test_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        load_augmented=None),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        pad_empty_sweeps=True,
        remove_close=True,
        load_augmented=None),
    dict(
        type='LoadRadarPointsMultiSweeps',
        load_dim=18,
        sweeps_num=6,
        use_dim=[
            0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
            30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
            47, 48, 49, 50, 51, 52, 53, 54, 55, 56
        ],
        max_num=2500,
        compensate_velocity=True,
        filtering='none',
        normalize=False),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False),
    dict(
        type='ImageAug3D',
        final_dim=[256, 704],
        resize_lim=[0.48, 0.48],
        bot_pct_lim=[0.0, 0.0],
        rot_lim=[0.0, 0.0],
        rand_flip=False,
        is_train=False),
    dict(
        type='GlobalRotScaleTrans',
        resize_lim=[1.0, 1.0],
        rot_lim=[0.0, 0.0],
        trans_lim=0.0,
        is_train=False),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(
        type='ImageNormalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(
        type='DefaultFormatBundle3D',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='Collect3D',
        keys=['img', 'points', 'radar', 'gt_bboxes_3d', 'gt_labels_3d'],
        meta_keys=[
            'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
            'lidar2image', 'camera2lidar', 'img_aug_matrix', 'lidar_aug_matrix'
        ]),
    dict(type='GTDepth', keyframe_only=True)
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=4,
    train=dict(
        type='CBGSDataset',
        dataset=dict(
            type='NuScenesDataset',
            dataset_root='data/nuscenes/',
            ann_file='data/nuscenes/nuscenes_infos_train.pkl',
            pipeline=[
                dict(type='LoadMultiViewImageFromFiles', to_float32=True),
                dict(
                    type='LoadPointsFromFile',
                    coord_type='LIDAR',
                    load_dim=5,
                    use_dim=5,
                    reduce_beams=32,
                    load_augmented=None),
                dict(
                    type='LoadPointsFromMultiSweeps',
                    sweeps_num=0,
                    load_dim=5,
                    use_dim=5,
                    reduce_beams=32,
                    pad_empty_sweeps=True,
                    remove_close=True,
                    load_augmented=None),
                dict(
                    type='LoadRadarPointsMultiSweeps',
                    load_dim=18,
                    sweeps_num=6,
                    use_dim=[
                        0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26,
                        27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
                        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56
                    ],
                    max_num=2500,
                    compensate_velocity=True,
                    filtering='none',
                    normalize=False),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True,
                    with_attr_label=False),
                dict(
                    type='ObjectPaste',
                    stop_epoch=-1,
                    db_sampler=dict(
                        dataset_root='data/nuscenes/',
                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1],
                            filter_by_min_points=dict(
                                car=5,
                                truck=5,
                                bus=5,
                                trailer=5,
                                construction_vehicle=5,
                                traffic_cone=5,
                                barrier=5,
                                motorcycle=5,
                                bicycle=5,
                                pedestrian=5)),
                        classes=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        sample_groups=dict(
                            car=2,
                            truck=3,
                            construction_vehicle=7,
                            bus=4,
                            trailer=6,
                            barrier=2,
                            motorcycle=6,
                            bicycle=6,
                            pedestrian=2,
                            traffic_cone=2),
                        points_loader=dict(
                            type='LoadPointsFromFile',
                            coord_type='LIDAR',
                            load_dim=5,
                            use_dim=5,
                            reduce_beams=32))),
                dict(
                    type='ImageAug3D',
                    final_dim=[256, 704],
                    resize_lim=[0.38, 0.55],
                    bot_pct_lim=[0.0, 0.0],
                    rot_lim=[-5.4, 5.4],
                    rand_flip=True,
                    is_train=True),
                dict(
                    type='GlobalRotScaleTrans',
                    resize_lim=[0.9, 1.1],
                    rot_lim=[-0.78539816, 0.78539816],
                    trans_lim=0.5,
                    is_train=True),
                dict(type='RandomFlip3D'),
                dict(
                    type='PointsRangeFilter',
                    point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
                dict(
                    type='ObjectRangeFilter',
                    point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
                dict(
                    type='ObjectNameFilter',
                    classes=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(
                    type='ImageNormalize',
                    mean=[0.485, 0.456, 0.406],
                    std=[0.229, 0.224, 0.225]),
                dict(
                    type='GridMask',
                    use_h=True,
                    use_w=True,
                    max_epoch=6,
                    rotate=1,
                    offset=False,
                    ratio=0.5,
                    mode=1,
                    prob=0.0,
                    fixed_prob=True),
                dict(type='PointShuffle'),
                dict(
                    type='DefaultFormatBundle3D',
                    classes=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(
                    type='Collect3D',
                    keys=[
                        'img', 'points', 'radar', 'gt_bboxes_3d',
                        'gt_labels_3d'
                    ],
                    meta_keys=[
                        'camera_intrinsics', 'camera2ego', 'lidar2ego',
                        'lidar2camera', 'lidar2image', 'camera2lidar',
                        'img_aug_matrix', 'lidar_aug_matrix'
                    ]),
                dict(type='GTDepth', keyframe_only=True)
            ],
            object_classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            map_classes=[
                'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
                'carpark_area', 'divider'
            ],
            modality=dict(
                use_lidar=True,
                use_camera=True,
                use_radar=False,
                use_map=False,
                use_external=False),
            test_mode=False,
            use_valid_flag=True,
            box_type_3d='LiDAR')),
    val=dict(
        type='NuScenesDataset',
        dataset_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                load_augmented=None),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                pad_empty_sweeps=True,
                remove_close=True,
                load_augmented=None),
            dict(
                type='LoadRadarPointsMultiSweeps',
                load_dim=18,
                sweeps_num=6,
                use_dim=[
                    0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
                    28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
                    43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56
                ],
                max_num=2500,
                compensate_velocity=True,
                filtering='none',
                normalize=False),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False),
            dict(
                type='ImageAug3D',
                final_dim=[256, 704],
                resize_lim=[0.48, 0.48],
                bot_pct_lim=[0.0, 0.0],
                rot_lim=[0.0, 0.0],
                rand_flip=False,
                is_train=False),
            dict(
                type='GlobalRotScaleTrans',
                resize_lim=[1.0, 1.0],
                rot_lim=[0.0, 0.0],
                trans_lim=0.0,
                is_train=False),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
            dict(
                type='ImageNormalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(
                type='DefaultFormatBundle3D',
                classes=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='Collect3D',
                keys=[
                    'img', 'points', 'radar', 'gt_bboxes_3d', 'gt_labels_3d'
                ],
                meta_keys=[
                    'camera_intrinsics', 'camera2ego', 'lidar2ego',
                    'lidar2camera', 'lidar2image', 'camera2lidar',
                    'img_aug_matrix', 'lidar_aug_matrix'
                ]),
            dict(type='GTDepth', keyframe_only=True)
        ],
        object_classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        map_classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area', 'divider'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        dataset_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                load_augmented=None),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                pad_empty_sweeps=True,
                remove_close=True,
                load_augmented=None),
            dict(
                type='LoadRadarPointsMultiSweeps',
                load_dim=18,
                sweeps_num=6,
                use_dim=[
                    0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
                    28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
                    43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56
                ],
                max_num=2500,
                compensate_velocity=True,
                filtering='none',
                normalize=False),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False),
            dict(
                type='ImageAug3D',
                final_dim=[256, 704],
                resize_lim=[0.48, 0.48],
                bot_pct_lim=[0.0, 0.0],
                rot_lim=[0.0, 0.0],
                rand_flip=False,
                is_train=False),
            dict(
                type='GlobalRotScaleTrans',
                resize_lim=[1.0, 1.0],
                rot_lim=[0.0, 0.0],
                trans_lim=0.0,
                is_train=False),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
            dict(
                type='ImageNormalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(
                type='DefaultFormatBundle3D',
                classes=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='Collect3D',
                keys=[
                    'img', 'points', 'radar', 'gt_bboxes_3d', 'gt_labels_3d'
                ],
                meta_keys=[
                    'camera_intrinsics', 'camera2ego', 'lidar2ego',
                    'lidar2camera', 'lidar2image', 'camera2lidar',
                    'img_aug_matrix', 'lidar_aug_matrix'
                ]),
            dict(type='GTDepth', keyframe_only=True)
        ],
        object_classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        map_classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area', 'divider'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=1,
    pipeline=[
        dict(type='LoadMultiViewImageFromFiles', to_float32=True),
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            reduce_beams=32,
            load_augmented=None),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=9,
            load_dim=5,
            use_dim=5,
            reduce_beams=32,
            pad_empty_sweeps=True,
            remove_close=True,
            load_augmented=None),
        dict(
            type='LoadRadarPointsMultiSweeps',
            load_dim=18,
            sweeps_num=6,
            use_dim=[
                0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
                45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56
            ],
            max_num=2500,
            compensate_velocity=True,
            filtering='none',
            normalize=False),
        dict(
            type='LoadAnnotations3D',
            with_bbox_3d=True,
            with_label_3d=True,
            with_attr_label=False),
        dict(
            type='ImageAug3D',
            final_dim=[256, 704],
            resize_lim=[0.48, 0.48],
            bot_pct_lim=[0.0, 0.0],
            rot_lim=[0.0, 0.0],
            rand_flip=False,
            is_train=False),
        dict(
            type='GlobalRotScaleTrans',
            resize_lim=[1.0, 1.0],
            rot_lim=[0.0, 0.0],
            trans_lim=0.0,
            is_train=False),
        dict(
            type='PointsRangeFilter',
            point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
        dict(
            type='ImageNormalize',
            mean=[0.485, 0.456, 0.406],
            std=[0.229, 0.224, 0.225]),
        dict(
            type='DefaultFormatBundle3D',
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ]),
        dict(
            type='Collect3D',
            keys=['img', 'points', 'radar', 'gt_bboxes_3d', 'gt_labels_3d'],
            meta_keys=[
                'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
                'lidar2image', 'camera2lidar', 'img_aug_matrix',
                'lidar_aug_matrix'
            ]),
        dict(type='GTDepth', keyframe_only=True)
    ])
radar_sweeps = 6
radar_max_points = 2500
radar_use_dims = [
    0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
    51, 52, 53, 54, 55, 56
]
radar_compensate_velocity = True
radar_filtering = 'none'
radar_voxel_size = [0.8, 0.8, 8]
radar_jitter = 0
radar_normalize = False
model = dict(
    type='BEVFusion',
    encoders=dict(
        camera=dict(
            neck=dict(
                type='GeneralizedLSSFPN',
                in_channels=[192, 384, 768],
                out_channels=256,
                start_level=0,
                num_outs=3,
                norm_cfg=dict(type='BN2d', requires_grad=True),
                act_cfg=dict(type='ReLU', inplace=True),
                upsample_cfg=dict(mode='bilinear', align_corners=False)),
            vtransform=dict(
                type='DepthLSSTransform',
                in_channels=256,
                out_channels=80,
                image_size=[256, 704],
                feature_size=[32, 88],
                xbound=[-54.0, 54.0, 0.3],
                ybound=[-54.0, 54.0, 0.3],
                zbound=[-10.0, 10.0, 20.0],
                dbound=[1.0, 60.0, 0.5],
                downsample=2),
            backbone=dict(
                type='MoENetwork',
                num_experts=4,
                in_channels=3,
                experts_cfg=[
                    dict(
                        type='SwinTransformer',
                        embed_dims=96,
                        depths=[2, 2, 6, 2],
                        num_heads=[3, 6, 12, 24],
                        window_size=7,
                        mlp_ratio=4,
                        qkv_bias=True,
                        qk_scale=None,
                        drop_rate=0.0,
                        attn_drop_rate=0.0,
                        drop_path_rate=0.2,
                        patch_norm=True,
                        out_indices=[1, 2, 3],
                        with_cp=False,
                        convert_weights=True,
                        init_cfg=dict(
                            type='Pretrained',
                            checkpoint=
                            'pretrained/swint-nuimages-pretrained.pth')),
                    dict(
                        type='ResNet',
                        depth=50,
                        num_stages=4,
                        out_indices=[1, 2, 3],
                        norm_cfg=dict(type='BN2d', requires_grad=True),
                        norm_eval=False,
                        init_cfg=dict(
                            type='Pretrained',
                            checkpoint='torchvision://resnet50')),
                    dict(
                        type='ResNet',
                        depth=101,
                        num_stages=4,
                        out_indices=[1, 2, 3],
                        norm_cfg=dict(type='BN2d', requires_grad=True),
                        norm_eval=False,
                        init_cfg=dict(
                            type='Pretrained',
                            checkpoint='torchvision://resnet101')),
                    dict(
                        type='PyramidVisionTransformer',
                        pretrain_img_size=[256, 704],
                        embed_dims=64,
                        num_stages=4,
                        drop_path_rate=0.1,
                        out_indices=[1, 2, 3],
                        sr_ratios=[4, 2, 1, 1],
                        convert_weights=True,
                        norm_cfg=dict(type='LN'),
                        init_cfg=dict(
                            type='Pretrained',
                            checkpoint='pretrained/pvt_v2_b5.pth'))
                ],
                router=dict(in_channels=3, num_experts=4))),
        lidar=dict(
            voxelize=dict(
                max_num_points=10,
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0],
                voxel_size=[0.075, 0.075, 0.2],
                max_voxels=[120000, 160000]),
            backbone=dict(
                type='SparseEncoder',
                in_channels=5,
                sparse_shape=[1440, 1440, 41],
                output_channels=128,
                order=['conv', 'norm', 'act'],
                encoder_channels=[[16, 16, 32], [32, 32, 64], [64, 64, 128],
                                  [128, 128]],
                encoder_paddings=[[0, 0, 1], [0, 0, 1], [0, 0, [1, 1, 0]],
                                  [0, 0]],
                block_type='basicblock'))),
    fuser=dict(type='ConvFuser', in_channels=[80, 256], out_channels=256),
    heads=dict(
        map=None,
        object=dict(
            type='TransFusionHead',
            num_proposals=200,
            auxiliary=True,
            in_channels=512,
            hidden_channel=128,
            num_classes=10,
            num_decoder_layers=1,
            num_heads=8,
            nms_kernel_size=3,
            ffn_channel=256,
            dropout=0.1,
            bn_momentum=0.1,
            activation='relu',
            train_cfg=dict(
                dataset='nuScenes',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0],
                grid_size=[1440, 1440, 41],
                voxel_size=[0.075, 0.075, 0.2],
                out_size_factor=8,
                gaussian_overlap=0.1,
                min_radius=2,
                pos_weight=-1,
                code_weights=[
                    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2
                ],
                assigner=dict(
                    type='HungarianAssigner3D',
                    iou_calculator=dict(
                        type='BboxOverlaps3D', coordinate='lidar'),
                    cls_cost=dict(
                        type='FocalLossCost',
                        gamma=2.0,
                        alpha=0.25,
                        weight=0.15),
                    reg_cost=dict(type='BBoxBEVL1Cost', weight=0.25),
                    iou_cost=dict(type='IoU3DCost', weight=0.25))),
            test_cfg=dict(
                dataset='nuScenes',
                grid_size=[1440, 1440, 41],
                out_size_factor=8,
                voxel_size=[0.075, 0.075],
                pc_range=[-54.0, -54.0],
                nms_type=None),
            common_heads=dict(
                center=[2, 2],
                height=[1, 2],
                dim=[3, 2],
                rot=[2, 2],
                vel=[2, 2]),
            bbox_coder=dict(
                type='TransFusionBBoxCoder',
                pc_range=[-54.0, -54.0],
                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
                score_threshold=0.0,
                out_size_factor=8,
                voxel_size=[0.075, 0.075],
                code_size=10),
            loss_cls=dict(
                type='FocalLoss',
                use_sigmoid=True,
                gamma=2.0,
                alpha=0.25,
                reduction='mean',
                loss_weight=1.0),
            loss_heatmap=dict(
                type='GaussianFocalLoss', reduction='mean', loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', reduction='mean',
                           loss_weight=0.25))),
    decoder=dict(
        backbone=dict(
            type='SECOND',
            in_channels=256,
            out_channels=[128, 256],
            layer_nums=[5, 5],
            layer_strides=[1, 2],
            norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
            conv_cfg=dict(type='Conv2d', bias=False)),
        neck=dict(
            type='SECONDFPN',
            in_channels=[128, 256],
            out_channels=[256, 256],
            upsample_strides=[1, 2],
            norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
            upsample_cfg=dict(type='deconv', bias=False),
            use_conv_for_no_stride=True)))
optimizer = dict(type='AdamW', lr=0.0002, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.33333333,
    min_lr_ratio=0.001)
momentum_config = dict(policy='cyclic')
run_dir = 'train_result/moe_4_experts'

2025-04-28 03:08:40,591 - mmdet3d - INFO - Set random seed to 0, deterministic mode: False
2025-04-28 03:08:41,066 - mmdet3d - INFO - load 3068 pedestrian database infos
2025-04-28 03:08:41,066 - mmdet3d - INFO - load 4082 car database infos
2025-04-28 03:08:41,066 - mmdet3d - INFO - load 773 traffic_cone database infos
2025-04-28 03:08:41,066 - mmdet3d - INFO - load 147 bicycle database infos
2025-04-28 03:08:41,066 - mmdet3d - INFO - load 1851 barrier database infos
2025-04-28 03:08:41,066 - mmdet3d - INFO - load 451 truck database infos
2025-04-28 03:08:41,066 - mmdet3d - INFO - load 337 bus database infos
2025-04-28 03:08:41,066 - mmdet3d - INFO - load 174 construction_vehicle database infos
2025-04-28 03:08:41,067 - mmdet3d - INFO - load 57 movable_object.pushable_pullable database infos
2025-04-28 03:08:41,067 - mmdet3d - INFO - load 179 motorcycle database infos
2025-04-28 03:08:41,067 - mmdet3d - INFO - load 13 movable_object.debris database infos
2025-04-28 03:08:41,067 - mmdet3d - INFO - load 59 trailer database infos
2025-04-28 03:08:41,067 - mmdet3d - INFO - load 25 human.pedestrian.personal_mobility database infos
2025-04-28 03:08:41,086 - mmdet3d - INFO - After filter database:
2025-04-28 03:08:41,086 - mmdet3d - INFO - load 2395 pedestrian database infos
2025-04-28 03:08:41,086 - mmdet3d - INFO - load 2287 car database infos
2025-04-28 03:08:41,086 - mmdet3d - INFO - load 381 traffic_cone database infos
2025-04-28 03:08:41,086 - mmdet3d - INFO - load 108 bicycle database infos
2025-04-28 03:08:41,086 - mmdet3d - INFO - load 1442 barrier database infos
2025-04-28 03:08:41,086 - mmdet3d - INFO - load 381 truck database infos
2025-04-28 03:08:41,086 - mmdet3d - INFO - load 275 bus database infos
2025-04-28 03:08:41,086 - mmdet3d - INFO - load 155 construction_vehicle database infos
2025-04-28 03:08:41,086 - mmdet3d - INFO - load 57 movable_object.pushable_pullable database infos
2025-04-28 03:08:41,086 - mmdet3d - INFO - load 124 motorcycle database infos
2025-04-28 03:08:41,086 - mmdet3d - INFO - load 13 movable_object.debris database infos
2025-04-28 03:08:41,086 - mmdet3d - INFO - load 57 trailer database infos
2025-04-28 03:08:41,086 - mmdet3d - INFO - load 25 human.pedestrian.personal_mobility database infos
/opt/conda/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  /opt/conda/conda-bld/pytorch_1639180588308/work/aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
/opt/conda/lib/python3.8/site-packages/mmcv/runner/base_module.py:127: UserWarning: init_weights of MoENetwork has been called more than once.
  warnings.warn(f'init_weights of {self.__class__.__name__} has '
2025-04-28 03:08:42,368 - mmdet3d - INFO - Model:
BEVFusion(
  (encoders): ModuleDict(
    (camera): ModuleDict(
      (backbone): MoENetwork(
        (moe): MoE(
          (experts): ModuleList(
            (0): SwinTransformer(
              (patch_embed): PatchEmbed(
                (adap_padding): AdaptivePadding()
                (projection): Conv2d(3, 96, kernel_size=(4, 4), stride=(4, 4))
                (norm): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
              )
              (drop_after_pos): Dropout(p=0.0, inplace=False)
              (stages): ModuleList(
                (0): SwinBlockSequence(
                  (blocks): ModuleList(
                    (0): SwinBlock(
                      (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=96, out_features=288, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=96, out_features=96, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=96, out_features=384, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=384, out_features=96, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (1): SwinBlock(
                      (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=96, out_features=288, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=96, out_features=96, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=96, out_features=384, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=384, out_features=96, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                  )
                  (downsample): PatchMerging(
                    (adap_padding): AdaptivePadding()
                    (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
                    (norm): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                    (reduction): Linear(in_features=384, out_features=192, bias=False)
                  )
                )
                (1): SwinBlockSequence(
                  (blocks): ModuleList(
                    (0): SwinBlock(
                      (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=192, out_features=576, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=192, out_features=192, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=192, out_features=768, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=768, out_features=192, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (1): SwinBlock(
                      (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=192, out_features=576, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=192, out_features=192, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=192, out_features=768, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=768, out_features=192, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                  )
                  (downsample): PatchMerging(
                    (adap_padding): AdaptivePadding()
                    (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
                    (norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                    (reduction): Linear(in_features=768, out_features=384, bias=False)
                  )
                )
                (2): SwinBlockSequence(
                  (blocks): ModuleList(
                    (0): SwinBlock(
                      (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=384, out_features=1152, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=384, out_features=384, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=384, out_features=1536, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=1536, out_features=384, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (1): SwinBlock(
                      (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=384, out_features=1152, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=384, out_features=384, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=384, out_features=1536, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=1536, out_features=384, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (2): SwinBlock(
                      (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=384, out_features=1152, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=384, out_features=384, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=384, out_features=1536, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=1536, out_features=384, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (3): SwinBlock(
                      (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=384, out_features=1152, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=384, out_features=384, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=384, out_features=1536, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=1536, out_features=384, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (4): SwinBlock(
                      (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=384, out_features=1152, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=384, out_features=384, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=384, out_features=1536, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=1536, out_features=384, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (5): SwinBlock(
                      (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=384, out_features=1152, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=384, out_features=384, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=384, out_features=1536, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=1536, out_features=384, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                  )
                  (downsample): PatchMerging(
                    (adap_padding): AdaptivePadding()
                    (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
                    (norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
                    (reduction): Linear(in_features=1536, out_features=768, bias=False)
                  )
                )
                (3): SwinBlockSequence(
                  (blocks): ModuleList(
                    (0): SwinBlock(
                      (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=768, out_features=2304, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=768, out_features=768, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=768, out_features=3072, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=3072, out_features=768, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (1): SwinBlock(
                      (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=768, out_features=2304, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=768, out_features=768, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=768, out_features=3072, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=3072, out_features=768, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                  )
                )
              )
              (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
              (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              (norm3): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            init_cfg={'type': 'Pretrained', 'checkpoint': 'pretrained/swint-nuimages-pretrained.pth'}
            (1): ResNet(
              (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
              (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (layer1): ResLayer(
                (0): Bottleneck(
                  (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
              (layer2): ResLayer(
                (0): Bottleneck(
                  (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (3): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
              (layer3): ResLayer(
                (0): Bottleneck(
                  (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (3): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (4): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (5): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
              (layer4): ResLayer(
                (0): Bottleneck(
                  (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
            )
            init_cfg={'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
            (2): ResNet(
              (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
              (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (layer1): ResLayer(
                (0): Bottleneck(
                  (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
              (layer2): ResLayer(
                (0): Bottleneck(
                  (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (3): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
              (layer3): ResLayer(
                (0): Bottleneck(
                  (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (3): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (4): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (5): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (6): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (7): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (8): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (9): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (10): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (11): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (12): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (13): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (14): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (15): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (16): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (17): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (18): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (19): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (20): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (21): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (22): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
              (layer4): ResLayer(
                (0): Bottleneck(
                  (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
            )
            init_cfg={'type': 'Pretrained', 'checkpoint': 'torchvision://resnet101'}
            (3): PyramidVisionTransformer(
              (layers): ModuleList(
                (0): ModuleList(
                  (0): PatchEmbed(
                    (projection): Conv2d(3, 64, kernel_size=(4, 4), stride=(4, 4))
                    (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleList(
                    (0): AbsolutePositionEmbedding(
                      (drop): Dropout(p=0.0, inplace=False)
                    )
                    (1): PVTEncoderLayer(
                      (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                        (sr): Conv2d(64, 64, kernel_size=(4, 4), stride=(4, 4))
                        (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      )
                      (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(64, 512, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (2): PVTEncoderLayer(
                      (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                        (sr): Conv2d(64, 64, kernel_size=(4, 4), stride=(4, 4))
                        (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      )
                      (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(64, 512, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (3): PVTEncoderLayer(
                      (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                        (sr): Conv2d(64, 64, kernel_size=(4, 4), stride=(4, 4))
                        (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      )
                      (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(64, 512, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                  )
                  (2): Identity()
                )
                (1): ModuleList(
                  (0): PatchEmbed(
                    (projection): Conv2d(64, 128, kernel_size=(2, 2), stride=(2, 2))
                    (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleList(
                    (0): AbsolutePositionEmbedding(
                      (drop): Dropout(p=0.0, inplace=False)
                    )
                    (1): PVTEncoderLayer(
                      (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                        (sr): Conv2d(128, 128, kernel_size=(2, 2), stride=(2, 2))
                        (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      )
                      (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(128, 1024, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (2): PVTEncoderLayer(
                      (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                        (sr): Conv2d(128, 128, kernel_size=(2, 2), stride=(2, 2))
                        (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      )
                      (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(128, 1024, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (3): PVTEncoderLayer(
                      (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                        (sr): Conv2d(128, 128, kernel_size=(2, 2), stride=(2, 2))
                        (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      )
                      (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(128, 1024, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (4): PVTEncoderLayer(
                      (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                        (sr): Conv2d(128, 128, kernel_size=(2, 2), stride=(2, 2))
                        (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      )
                      (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(128, 1024, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                  )
                  (2): Identity()
                )
                (2): ModuleList(
                  (0): PatchEmbed(
                    (projection): Conv2d(128, 320, kernel_size=(2, 2), stride=(2, 2))
                    (norm): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleList(
                    (0): AbsolutePositionEmbedding(
                      (drop): Dropout(p=0.0, inplace=False)
                    )
                    (1): PVTEncoderLayer(
                      (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (2): PVTEncoderLayer(
                      (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (3): PVTEncoderLayer(
                      (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (4): PVTEncoderLayer(
                      (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (5): PVTEncoderLayer(
                      (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (6): PVTEncoderLayer(
                      (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                  )
                  (2): Identity()
                )
                (3): ModuleList(
                  (0): PatchEmbed(
                    (projection): Conv2d(320, 512, kernel_size=(2, 2), stride=(2, 2))
                    (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleList(
                    (0): AbsolutePositionEmbedding(
                      (drop): Dropout(p=0.0, inplace=False)
                    )
                    (1): PVTEncoderLayer(
                      (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (2): PVTEncoderLayer(
                      (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (3): PVTEncoderLayer(
                      (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                  )
                  (2): Identity()
                )
              )
            )
            init_cfg={'type': 'Pretrained', 'checkpoint': 'pretrained/pvt_v2_b5.pth'}
          )
          (router): MLPRouter(
            (conv): Conv2d(3, 512, kernel_size=(3, 3), stride=(1, 1))
            (pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Linear(in_features=512, out_features=4, bias=True)
          )
          (conv_swin_1): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
          (conv_swin_2): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1))
          (conv_swin_3): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
          (conv_resnet_1): Conv2d(512, 192, kernel_size=(1, 1), stride=(1, 1))
          (conv_resnet_2): Conv2d(1024, 384, kernel_size=(1, 1), stride=(1, 1))
          (conv_resnet_3): Conv2d(2048, 768, kernel_size=(1, 1), stride=(1, 1))
          (conv_pvt_1): Conv2d(128, 192, kernel_size=(1, 1), stride=(1, 1))
          (conv_pvt_2): Conv2d(320, 384, kernel_size=(1, 1), stride=(1, 1))
          (conv_pvt_3): Conv2d(512, 768, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (neck): GeneralizedLSSFPN(
        (lateral_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(448, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(1152, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
        (fpn_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
      )
      (vtransform): DepthLSSTransform(
        (dtransform): Sequential(
          (0): Conv2d(1, 8, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(8, 32, kernel_size=(5, 5), stride=(4, 4), padding=(2, 2))
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(32, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
        (depthnet): Sequential(
          (0): Conv2d(320, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 198, kernel_size=(1, 1), stride=(1, 1))
        )
        (downsample): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (4): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
      )
    )
    (lidar): ModuleDict(
      (voxelize): Voxelization(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0], max_num_points=10, max_voxels=(120000, 160000), deterministic=True)
      (backbone): SparseEncoder(
        (conv_input): SparseSequential(
          (0): SubMConv3d()
          (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (encoder_layers): SparseSequential(
          (encoder_layer1): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer2): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer3): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer4): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
          )
        )
        (conv_out): SparseSequential(
          (0): SparseConv3d()
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (fuser): ConvFuser(
    (0): Conv2d(336, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (decoder): ModuleDict(
    (backbone): SECOND(
      (blocks): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
          (9): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (10): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (11): ReLU(inplace=True)
          (12): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (13): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (14): ReLU(inplace=True)
          (15): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (16): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (17): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (10): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (11): ReLU(inplace=True)
          (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (13): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (14): ReLU(inplace=True)
          (15): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (16): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (17): ReLU(inplace=True)
        )
      )
    )
    init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
    (neck): SECONDFPN(
      (deblocks): ModuleList(
        (0): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
    init_cfg=[{'type': 'Kaiming', 'layer': 'ConvTranspose2d'}, {'type': 'Constant', 'layer': 'NaiveSyncBatchNorm2d', 'val': 1.0}]
  )
  (heads): ModuleDict(
    (object): TransFusionHead(
      (loss_cls): FocalLoss()
      (loss_bbox): L1Loss()
      (loss_iou): VarifocalLoss()
      (loss_heatmap): GaussianFocalLoss()
      (shared_conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (heatmap_head): Sequential(
        (0): ConvModule(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (1): Conv2d(128, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (class_encoding): Conv1d(10, 128, kernel_size=(1,), stride=(1,))
      (decoder): ModuleList(
        (0): TransformerDecoderLayer(
          (self_attn): MultiheadAttention(
            (out_proj): Linear(in_features=128, out_features=128, bias=True)
          )
          (multihead_attn): MultiheadAttention(
            (out_proj): Linear(in_features=128, out_features=128, bias=True)
          )
          (linear1): Linear(in_features=128, out_features=256, bias=True)
          (dropout): Dropout(p=0.1, inplace=False)
          (linear2): Linear(in_features=256, out_features=128, bias=True)
          (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (norm3): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (dropout1): Dropout(p=0.1, inplace=False)
          (dropout2): Dropout(p=0.1, inplace=False)
          (dropout3): Dropout(p=0.1, inplace=False)
          (self_posembed): PositionEmbeddingLearned(
            (position_embedding_head): Sequential(
              (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
            )
          )
          (cross_posembed): PositionEmbeddingLearned(
            (position_embedding_head): Sequential(
              (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
            )
          )
        )
      )
      (prediction_heads): ModuleList(
        (0): FFN(
          (center): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 1, kernel_size=(1,), stride=(1,))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 3, kernel_size=(1,), stride=(1,))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 10, kernel_size=(1,), stride=(1,))
          )
        )
      )
    )
  )
)
2025-04-28 03:08:49,986 - mmdet3d - INFO - Start running, host: root@1cf78a6d245c, work_dir: /bevfusion/train_result/moe_4_experts
2025-04-28 03:08:49,986 - mmdet3d - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2025-04-28 03:08:49,986 - mmdet3d - INFO - workflow: [('train', 1)], max: 6 epochs
2025-04-28 03:08:49,991 - mmdet3d - INFO - Checkpoints will be saved to /bevfusion/train_result/moe_4_experts by HardDiskBackend.
/opt/conda/lib/python3.8/site-packages/torch/nn/functional.py:3631: UserWarning: Default upsampling behavior when mode=bilinear is changed to align_corners=False since 0.4.0. Please specify align_corners=True if the old behavior is desired. See the documentation of nn.Upsample for details.
  warnings.warn(
2025-04-28 03:08:59,201 - mmcv - INFO - Reducer buckets have been rebuilt in this iteration.
2025-04-28 03:09:39,003 - mmdet3d - INFO - Epoch [1][50/815]	lr: 7.973e-05, eta: 1:18:38, time: 0.975, data_time: 0.080, memory: 13385, loss/object/loss_heatmap: 1546.9394, loss/object/layer_-1_loss_cls: 11.8785, loss/object/layer_-1_loss_bbox: 9.6615, stats/object/matched_ious: 0.0037, loss: 1568.4793, grad_norm: nan
2025-04-28 03:10:20,380 - mmdet3d - INFO - Epoch [1][100/815]	lr: 9.307e-05, eta: 1:11:56, time: 0.828, data_time: 0.010, memory: 13393, loss/object/loss_heatmap: 25.3094, loss/object/layer_-1_loss_cls: 9.7082, loss/object/layer_-1_loss_bbox: 11.2905, stats/object/matched_ious: 0.0045, loss: 46.3081, grad_norm: 328.5533
2025-04-28 03:11:01,792 - mmdet3d - INFO - Epoch [1][150/815]	lr: 1.064e-04, eta: 1:09:16, time: 0.828, data_time: 0.010, memory: 13393, loss/object/loss_heatmap: 3.0945, loss/object/layer_-1_loss_cls: 5.3930, loss/object/layer_-1_loss_bbox: 6.0380, stats/object/matched_ious: 0.0221, loss: 14.5256, grad_norm: 25.2284
2025-04-28 03:11:42,890 - mmdet3d - INFO - Epoch [1][200/815]	lr: 1.197e-04, eta: 1:07:28, time: 0.822, data_time: 0.010, memory: 13393, loss/object/loss_heatmap: 3.0877, loss/object/layer_-1_loss_cls: 4.6398, loss/object/layer_-1_loss_bbox: 5.7920, stats/object/matched_ious: 0.0318, loss: 13.5195, grad_norm: 48.9399
2025-04-28 03:12:24,332 - mmdet3d - INFO - Epoch [1][250/815]	lr: 1.331e-04, eta: 1:06:13, time: 0.829, data_time: 0.010, memory: 13393, loss/object/loss_heatmap: 2.8037, loss/object/layer_-1_loss_cls: 2.5139, loss/object/layer_-1_loss_bbox: 5.3109, stats/object/matched_ious: 0.0426, loss: 10.6284, grad_norm: 21.5722
2025-04-28 03:13:05,758 - mmdet3d - INFO - Epoch [1][300/815]	lr: 1.464e-04, eta: 1:05:09, time: 0.828, data_time: 0.010, memory: 13393, loss/object/loss_heatmap: 2.8682, loss/object/layer_-1_loss_cls: 2.2254, loss/object/layer_-1_loss_bbox: 5.0577, stats/object/matched_ious: 0.0449, loss: 10.1513, grad_norm: 60.1889
2025-04-28 03:13:47,045 - mmdet3d - INFO - Epoch [1][350/815]	lr: 1.597e-04, eta: 1:04:09, time: 0.826, data_time: 0.010, memory: 13393, loss/object/loss_heatmap: 2.8268, loss/object/layer_-1_loss_cls: 1.5748, loss/object/layer_-1_loss_bbox: 4.7530, stats/object/matched_ious: 0.0416, loss: 9.1546, grad_norm: 19.9004
2025-04-28 03:14:28,454 - mmdet3d - INFO - Epoch [1][400/815]	lr: 1.731e-04, eta: 1:03:16, time: 0.828, data_time: 0.010, memory: 13393, loss/object/loss_heatmap: 2.8771, loss/object/layer_-1_loss_cls: 1.8372, loss/object/layer_-1_loss_bbox: 4.1871, stats/object/matched_ious: 0.0419, loss: 8.9014, grad_norm: 21.9255
2025-04-28 03:15:09,862 - mmdet3d - INFO - Epoch [1][450/815]	lr: 1.864e-04, eta: 1:02:25, time: 0.828, data_time: 0.010, memory: 13393, loss/object/loss_heatmap: 2.7094, loss/object/layer_-1_loss_cls: 1.2091, loss/object/layer_-1_loss_bbox: 4.2406, stats/object/matched_ious: 0.0478, loss: 8.1591, grad_norm: 17.7608
2025-04-28 03:15:51,247 - mmdet3d - INFO - Epoch [1][500/815]	lr: 1.997e-04, eta: 1:01:36, time: 0.828, data_time: 0.010, memory: 13393, loss/object/loss_heatmap: 2.7204, loss/object/layer_-1_loss_cls: 0.9237, loss/object/layer_-1_loss_bbox: 4.1720, stats/object/matched_ious: 0.0482, loss: 7.8160, grad_norm: 15.8781
2025-04-28 03:16:32,522 - mmdet3d - INFO - Epoch [1][550/815]	lr: 2.000e-04, eta: 1:00:47, time: 0.826, data_time: 0.010, memory: 13393, loss/object/loss_heatmap: 2.6686, loss/object/layer_-1_loss_cls: 0.8205, loss/object/layer_-1_loss_bbox: 3.9578, stats/object/matched_ious: 0.0590, loss: 7.4469, grad_norm: 15.5477
2025-04-28 03:17:13,703 - mmdet3d - INFO - Epoch [1][600/815]	lr: 2.000e-04, eta: 0:59:59, time: 0.824, data_time: 0.010, memory: 13393, loss/object/loss_heatmap: 2.5252, loss/object/layer_-1_loss_cls: 0.6920, loss/object/layer_-1_loss_bbox: 3.6809, stats/object/matched_ious: 0.0625, loss: 6.8981, grad_norm: 13.6921
2025-04-28 03:17:55,064 - mmdet3d - INFO - Epoch [1][650/815]	lr: 2.000e-04, eta: 0:59:13, time: 0.827, data_time: 0.010, memory: 13393, loss/object/loss_heatmap: 2.5347, loss/object/layer_-1_loss_cls: 0.6108, loss/object/layer_-1_loss_bbox: 3.4661, stats/object/matched_ious: 0.0637, loss: 6.6116, grad_norm: 13.1651
2025-04-28 03:18:36,350 - mmdet3d - INFO - Epoch [1][700/815]	lr: 2.000e-04, eta: 0:58:28, time: 0.826, data_time: 0.010, memory: 13393, loss/object/loss_heatmap: 2.4248, loss/object/layer_-1_loss_cls: 0.6149, loss/object/layer_-1_loss_bbox: 3.7063, stats/object/matched_ious: 0.0618, loss: 6.7460, grad_norm: 12.6797
2025-04-28 03:19:17,695 - mmdet3d - INFO - Epoch [1][750/815]	lr: 2.000e-04, eta: 0:57:43, time: 0.827, data_time: 0.010, memory: 13393, loss/object/loss_heatmap: 2.4832, loss/object/layer_-1_loss_cls: 0.5973, loss/object/layer_-1_loss_bbox: 3.7325, stats/object/matched_ious: 0.0609, loss: 6.8130, grad_norm: 17.2877
2025-04-28 03:19:58,953 - mmdet3d - INFO - Epoch [1][800/815]	lr: 2.000e-04, eta: 0:56:58, time: 0.825, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 2.5202, loss/object/layer_-1_loss_cls: 0.5750, loss/object/layer_-1_loss_bbox: 3.5102, stats/object/matched_ious: 0.0622, loss: 6.6054, grad_norm: 14.7788
2025-04-28 03:20:11,639 - mmdet3d - INFO - Saving checkpoint at 1 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 3s, ETA:   264s[  ] 2/81, 0.6 task/s, elapsed: 3s, ETA:   130s/bevfusion/mmdet3d/core/bbox/coders/transfusion_bbox_coder.py:96: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.post_center_range = torch.tensor(
[  ] 3/81, 0.8 task/s, elapsed: 4s, ETA:    92s[  ] 4/81, 1.1 task/s, elapsed: 4s, ETA:    68s[  ] 5/81, 1.3 task/s, elapsed: 4s, ETA:    58s[  ] 6/81, 1.6 task/s, elapsed: 4s, ETA:    48s[  ] 7/81, 1.7 task/s, elapsed: 4s, ETA:    43s[  ] 8/81, 2.0 task/s, elapsed: 4s, ETA:    37s[  ] 9/81, 2.1 task/s, elapsed: 4s, ETA:    35s[  ] 10/81, 2.3 task/s, elapsed: 4s, ETA:    31s[  ] 11/81, 2.2 task/s, elapsed: 5s, ETA:    31s[  ] 12/81, 2.4 task/s, elapsed: 5s, ETA:    28s[  ] 13/81, 2.5 task/s, elapsed: 5s, ETA:    27s[  ] 14/81, 2.7 task/s, elapsed: 5s, ETA:    25s[  ] 15/81, 2.7 task/s, elapsed: 5s, ETA:    24s[  ] 16/81, 2.9 task/s, elapsed: 5s, ETA:    22s[  ] 17/81, 2.9 task/s, elapsed: 6s, ETA:    22s[  ] 18/81, 3.1 task/s, elapsed: 6s, ETA:    20s[  ] 19/81, 2.9 task/s, elapsed: 7s, ETA:    21s[  ] 20/81, 3.1 task/s, elapsed: 7s, ETA:    20s[  ] 21/81, 3.1 task/s, elapsed: 7s, ETA:    19s[  ] 22/81, 3.2 task/s, elapsed: 7s, ETA:    18s[  ] 23/81, 3.2 task/s, elapsed: 7s, ETA:    18s[  ] 24/81, 3.4 task/s, elapsed: 7s, ETA:    17s[  ] 25/81, 3.4 task/s, elapsed: 7s, ETA:    17s[  ] 26/81, 3.5 task/s, elapsed: 7s, ETA:    16s[  ] 27/81, 3.3 task/s, elapsed: 8s, ETA:    16s[  ] 28/81, 3.4 task/s, elapsed: 8s, ETA:    15s[  ] 29/81, 3.5 task/s, elapsed: 8s, ETA:    15s[  ] 30/81, 3.6 task/s, elapsed: 8s, ETA:    14s[  ] 31/81, 3.6 task/s, elapsed: 9s, ETA:    14s[  ] 32/81, 3.7 task/s, elapsed: 9s, ETA:    13s[  ] 33/81, 3.7 task/s, elapsed: 9s, ETA:    13s[  ] 34/81, 3.8 task/s, elapsed: 9s, ETA:    12s[  ] 35/81, 3.6 task/s, elapsed: 10s, ETA:    13s[  ] 36/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 37/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 38/81, 3.8 task/s, elapsed: 10s, ETA:    11s[  ] 39/81, 3.8 task/s, elapsed: 10s, ETA:    11s[  ] 40/81, 3.9 task/s, elapsed: 10s, ETA:    11s[> ] 41/81, 3.9 task/s, elapsed: 11s, ETA:    10s[> ] 42/81, 4.0 task/s, elapsed: 11s, ETA:    10s[> ] 43/81, 3.8 task/s, elapsed: 11s, ETA:    10s[> ] 44/81, 3.9 task/s, elapsed: 11s, ETA:    10s[> ] 45/81, 3.9 task/s, elapsed: 12s, ETA:     9s[> ] 46/81, 4.0 task/s, elapsed: 12s, ETA:     9s[> ] 47/81, 4.0 task/s, elapsed: 12s, ETA:     9s[> ] 48/81, 4.0 task/s, elapsed: 12s, ETA:     8s[> ] 49/81, 4.0 task/s, elapsed: 12s, ETA:     8s[> ] 50/81, 4.1 task/s, elapsed: 12s, ETA:     8s[> ] 51/81, 4.0 task/s, elapsed: 13s, ETA:     8s[> ] 52/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 53/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 54/81, 4.1 task/s, elapsed: 13s, ETA:     7s[> ] 55/81, 4.1 task/s, elapsed: 13s, ETA:     6s[> ] 56/81, 4.2 task/s, elapsed: 13s, ETA:     6s[> ] 57/81, 4.2 task/s, elapsed: 14s, ETA:     6s[> ] 58/81, 4.2 task/s, elapsed: 14s, ETA:     5s[> ] 59/81, 4.2 task/s, elapsed: 14s, ETA:     5s[> ] 60/81, 4.3 task/s, elapsed: 14s, ETA:     5s[> ] 61/81, 4.2 task/s, elapsed: 15s, ETA:     5s[> ] 62/81, 4.3 task/s, elapsed: 15s, ETA:     4s[> ] 63/81, 4.3 task/s, elapsed: 15s, ETA:     4s[> ] 64/81, 4.3 task/s, elapsed: 15s, ETA:     4s[> ] 65/81, 4.3 task/s, elapsed: 15s, ETA:     4s[> ] 66/81, 4.4 task/s, elapsed: 15s, ETA:     3s[> ] 67/81, 4.4 task/s, elapsed: 15s, ETA:     3s[> ] 68/81, 4.4 task/s, elapsed: 15s, ETA:     3s[> ] 69/81, 4.4 task/s, elapsed: 16s, ETA:     3s[> ] 70/81, 4.5 task/s, elapsed: 16s, ETA:     2s[> ] 71/81, 4.4 task/s, elapsed: 16s, ETA:     2s[> ] 72/81, 4.5 task/s, elapsed: 16s, ETA:     2s[> ] 73/81, 4.4 task/s, elapsed: 16s, ETA:     2s[> ] 74/81, 4.5 task/s, elapsed: 16s, ETA:     2s[> ] 75/81, 4.5 task/s, elapsed: 17s, ETA:     1s[> ] 76/81, 4.5 task/s, elapsed: 17s, ETA:     1s[> ] 77/81, 4.5 task/s, elapsed: 17s, ETA:     1s[> ] 78/81, 4.6 task/s, elapsed: 17s, ETA:     1s[> ] 79/81, 4.6 task/s, elapsed: 17s, ETA:     0s[> ] 80/81, 4.6 task/s, elapsed: 17s, ETA:     0s[>>] 81/81, 4.5 task/s, elapsed: 18s, ETA:     0s[>>] 82/81, 4.6 task/s, elapsed: 18s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 27.1 task/s, elapsed: 0s, ETA:     3s[  ] 2/81, 28.2 task/s, elapsed: 0s, ETA:     3s[  ] 3/81, 30.4 task/s, elapsed: 0s, ETA:     3s[  ] 4/81, 31.4 task/s, elapsed: 0s, ETA:     2s[  ] 5/81, 32.0 task/s, elapsed: 0s, ETA:     2s[  ] 6/81, 32.3 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 32.6 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 33.0 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 33.2 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 33.5 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 33.8 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 33.9 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 34.1 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 34.2 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 34.4 task/s, elapsed: 0s, ETA:     2s[  ] 17/81, 34.5 task/s, elapsed: 0s, ETA:     2s[  ] 18/81, 34.5 task/s, elapsed: 1s, ETA:     2s[  ] 19/81, 34.5 task/s, elapsed: 1s, ETA:     2s[  ] 20/81, 34.6 task/s, elapsed: 1s, ETA:     2s[  ] 21/81, 34.6 task/s, elapsed: 1s, ETA:     2s[  ] 22/81, 34.7 task/s, elapsed: 1s, ETA:     2s[  ] 23/81, 34.8 task/s, elapsed: 1s, ETA:     2s[  ] 24/81, 34.8 task/s, elapsed: 1s, ETA:     2s[  ] 25/81, 34.8 task/s, elapsed: 1s, ETA:     2s[  ] 26/81, 34.8 task/s, elapsed: 1s, ETA:     2s[  ] 27/81, 34.8 task/s, elapsed: 1s, ETA:     2s[  ] 28/81, 34.8 task/s, elapsed: 1s, ETA:     2s[  ] 29/81, 34.8 task/s, elapsed: 1s, ETA:     1s[  ] 30/81, 34.8 task/s, elapsed: 1s, ETA:     1s[  ] 31/81, 34.7 task/s, elapsed: 1s, ETA:     1s[  ] 32/81, 34.6 task/s, elapsed: 1s, ETA:     1s[  ] 33/81, 34.6 task/s, elapsed: 1s, ETA:     1s[  ] 34/81, 34.6 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 34.6 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 34.6 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 34.6 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 34.6 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 34.6 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 34.6 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 34.6 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 34.6 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 34.6 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 34.6 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 34.6 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 34.6 task/s, elapsed: 1s, ETA:     1s[> ] 47/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 48/81, 34.6 task/s, elapsed: 1s, ETA:     1s[> ] 49/81, 34.6 task/s, elapsed: 1s, ETA:     1s[> ] 50/81, 34.6 task/s, elapsed: 1s, ETA:     1s[> ] 51/81, 34.6 task/s, elapsed: 1s, ETA:     1s[> ] 52/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 53/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 54/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 55/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 56/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 57/81, 34.4 task/s, elapsed: 2s, ETA:     1s[> ] 58/81, 34.4 task/s, elapsed: 2s, ETA:     1s[> ] 59/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 60/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 61/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 62/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 63/81, 34.4 task/s, elapsed: 2s, ETA:     1s[> ] 64/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 65/81, 34.0 task/s, elapsed: 2s, ETA:     0s[> ] 66/81, 34.0 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 34.0 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 34.0 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 34.0 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 34.0 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 33.9 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 33.9 task/s, elapsed: 2s, ETA:     0s[> ] 73/81, 33.8 task/s, elapsed: 2s, ETA:     0s[> ] 74/81, 33.7 task/s, elapsed: 2s, ETA:     0s[> ] 75/81, 33.7 task/s, elapsed: 2s, ETA:     0s[> ] 76/81, 33.6 task/s, elapsed: 2s, ETA:     0s[> ] 77/81, 33.5 task/s, elapsed: 2s, ETA:     0s[> ] 78/81, 33.1 task/s, elapsed: 2s, ETA:     0s[> ] 79/81, 32.7 task/s, elapsed: 2s, ETA:     0s[> ] 80/81, 32.8 task/s, elapsed: 2s, ETA:     0s[>>] 81/81, 32.8 task/s, elapsed: 2s, ETA:     0s
Results writes to /tmp/tmpvmhvdttb/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7faadfae01c0>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 52% 42/81 [00:00<00:00, 416.43it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0013
mATE: 0.9978
mASE: 0.9471
mAOE: 1.0885
mAVE: 0.9352
mAAE: 0.8866
NDS: 0.0240
Eval time: 2.3s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.012 	1.116 	0.797 	1.458 	0.385 	0.165 
truck               	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bus                 	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.001 	0.861 	0.674 	1.339 	1.097 	0.928 
motorcycle          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.000 	1.000 	1.000 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-28 03:20:42,650 - mmdet3d - INFO - Epoch(val) [1][41]	object/car_ap_dist_0.5: 0.0000, object/car_ap_dist_1.0: 0.0000, object/car_ap_dist_2.0: 0.0146, object/car_ap_dist_4.0: 0.0333, object/car_trans_err: 1.1162, object/car_scale_err: 0.7968, object/car_orient_err: 1.4577, object/car_vel_err: 0.3850, object/car_attr_err: 0.1646, object/mATE: 0.9978, object/mASE: 0.9471, object/mAOE: 1.0885, object/mAVE: 0.9352, object/mAAE: 0.8866, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0000, object/truck_ap_dist_2.0: 0.0000, object/truck_ap_dist_4.0: 0.0000, object/truck_trans_err: 1.0000, object/truck_scale_err: 1.0000, object/truck_orient_err: 1.0000, object/truck_vel_err: 1.0000, object/truck_attr_err: 1.0000, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0000, object/bus_ap_dist_4.0: 0.0000, object/bus_trans_err: 1.0000, object/bus_scale_err: 1.0000, object/bus_orient_err: 1.0000, object/bus_vel_err: 1.0000, object/bus_attr_err: 1.0000, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 1.0000, object/motorcycle_scale_err: 1.0000, object/motorcycle_orient_err: 1.0000, object/motorcycle_vel_err: 1.0000, object/motorcycle_attr_err: 1.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0000, object/pedestrian_ap_dist_1.0: 0.0000, object/pedestrian_ap_dist_2.0: 0.0000, object/pedestrian_ap_dist_4.0: 0.0055, object/pedestrian_trans_err: 0.8614, object/pedestrian_scale_err: 0.6744, object/pedestrian_orient_err: 1.3389, object/pedestrian_vel_err: 1.0967, object/pedestrian_attr_err: 0.9282, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0000, object/traffic_cone_ap_dist_2.0: 0.0000, object/traffic_cone_ap_dist_4.0: 0.0000, object/traffic_cone_trans_err: 1.0000, object/traffic_cone_scale_err: 1.0000, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.0240, object/map: 0.0013
2025-04-28 03:21:26,448 - mmdet3d - INFO - Epoch [2][50/815]	lr: 1.866e-04, eta: 0:55:15, time: 0.875, data_time: 0.067, memory: 13395, loss/object/loss_heatmap: 2.4302, loss/object/layer_-1_loss_cls: 0.5260, loss/object/layer_-1_loss_bbox: 3.6467, stats/object/matched_ious: 0.0644, loss: 6.6029, grad_norm: 14.5198
2025-04-28 03:22:07,696 - mmdet3d - INFO - Epoch [2][100/815]	lr: 1.866e-04, eta: 0:54:34, time: 0.825, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 2.4253, loss/object/layer_-1_loss_cls: 0.5226, loss/object/layer_-1_loss_bbox: 3.5613, stats/object/matched_ious: 0.0640, loss: 6.5091, grad_norm: 12.1066
2025-04-28 03:22:49,133 - mmdet3d - INFO - Epoch [2][150/815]	lr: 1.866e-04, eta: 0:53:54, time: 0.829, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 2.4006, loss/object/layer_-1_loss_cls: 0.5149, loss/object/layer_-1_loss_bbox: 3.7180, stats/object/matched_ious: 0.0620, loss: 6.6336, grad_norm: 11.5452
2025-04-28 03:23:30,767 - mmdet3d - INFO - Epoch [2][200/815]	lr: 1.866e-04, eta: 0:53:14, time: 0.833, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 2.3189, loss/object/layer_-1_loss_cls: 0.4831, loss/object/layer_-1_loss_bbox: 3.4836, stats/object/matched_ious: 0.0584, loss: 6.2855, grad_norm: 11.4981
2025-04-28 03:24:12,080 - mmdet3d - INFO - Epoch [2][250/815]	lr: 1.866e-04, eta: 0:52:33, time: 0.826, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 2.3490, loss/object/layer_-1_loss_cls: 0.5028, loss/object/layer_-1_loss_bbox: 3.4871, stats/object/matched_ious: 0.0641, loss: 6.3388, grad_norm: 11.8900
2025-04-28 03:24:53,333 - mmdet3d - INFO - Epoch [2][300/815]	lr: 1.866e-04, eta: 0:51:52, time: 0.825, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 2.3067, loss/object/layer_-1_loss_cls: 0.4958, loss/object/layer_-1_loss_bbox: 3.6900, stats/object/matched_ious: 0.0687, loss: 6.4924, grad_norm: 11.5966
2025-04-28 03:25:34,953 - mmdet3d - INFO - Epoch [2][350/815]	lr: 1.866e-04, eta: 0:51:12, time: 0.832, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 2.1745, loss/object/layer_-1_loss_cls: 0.4444, loss/object/layer_-1_loss_bbox: 3.2729, stats/object/matched_ious: 0.0649, loss: 5.8918, grad_norm: 10.2551
2025-04-28 03:26:16,223 - mmdet3d - INFO - Epoch [2][400/815]	lr: 1.866e-04, eta: 0:50:31, time: 0.825, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 2.2636, loss/object/layer_-1_loss_cls: 0.4570, loss/object/layer_-1_loss_bbox: 3.5386, stats/object/matched_ious: 0.0622, loss: 6.2592, grad_norm: 13.7012
2025-04-28 03:26:57,657 - mmdet3d - INFO - Epoch [2][450/815]	lr: 1.866e-04, eta: 0:49:50, time: 0.829, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 2.1705, loss/object/layer_-1_loss_cls: 0.4795, loss/object/layer_-1_loss_bbox: 3.1467, stats/object/matched_ious: 0.0700, loss: 5.7968, grad_norm: 10.6819
2025-04-28 03:27:39,199 - mmdet3d - INFO - Epoch [2][500/815]	lr: 1.866e-04, eta: 0:49:10, time: 0.831, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 2.1441, loss/object/layer_-1_loss_cls: 0.4759, loss/object/layer_-1_loss_bbox: 3.5430, stats/object/matched_ious: 0.0709, loss: 6.1630, grad_norm: 11.4757
2025-04-28 03:28:20,434 - mmdet3d - INFO - Epoch [2][550/815]	lr: 1.866e-04, eta: 0:48:28, time: 0.825, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 2.1924, loss/object/layer_-1_loss_cls: 0.4629, loss/object/layer_-1_loss_bbox: 3.3534, stats/object/matched_ious: 0.0697, loss: 6.0088, grad_norm: 12.2847
2025-04-28 03:29:01,893 - mmdet3d - INFO - Epoch [2][600/815]	lr: 1.866e-04, eta: 0:47:48, time: 0.829, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 2.0661, loss/object/layer_-1_loss_cls: 0.4397, loss/object/layer_-1_loss_bbox: 3.0478, stats/object/matched_ious: 0.0747, loss: 5.5537, grad_norm: 9.4291
2025-04-28 03:29:43,507 - mmdet3d - INFO - Epoch [2][650/815]	lr: 1.866e-04, eta: 0:47:07, time: 0.832, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 2.2091, loss/object/layer_-1_loss_cls: 0.4640, loss/object/layer_-1_loss_bbox: 3.3797, stats/object/matched_ious: 0.0707, loss: 6.0528, grad_norm: 11.6807
2025-04-28 03:30:24,770 - mmdet3d - INFO - Epoch [2][700/815]	lr: 1.866e-04, eta: 0:46:26, time: 0.825, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 2.1540, loss/object/layer_-1_loss_cls: 0.4443, loss/object/layer_-1_loss_bbox: 3.6781, stats/object/matched_ious: 0.0712, loss: 6.2764, grad_norm: 8.3967
2025-04-28 03:31:06,117 - mmdet3d - INFO - Epoch [2][750/815]	lr: 1.866e-04, eta: 0:45:45, time: 0.827, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 2.1564, loss/object/layer_-1_loss_cls: 0.4576, loss/object/layer_-1_loss_bbox: 3.2930, stats/object/matched_ious: 0.0763, loss: 5.9071, grad_norm: 11.2159
2025-04-28 03:31:48,041 - mmdet3d - INFO - Epoch [2][800/815]	lr: 1.866e-04, eta: 0:45:05, time: 0.838, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 2.0348, loss/object/layer_-1_loss_cls: 0.4448, loss/object/layer_-1_loss_bbox: 3.3012, stats/object/matched_ious: 0.0838, loss: 5.7808, grad_norm: 13.1172
2025-04-28 03:32:00,694 - mmdet3d - INFO - Saving checkpoint at 2 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 4s, ETA:   282s[  ] 2/81, 0.6 task/s, elapsed: 4s, ETA:   139s[  ] 3/81, 0.8 task/s, elapsed: 4s, ETA:    98s[  ] 4/81, 1.1 task/s, elapsed: 4s, ETA:    73s[  ] 5/81, 1.2 task/s, elapsed: 4s, ETA:    61s[  ] 6/81, 1.5 task/s, elapsed: 4s, ETA:    51s[  ] 7/81, 1.6 task/s, elapsed: 4s, ETA:    46s[  ] 8/81, 1.9 task/s, elapsed: 4s, ETA:    39s[  ] 9/81, 1.9 task/s, elapsed: 5s, ETA:    37s[  ] 10/81, 2.2 task/s, elapsed: 5s, ETA:    33s[  ] 11/81, 2.1 task/s, elapsed: 5s, ETA:    33s[  ] 12/81, 2.3 task/s, elapsed: 5s, ETA:    30s[  ] 13/81, 2.4 task/s, elapsed: 5s, ETA:    28s[  ] 14/81, 2.6 task/s, elapsed: 5s, ETA:    26s[  ] 15/81, 2.6 task/s, elapsed: 6s, ETA:    25s[  ] 16/81, 2.8 task/s, elapsed: 6s, ETA:    23s[  ] 17/81, 2.8 task/s, elapsed: 6s, ETA:    23s[  ] 18/81, 3.0 task/s, elapsed: 6s, ETA:    21s[  ] 19/81, 2.8 task/s, elapsed: 7s, ETA:    22s[  ] 20/81, 3.0 task/s, elapsed: 7s, ETA:    21s[  ] 21/81, 3.0 task/s, elapsed: 7s, ETA:    20s[  ] 22/81, 3.1 task/s, elapsed: 7s, ETA:    19s[  ] 23/81, 3.1 task/s, elapsed: 7s, ETA:    18s[  ] 24/81, 3.3 task/s, elapsed: 7s, ETA:    17s[  ] 25/81, 3.3 task/s, elapsed: 8s, ETA:    17s[  ] 26/81, 3.4 task/s, elapsed: 8s, ETA:    16s[  ] 27/81, 3.2 task/s, elapsed: 8s, ETA:    17s[  ] 28/81, 3.3 task/s, elapsed: 8s, ETA:    16s[  ] 29/81, 3.4 task/s, elapsed: 9s, ETA:    16s[  ] 30/81, 3.5 task/s, elapsed: 9s, ETA:    15s[  ] 31/81, 3.5 task/s, elapsed: 9s, ETA:    14s[  ] 32/81, 3.6 task/s, elapsed: 9s, ETA:    14s[  ] 33/81, 3.6 task/s, elapsed: 9s, ETA:    13s[  ] 34/81, 3.7 task/s, elapsed: 9s, ETA:    13s[  ] 35/81, 3.5 task/s, elapsed: 10s, ETA:    13s[  ] 36/81, 3.6 task/s, elapsed: 10s, ETA:    12s[  ] 37/81, 3.6 task/s, elapsed: 10s, ETA:    12s[  ] 38/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 39/81, 3.7 task/s, elapsed: 11s, ETA:    11s[  ] 40/81, 3.8 task/s, elapsed: 11s, ETA:    11s[> ] 41/81, 3.8 task/s, elapsed: 11s, ETA:    11s[> ] 42/81, 3.9 task/s, elapsed: 11s, ETA:    10s[> ] 43/81, 3.7 task/s, elapsed: 12s, ETA:    10s[> ] 44/81, 3.8 task/s, elapsed: 12s, ETA:    10s[> ] 45/81, 3.8 task/s, elapsed: 12s, ETA:     9s[> ] 46/81, 3.9 task/s, elapsed: 12s, ETA:     9s[> ] 47/81, 3.9 task/s, elapsed: 12s, ETA:     9s[> ] 48/81, 3.9 task/s, elapsed: 12s, ETA:     8s[> ] 49/81, 3.9 task/s, elapsed: 12s, ETA:     8s[> ] 50/81, 4.0 task/s, elapsed: 12s, ETA:     8s[> ] 51/81, 3.9 task/s, elapsed: 13s, ETA:     8s[> ] 52/81, 3.9 task/s, elapsed: 13s, ETA:     7s[> ] 53/81, 3.9 task/s, elapsed: 13s, ETA:     7s[> ] 54/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 55/81, 4.0 task/s, elapsed: 14s, ETA:     6s[> ] 56/81, 4.1 task/s, elapsed: 14s, ETA:     6s[> ] 57/81, 4.1 task/s, elapsed: 14s, ETA:     6s[> ] 58/81, 4.1 task/s, elapsed: 14s, ETA:     6s[> ] 59/81, 4.0 task/s, elapsed: 15s, ETA:     6s[> ] 60/81, 4.1 task/s, elapsed: 15s, ETA:     5s[> ] 61/81, 4.1 task/s, elapsed: 15s, ETA:     5s[> ] 62/81, 4.1 task/s, elapsed: 15s, ETA:     5s[> ] 63/81, 4.1 task/s, elapsed: 15s, ETA:     4s[> ] 64/81, 4.2 task/s, elapsed: 15s, ETA:     4s[> ] 65/81, 4.2 task/s, elapsed: 16s, ETA:     4s[> ] 66/81, 4.2 task/s, elapsed: 16s, ETA:     4s[> ] 67/81, 4.2 task/s, elapsed: 16s, ETA:     3s[> ] 68/81, 4.2 task/s, elapsed: 16s, ETA:     3s[> ] 69/81, 4.2 task/s, elapsed: 16s, ETA:     3s[> ] 70/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 71/81, 4.3 task/s, elapsed: 17s, ETA:     2s[> ] 72/81, 4.3 task/s, elapsed: 17s, ETA:     2s[> ] 73/81, 4.3 task/s, elapsed: 17s, ETA:     2s[> ] 74/81, 4.4 task/s, elapsed: 17s, ETA:     2s[> ] 75/81, 4.4 task/s, elapsed: 17s, ETA:     1s[> ] 76/81, 4.4 task/s, elapsed: 17s, ETA:     1s[> ] 77/81, 4.3 task/s, elapsed: 18s, ETA:     1s[> ] 78/81, 4.3 task/s, elapsed: 18s, ETA:     1s[> ] 79/81, 4.3 task/s, elapsed: 18s, ETA:     0s[> ] 80/81, 4.4 task/s, elapsed: 18s, ETA:     0s[>>] 81/81, 4.4 task/s, elapsed: 18s, ETA:     0s[>>] 82/81, 4.4 task/s, elapsed: 18s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 32.8 task/s, elapsed: 0s, ETA:     2s[  ] 2/81, 32.6 task/s, elapsed: 0s, ETA:     2s[  ] 3/81, 31.8 task/s, elapsed: 0s, ETA:     2s[  ] 4/81, 32.5 task/s, elapsed: 0s, ETA:     2s[  ] 5/81, 32.7 task/s, elapsed: 0s, ETA:     2s[  ] 6/81, 32.9 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 33.0 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 32.9 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 32.9 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 33.0 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 33.0 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 33.1 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 33.1 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 32.8 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 32.7 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 32.8 task/s, elapsed: 0s, ETA:     2s[  ] 17/81, 32.9 task/s, elapsed: 1s, ETA:     2s[  ] 18/81, 32.9 task/s, elapsed: 1s, ETA:     2s[  ] 19/81, 32.9 task/s, elapsed: 1s, ETA:     2s[  ] 20/81, 32.8 task/s, elapsed: 1s, ETA:     2s[  ] 21/81, 32.8 task/s, elapsed: 1s, ETA:     2s[  ] 22/81, 32.9 task/s, elapsed: 1s, ETA:     2s[  ] 23/81, 32.9 task/s, elapsed: 1s, ETA:     2s[  ] 24/81, 33.0 task/s, elapsed: 1s, ETA:     2s[  ] 25/81, 33.1 task/s, elapsed: 1s, ETA:     2s[  ] 26/81, 33.2 task/s, elapsed: 1s, ETA:     2s[  ] 27/81, 33.3 task/s, elapsed: 1s, ETA:     2s[  ] 28/81, 33.4 task/s, elapsed: 1s, ETA:     2s[  ] 29/81, 33.5 task/s, elapsed: 1s, ETA:     2s[  ] 30/81, 33.5 task/s, elapsed: 1s, ETA:     2s[  ] 31/81, 33.5 task/s, elapsed: 1s, ETA:     1s[  ] 32/81, 33.5 task/s, elapsed: 1s, ETA:     1s[  ] 33/81, 33.5 task/s, elapsed: 1s, ETA:     1s[  ] 34/81, 33.4 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 33.4 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 33.4 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 33.4 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 33.4 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 33.4 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 33.3 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 33.3 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 33.3 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 33.3 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 33.3 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 33.3 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 33.3 task/s, elapsed: 1s, ETA:     1s[> ] 47/81, 33.3 task/s, elapsed: 1s, ETA:     1s[> ] 48/81, 33.2 task/s, elapsed: 1s, ETA:     1s[> ] 49/81, 33.2 task/s, elapsed: 1s, ETA:     1s[> ] 50/81, 33.1 task/s, elapsed: 2s, ETA:     1s[> ] 51/81, 33.1 task/s, elapsed: 2s, ETA:     1s[> ] 52/81, 33.1 task/s, elapsed: 2s, ETA:     1s[> ] 53/81, 33.1 task/s, elapsed: 2s, ETA:     1s[> ] 54/81, 33.1 task/s, elapsed: 2s, ETA:     1s[> ] 55/81, 33.1 task/s, elapsed: 2s, ETA:     1s[> ] 56/81, 33.1 task/s, elapsed: 2s, ETA:     1s[> ] 57/81, 33.1 task/s, elapsed: 2s, ETA:     1s[> ] 58/81, 33.1 task/s, elapsed: 2s, ETA:     1s[> ] 59/81, 33.1 task/s, elapsed: 2s, ETA:     1s[> ] 60/81, 33.1 task/s, elapsed: 2s, ETA:     1s[> ] 61/81, 33.1 task/s, elapsed: 2s, ETA:     1s[> ] 62/81, 33.2 task/s, elapsed: 2s, ETA:     1s[> ] 63/81, 33.2 task/s, elapsed: 2s, ETA:     1s[> ] 64/81, 33.2 task/s, elapsed: 2s, ETA:     1s[> ] 65/81, 33.2 task/s, elapsed: 2s, ETA:     0s[> ] 66/81, 33.2 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 33.2 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 33.3 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 33.3 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 33.3 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 33.3 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 33.2 task/s, elapsed: 2s, ETA:     0s[> ] 73/81, 33.2 task/s, elapsed: 2s, ETA:     0s[> ] 74/81, 33.2 task/s, elapsed: 2s, ETA:     0s[> ] 75/81, 33.1 task/s, elapsed: 2s, ETA:     0s[> ] 76/81, 33.0 task/s, elapsed: 2s, ETA:     0s[> ] 77/81, 32.8 task/s, elapsed: 2s, ETA:     0s[> ] 78/81, 32.2 task/s, elapsed: 2s, ETA:     0s[> ] 79/81, 32.2 task/s, elapsed: 2s, ETA:     0s[> ] 80/81, 32.3 task/s, elapsed: 2s, ETA:     0s[>>] 81/81, 32.3 task/s, elapsed: 3s, ETA:     0s
Results writes to /tmp/tmpmc4jyd2g/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7faae14c5fa0>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 52% 42/81 [00:00<00:00, 417.00it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0184
mATE: 1.0168
mASE: 0.9259
mAOE: 1.0790
mAVE: 0.8891
mAAE: 0.8555
NDS: 0.0422
Eval time: 3.3s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.123 	1.122 	0.481 	1.357 	0.409 	0.107 
truck               	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bus                 	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.061 	1.046 	0.778 	1.354 	0.703 	0.737 
motorcycle          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.000 	1.000 	1.000 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-28 03:32:34,800 - mmdet3d - INFO - Epoch(val) [2][41]	object/car_ap_dist_0.5: 0.0000, object/car_ap_dist_1.0: 0.0079, object/car_ap_dist_2.0: 0.1992, object/car_ap_dist_4.0: 0.2868, object/car_trans_err: 1.1224, object/car_scale_err: 0.4809, object/car_orient_err: 1.3572, object/car_vel_err: 0.4093, object/car_attr_err: 0.1067, object/mATE: 1.0168, object/mASE: 0.9259, object/mAOE: 1.0790, object/mAVE: 0.8891, object/mAAE: 0.8555, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0000, object/truck_ap_dist_2.0: 0.0000, object/truck_ap_dist_4.0: 0.0000, object/truck_trans_err: 1.0000, object/truck_scale_err: 1.0000, object/truck_orient_err: 1.0000, object/truck_vel_err: 1.0000, object/truck_attr_err: 1.0000, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0000, object/bus_ap_dist_4.0: 0.0000, object/bus_trans_err: 1.0000, object/bus_scale_err: 1.0000, object/bus_orient_err: 1.0000, object/bus_vel_err: 1.0000, object/bus_attr_err: 1.0000, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 1.0000, object/motorcycle_scale_err: 1.0000, object/motorcycle_orient_err: 1.0000, object/motorcycle_vel_err: 1.0000, object/motorcycle_attr_err: 1.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0000, object/pedestrian_ap_dist_1.0: 0.0053, object/pedestrian_ap_dist_2.0: 0.0722, object/pedestrian_ap_dist_4.0: 0.1648, object/pedestrian_trans_err: 1.0456, object/pedestrian_scale_err: 0.7780, object/pedestrian_orient_err: 1.3537, object/pedestrian_vel_err: 0.7033, object/pedestrian_attr_err: 0.7374, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0000, object/traffic_cone_ap_dist_2.0: 0.0000, object/traffic_cone_ap_dist_4.0: 0.0000, object/traffic_cone_trans_err: 1.0000, object/traffic_cone_scale_err: 1.0000, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.0422, object/map: 0.0184
2025-04-28 03:33:18,504 - mmdet3d - INFO - Epoch [3][50/815]	lr: 1.501e-04, eta: 0:43:52, time: 0.873, data_time: 0.067, memory: 13395, loss/object/loss_heatmap: 1.9876, loss/object/layer_-1_loss_cls: 0.4465, loss/object/layer_-1_loss_bbox: 2.8078, stats/object/matched_ious: 0.0829, loss: 5.2419, grad_norm: 8.9303
2025-04-28 03:33:59,618 - mmdet3d - INFO - Epoch [3][100/815]	lr: 1.501e-04, eta: 0:43:11, time: 0.822, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 1.9924, loss/object/layer_-1_loss_cls: 0.4354, loss/object/layer_-1_loss_bbox: 2.9783, stats/object/matched_ious: 0.0867, loss: 5.4061, grad_norm: 10.1349
2025-04-28 03:34:40,634 - mmdet3d - INFO - Epoch [3][150/815]	lr: 1.501e-04, eta: 0:42:30, time: 0.820, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 1.9963, loss/object/layer_-1_loss_cls: 0.4382, loss/object/layer_-1_loss_bbox: 2.9480, stats/object/matched_ious: 0.0867, loss: 5.3825, grad_norm: 10.5977
2025-04-28 03:35:21,796 - mmdet3d - INFO - Epoch [3][200/815]	lr: 1.501e-04, eta: 0:41:49, time: 0.823, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 1.9528, loss/object/layer_-1_loss_cls: 0.4223, loss/object/layer_-1_loss_bbox: 3.0766, stats/object/matched_ious: 0.0841, loss: 5.4518, grad_norm: 9.7656
2025-04-28 03:36:02,953 - mmdet3d - INFO - Epoch [3][250/815]	lr: 1.501e-04, eta: 0:41:09, time: 0.823, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 1.9036, loss/object/layer_-1_loss_cls: 0.4275, loss/object/layer_-1_loss_bbox: 2.9456, stats/object/matched_ious: 0.0911, loss: 5.2767, grad_norm: 8.2672
2025-04-28 03:36:44,579 - mmdet3d - INFO - Epoch [3][300/815]	lr: 1.501e-04, eta: 0:40:29, time: 0.833, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 1.8562, loss/object/layer_-1_loss_cls: 0.4082, loss/object/layer_-1_loss_bbox: 2.5442, stats/object/matched_ious: 0.1102, loss: 4.8086, grad_norm: 8.0912
2025-04-28 03:37:26,096 - mmdet3d - INFO - Epoch [3][350/815]	lr: 1.501e-04, eta: 0:39:48, time: 0.830, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 1.8276, loss/object/layer_-1_loss_cls: 0.4091, loss/object/layer_-1_loss_bbox: 2.7761, stats/object/matched_ious: 0.1039, loss: 5.0128, grad_norm: 8.1810
2025-04-28 03:38:07,432 - mmdet3d - INFO - Epoch [3][400/815]	lr: 1.501e-04, eta: 0:39:08, time: 0.827, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 1.8744, loss/object/layer_-1_loss_cls: 0.4171, loss/object/layer_-1_loss_bbox: 2.7469, stats/object/matched_ious: 0.1113, loss: 5.0384, grad_norm: 8.7839
2025-04-28 03:38:48,795 - mmdet3d - INFO - Epoch [3][450/815]	lr: 1.501e-04, eta: 0:38:27, time: 0.827, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 1.8403, loss/object/layer_-1_loss_cls: 0.4031, loss/object/layer_-1_loss_bbox: 2.5295, stats/object/matched_ious: 0.1118, loss: 4.7729, grad_norm: 8.0472
2025-04-28 03:39:30,437 - mmdet3d - INFO - Epoch [3][500/815]	lr: 1.501e-04, eta: 0:37:47, time: 0.833, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 1.7994, loss/object/layer_-1_loss_cls: 0.3892, loss/object/layer_-1_loss_bbox: 2.6407, stats/object/matched_ious: 0.1142, loss: 4.8293, grad_norm: 8.3734
2025-04-28 03:40:11,778 - mmdet3d - INFO - Epoch [3][550/815]	lr: 1.501e-04, eta: 0:37:06, time: 0.827, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 1.8715, loss/object/layer_-1_loss_cls: 0.3896, loss/object/layer_-1_loss_bbox: 2.8547, stats/object/matched_ious: 0.1075, loss: 5.1157, grad_norm: 8.8715
2025-04-28 03:40:53,227 - mmdet3d - INFO - Epoch [3][600/815]	lr: 1.501e-04, eta: 0:36:25, time: 0.829, data_time: 0.010, memory: 13395, loss/object/loss_heatmap: 1.7682, loss/object/layer_-1_loss_cls: 0.3818, loss/object/layer_-1_loss_bbox: 2.5694, stats/object/matched_ious: 0.1189, loss: 4.7194, grad_norm: 8.4838
2025-04-28 03:41:34,886 - mmdet3d - INFO - Epoch [3][650/815]	lr: 1.501e-04, eta: 0:35:45, time: 0.833, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.8032, loss/object/layer_-1_loss_cls: 0.3827, loss/object/layer_-1_loss_bbox: 2.5925, stats/object/matched_ious: 0.1192, loss: 4.7784, grad_norm: 8.1730
2025-04-28 03:42:16,181 - mmdet3d - INFO - Epoch [3][700/815]	lr: 1.501e-04, eta: 0:35:04, time: 0.826, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.7517, loss/object/layer_-1_loss_cls: 0.3816, loss/object/layer_-1_loss_bbox: 2.5744, stats/object/matched_ious: 0.1232, loss: 4.7077, grad_norm: 8.0617
2025-04-28 03:42:57,673 - mmdet3d - INFO - Epoch [3][750/815]	lr: 1.501e-04, eta: 0:34:23, time: 0.830, data_time: 0.011, memory: 13397, loss/object/loss_heatmap: 1.8023, loss/object/layer_-1_loss_cls: 0.3662, loss/object/layer_-1_loss_bbox: 2.6999, stats/object/matched_ious: 0.1210, loss: 4.8684, grad_norm: 8.8645
2025-04-28 03:43:39,171 - mmdet3d - INFO - Epoch [3][800/815]	lr: 1.501e-04, eta: 0:33:43, time: 0.830, data_time: 0.011, memory: 13397, loss/object/loss_heatmap: 1.7666, loss/object/layer_-1_loss_cls: 0.3686, loss/object/layer_-1_loss_bbox: 2.5339, stats/object/matched_ious: 0.1331, loss: 4.6691, grad_norm: 8.1348
2025-04-28 03:43:51,496 - mmdet3d - INFO - Saving checkpoint at 3 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 3s, ETA:   260s[  ] 2/81, 0.6 task/s, elapsed: 3s, ETA:   128s[  ] 3/81, 0.9 task/s, elapsed: 4s, ETA:    91s[  ] 4/81, 1.1 task/s, elapsed: 4s, ETA:    67s[  ] 5/81, 1.3 task/s, elapsed: 4s, ETA:    57s[  ] 6/81, 1.6 task/s, elapsed: 4s, ETA:    47s[  ] 7/81, 1.7 task/s, elapsed: 4s, ETA:    43s[  ] 8/81, 2.0 task/s, elapsed: 4s, ETA:    37s[  ] 9/81, 1.9 task/s, elapsed: 5s, ETA:    38s[  ] 10/81, 2.1 task/s, elapsed: 5s, ETA:    34s[  ] 11/81, 2.2 task/s, elapsed: 5s, ETA:    32s[  ] 12/81, 2.4 task/s, elapsed: 5s, ETA:    29s[  ] 13/81, 2.4 task/s, elapsed: 5s, ETA:    28s[  ] 14/81, 2.6 task/s, elapsed: 5s, ETA:    26s[  ] 15/81, 2.7 task/s, elapsed: 6s, ETA:    25s[  ] 16/81, 2.8 task/s, elapsed: 6s, ETA:    23s[  ] 17/81, 2.7 task/s, elapsed: 6s, ETA:    24s[  ] 18/81, 2.8 task/s, elapsed: 6s, ETA:    22s[  ] 19/81, 2.8 task/s, elapsed: 7s, ETA:    22s[  ] 20/81, 3.0 task/s, elapsed: 7s, ETA:    20s[  ] 21/81, 3.0 task/s, elapsed: 7s, ETA:    20s[  ] 22/81, 3.2 task/s, elapsed: 7s, ETA:    19s[  ] 23/81, 3.2 task/s, elapsed: 7s, ETA:    18s[  ] 24/81, 3.3 task/s, elapsed: 7s, ETA:    17s[  ] 25/81, 3.1 task/s, elapsed: 8s, ETA:    18s[  ] 26/81, 3.3 task/s, elapsed: 8s, ETA:    17s[  ] 27/81, 3.3 task/s, elapsed: 8s, ETA:    17s[  ] 28/81, 3.4 task/s, elapsed: 8s, ETA:    16s[  ] 29/81, 3.4 task/s, elapsed: 9s, ETA:    15s[  ] 30/81, 3.5 task/s, elapsed: 9s, ETA:    15s[  ] 31/81, 3.5 task/s, elapsed: 9s, ETA:    14s[  ] 32/81, 3.6 task/s, elapsed: 9s, ETA:    14s[  ] 33/81, 3.4 task/s, elapsed: 10s, ETA:    14s[  ] 34/81, 3.5 task/s, elapsed: 10s, ETA:    13s[  ] 35/81, 3.5 task/s, elapsed: 10s, ETA:    13s[  ] 36/81, 3.6 task/s, elapsed: 10s, ETA:    12s[  ] 37/81, 3.6 task/s, elapsed: 10s, ETA:    12s[  ] 38/81, 3.7 task/s, elapsed: 10s, ETA:    11s[  ] 39/81, 3.7 task/s, elapsed: 10s, ETA:    11s[  ] 40/81, 3.8 task/s, elapsed: 10s, ETA:    11s[> ] 41/81, 3.7 task/s, elapsed: 11s, ETA:    11s[> ] 42/81, 3.8 task/s, elapsed: 11s, ETA:    10s[> ] 43/81, 3.7 task/s, elapsed: 11s, ETA:    10s[> ] 44/81, 3.8 task/s, elapsed: 11s, ETA:    10s[> ] 45/81, 3.8 task/s, elapsed: 12s, ETA:     9s[> ] 46/81, 3.9 task/s, elapsed: 12s, ETA:     9s[> ] 47/81, 3.9 task/s, elapsed: 12s, ETA:     9s[> ] 48/81, 4.0 task/s, elapsed: 12s, ETA:     8s[> ] 49/81, 3.8 task/s, elapsed: 13s, ETA:     8s[> ] 50/81, 3.9 task/s, elapsed: 13s, ETA:     8s[> ] 51/81, 3.9 task/s, elapsed: 13s, ETA:     8s[> ] 52/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 53/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 54/81, 4.1 task/s, elapsed: 13s, ETA:     7s[> ] 55/81, 4.0 task/s, elapsed: 14s, ETA:     6s[> ] 56/81, 4.1 task/s, elapsed: 14s, ETA:     6s[> ] 57/81, 4.0 task/s, elapsed: 14s, ETA:     6s[> ] 58/81, 4.0 task/s, elapsed: 14s, ETA:     6s[> ] 59/81, 4.0 task/s, elapsed: 15s, ETA:     5s[> ] 60/81, 4.1 task/s, elapsed: 15s, ETA:     5s[> ] 61/81, 4.1 task/s, elapsed: 15s, ETA:     5s[> ] 62/81, 4.2 task/s, elapsed: 15s, ETA:     5s[> ] 63/81, 4.2 task/s, elapsed: 15s, ETA:     4s[> ] 64/81, 4.2 task/s, elapsed: 15s, ETA:     4s[> ] 65/81, 4.2 task/s, elapsed: 15s, ETA:     4s[> ] 66/81, 4.3 task/s, elapsed: 15s, ETA:     4s[> ] 67/81, 4.2 task/s, elapsed: 16s, ETA:     3s[> ] 68/81, 4.2 task/s, elapsed: 16s, ETA:     3s[> ] 69/81, 4.2 task/s, elapsed: 16s, ETA:     3s[> ] 70/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 71/81, 4.3 task/s, elapsed: 17s, ETA:     2s[> ] 72/81, 4.4 task/s, elapsed: 17s, ETA:     2s[> ] 73/81, 4.3 task/s, elapsed: 17s, ETA:     2s[> ] 74/81, 4.4 task/s, elapsed: 17s, ETA:     2s[> ] 75/81, 4.4 task/s, elapsed: 17s, ETA:     1s[> ] 76/81, 4.4 task/s, elapsed: 17s, ETA:     1s[> ] 77/81, 4.4 task/s, elapsed: 18s, ETA:     1s[> ] 78/81, 4.4 task/s, elapsed: 18s, ETA:     1s[> ] 79/81, 4.4 task/s, elapsed: 18s, ETA:     0s[> ] 80/81, 4.5 task/s, elapsed: 18s, ETA:     0s[>>] 81/81, 4.5 task/s, elapsed: 18s, ETA:     0s[>>] 82/81, 4.5 task/s, elapsed: 18s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 30.0 task/s, elapsed: 0s, ETA:     3s[  ] 2/81, 31.9 task/s, elapsed: 0s, ETA:     2s[  ] 3/81, 32.0 task/s, elapsed: 0s, ETA:     2s[  ] 4/81, 32.7 task/s, elapsed: 0s, ETA:     2s[  ] 5/81, 33.2 task/s, elapsed: 0s, ETA:     2s[  ] 6/81, 33.5 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 33.6 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 33.8 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 33.8 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 33.9 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 34.0 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 34.1 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 34.2 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 34.2 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 34.2 task/s, elapsed: 0s, ETA:     2s[  ] 17/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 18/81, 34.3 task/s, elapsed: 1s, ETA:     2s[  ] 19/81, 34.4 task/s, elapsed: 1s, ETA:     2s[  ] 20/81, 34.4 task/s, elapsed: 1s, ETA:     2s[  ] 21/81, 34.4 task/s, elapsed: 1s, ETA:     2s[  ] 22/81, 34.5 task/s, elapsed: 1s, ETA:     2s[  ] 23/81, 34.5 task/s, elapsed: 1s, ETA:     2s[  ] 24/81, 34.6 task/s, elapsed: 1s, ETA:     2s[  ] 25/81, 34.6 task/s, elapsed: 1s, ETA:     2s[  ] 26/81, 34.6 task/s, elapsed: 1s, ETA:     2s[  ] 27/81, 34.7 task/s, elapsed: 1s, ETA:     2s[  ] 28/81, 34.7 task/s, elapsed: 1s, ETA:     2s[  ] 29/81, 34.7 task/s, elapsed: 1s, ETA:     1s[  ] 30/81, 34.7 task/s, elapsed: 1s, ETA:     1s[  ] 31/81, 34.7 task/s, elapsed: 1s, ETA:     1s[  ] 32/81, 34.7 task/s, elapsed: 1s, ETA:     1s[  ] 33/81, 34.6 task/s, elapsed: 1s, ETA:     1s[  ] 34/81, 34.6 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 34.6 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 34.5 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 34.5 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 34.5 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 34.5 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 34.5 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 34.4 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 34.4 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 34.5 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 34.5 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 34.4 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 34.4 task/s, elapsed: 1s, ETA:     1s[> ] 47/81, 34.5 task/s, elapsed: 1s, ETA:     1s[> ] 48/81, 34.4 task/s, elapsed: 1s, ETA:     1s[> ] 49/81, 34.4 task/s, elapsed: 1s, ETA:     1s[> ] 50/81, 34.4 task/s, elapsed: 1s, ETA:     1s[> ] 51/81, 34.4 task/s, elapsed: 1s, ETA:     1s[> ] 52/81, 34.4 task/s, elapsed: 2s, ETA:     1s[> ] 53/81, 34.4 task/s, elapsed: 2s, ETA:     1s[> ] 54/81, 34.4 task/s, elapsed: 2s, ETA:     1s[> ] 55/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 56/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 57/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 58/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 59/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 60/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 61/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 62/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 63/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 64/81, 34.2 task/s, elapsed: 2s, ETA:     0s[> ] 65/81, 34.2 task/s, elapsed: 2s, ETA:     0s[> ] 66/81, 34.2 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 34.2 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 34.3 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 31.1 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 31.1 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 31.0 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 30.9 task/s, elapsed: 2s, ETA:     0s[> ] 73/81, 30.7 task/s, elapsed: 2s, ETA:     0s[> ] 74/81, 30.4 task/s, elapsed: 2s, ETA:     0s[> ] 75/81, 30.5 task/s, elapsed: 2s, ETA:     0s[> ] 76/81, 30.5 task/s, elapsed: 2s, ETA:     0s[> ] 77/81, 30.6 task/s, elapsed: 3s, ETA:     0s[> ] 78/81, 30.6 task/s, elapsed: 3s, ETA:     0s[> ] 79/81, 30.7 task/s, elapsed: 3s, ETA:     0s[> ] 80/81, 30.7 task/s, elapsed: 3s, ETA:     0s[>>] 81/81, 30.8 task/s, elapsed: 3s, ETA:     0s
Results writes to /tmp/tmpuwuui4r5/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7faae3a3be80>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 54% 44/81 [00:00<00:00, 432.44it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0354
mATE: 1.0019
mASE: 0.8495
mAOE: 1.1069
mAVE: 0.8663
mAAE: 0.8616
NDS: 0.0600
Eval time: 2.1s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.141 	0.786 	0.249 	1.394 	0.322 	0.181 
truck               	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bus                 	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.213 	0.639 	0.402 	1.568 	0.609 	0.711 
motorcycle          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.000 	1.594 	0.845 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-28 03:44:23,903 - mmdet3d - INFO - Epoch(val) [3][41]	object/car_ap_dist_0.5: 0.0000, object/car_ap_dist_1.0: 0.0774, object/car_ap_dist_2.0: 0.2181, object/car_ap_dist_4.0: 0.2674, object/car_trans_err: 0.7859, object/car_scale_err: 0.2487, object/car_orient_err: 1.3935, object/car_vel_err: 0.3219, object/car_attr_err: 0.1813, object/mATE: 1.0019, object/mASE: 0.8495, object/mAOE: 1.1069, object/mAVE: 0.8663, object/mAAE: 0.8616, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0000, object/truck_ap_dist_2.0: 0.0000, object/truck_ap_dist_4.0: 0.0000, object/truck_trans_err: 1.0000, object/truck_scale_err: 1.0000, object/truck_orient_err: 1.0000, object/truck_vel_err: 1.0000, object/truck_attr_err: 1.0000, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0000, object/bus_ap_dist_4.0: 0.0000, object/bus_trans_err: 1.0000, object/bus_scale_err: 1.0000, object/bus_orient_err: 1.0000, object/bus_vel_err: 1.0000, object/bus_attr_err: 1.0000, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 1.0000, object/motorcycle_scale_err: 1.0000, object/motorcycle_orient_err: 1.0000, object/motorcycle_vel_err: 1.0000, object/motorcycle_attr_err: 1.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0909, object/pedestrian_ap_dist_1.0: 0.1597, object/pedestrian_ap_dist_2.0: 0.2378, object/pedestrian_ap_dist_4.0: 0.3643, object/pedestrian_trans_err: 0.6392, object/pedestrian_scale_err: 0.4019, object/pedestrian_orient_err: 1.5681, object/pedestrian_vel_err: 0.6087, object/pedestrian_attr_err: 0.7112, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0000, object/traffic_cone_ap_dist_2.0: 0.0000, object/traffic_cone_ap_dist_4.0: 0.0000, object/traffic_cone_trans_err: 1.5943, object/traffic_cone_scale_err: 0.8448, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.0600, object/map: 0.0354
2025-04-28 03:45:07,793 - mmdet3d - INFO - Epoch [4][50/815]	lr: 1.001e-04, eta: 0:32:40, time: 0.877, data_time: 0.066, memory: 13397, loss/object/loss_heatmap: 1.6870, loss/object/layer_-1_loss_cls: 0.3525, loss/object/layer_-1_loss_bbox: 2.4890, stats/object/matched_ious: 0.1370, loss: 4.5285, grad_norm: 6.7050
2025-04-28 03:45:48,991 - mmdet3d - INFO - Epoch [4][100/815]	lr: 1.001e-04, eta: 0:31:59, time: 0.824, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.6454, loss/object/layer_-1_loss_cls: 0.3735, loss/object/layer_-1_loss_bbox: 2.4864, stats/object/matched_ious: 0.1297, loss: 4.5053, grad_norm: 8.0581
2025-04-28 03:46:29,926 - mmdet3d - INFO - Epoch [4][150/815]	lr: 1.001e-04, eta: 0:31:18, time: 0.819, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.6616, loss/object/layer_-1_loss_cls: 0.3540, loss/object/layer_-1_loss_bbox: 2.3892, stats/object/matched_ious: 0.1342, loss: 4.4047, grad_norm: 7.5911
2025-04-28 03:47:10,852 - mmdet3d - INFO - Epoch [4][200/815]	lr: 1.001e-04, eta: 0:30:37, time: 0.819, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.6659, loss/object/layer_-1_loss_cls: 0.3461, loss/object/layer_-1_loss_bbox: 2.2792, stats/object/matched_ious: 0.1406, loss: 4.2912, grad_norm: 7.5563
2025-04-28 03:47:51,893 - mmdet3d - INFO - Epoch [4][250/815]	lr: 1.001e-04, eta: 0:29:56, time: 0.821, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.6604, loss/object/layer_-1_loss_cls: 0.3503, loss/object/layer_-1_loss_bbox: 2.3637, stats/object/matched_ious: 0.1326, loss: 4.3745, grad_norm: 8.0833
2025-04-28 03:48:32,982 - mmdet3d - INFO - Epoch [4][300/815]	lr: 1.001e-04, eta: 0:29:16, time: 0.822, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.6645, loss/object/layer_-1_loss_cls: 0.3639, loss/object/layer_-1_loss_bbox: 2.3380, stats/object/matched_ious: 0.1478, loss: 4.3664, grad_norm: 7.9213
2025-04-28 03:49:14,444 - mmdet3d - INFO - Epoch [4][350/815]	lr: 1.001e-04, eta: 0:28:35, time: 0.829, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.5971, loss/object/layer_-1_loss_cls: 0.3437, loss/object/layer_-1_loss_bbox: 2.2805, stats/object/matched_ious: 0.1424, loss: 4.2213, grad_norm: 8.1210
2025-04-28 03:49:55,883 - mmdet3d - INFO - Epoch [4][400/815]	lr: 1.001e-04, eta: 0:27:55, time: 0.829, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.6425, loss/object/layer_-1_loss_cls: 0.3606, loss/object/layer_-1_loss_bbox: 2.3020, stats/object/matched_ious: 0.1541, loss: 4.3052, grad_norm: 8.0571
2025-04-28 03:50:37,280 - mmdet3d - INFO - Epoch [4][450/815]	lr: 1.001e-04, eta: 0:27:14, time: 0.828, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.5864, loss/object/layer_-1_loss_cls: 0.3421, loss/object/layer_-1_loss_bbox: 2.3100, stats/object/matched_ious: 0.1490, loss: 4.2384, grad_norm: 7.2699
2025-04-28 03:51:18,873 - mmdet3d - INFO - Epoch [4][500/815]	lr: 1.001e-04, eta: 0:26:33, time: 0.832, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.6583, loss/object/layer_-1_loss_cls: 0.3406, loss/object/layer_-1_loss_bbox: 2.3658, stats/object/matched_ious: 0.1424, loss: 4.3646, grad_norm: 8.4479
2025-04-28 03:52:00,382 - mmdet3d - INFO - Epoch [4][550/815]	lr: 1.001e-04, eta: 0:25:53, time: 0.830, data_time: 0.011, memory: 13397, loss/object/loss_heatmap: 1.5421, loss/object/layer_-1_loss_cls: 0.3204, loss/object/layer_-1_loss_bbox: 2.4515, stats/object/matched_ious: 0.1369, loss: 4.3141, grad_norm: 6.9009
2025-04-28 03:52:41,740 - mmdet3d - INFO - Epoch [4][600/815]	lr: 1.001e-04, eta: 0:25:12, time: 0.827, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.5784, loss/object/layer_-1_loss_cls: 0.3328, loss/object/layer_-1_loss_bbox: 2.2937, stats/object/matched_ious: 0.1497, loss: 4.2049, grad_norm: 7.6760
2025-04-28 03:53:23,106 - mmdet3d - INFO - Epoch [4][650/815]	lr: 1.001e-04, eta: 0:24:31, time: 0.827, data_time: 0.011, memory: 13397, loss/object/loss_heatmap: 1.5459, loss/object/layer_-1_loss_cls: 0.3354, loss/object/layer_-1_loss_bbox: 2.5054, stats/object/matched_ious: 0.1406, loss: 4.3866, grad_norm: 8.0815
2025-04-28 03:54:05,743 - mmdet3d - INFO - Epoch [4][700/815]	lr: 1.001e-04, eta: 0:23:51, time: 0.853, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.5377, loss/object/layer_-1_loss_cls: 0.3258, loss/object/layer_-1_loss_bbox: 2.4338, stats/object/matched_ious: 0.1541, loss: 4.2973, grad_norm: 7.6325
2025-04-28 03:54:47,163 - mmdet3d - INFO - Epoch [4][750/815]	lr: 1.001e-04, eta: 0:23:10, time: 0.828, data_time: 0.011, memory: 13397, loss/object/loss_heatmap: 1.6022, loss/object/layer_-1_loss_cls: 0.3258, loss/object/layer_-1_loss_bbox: 2.4228, stats/object/matched_ious: 0.1397, loss: 4.3509, grad_norm: 7.7335
2025-04-28 03:55:28,474 - mmdet3d - INFO - Epoch [4][800/815]	lr: 1.001e-04, eta: 0:22:29, time: 0.826, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.5790, loss/object/layer_-1_loss_cls: 0.3266, loss/object/layer_-1_loss_bbox: 2.2923, stats/object/matched_ious: 0.1544, loss: 4.1979, grad_norm: 8.2288
2025-04-28 03:55:40,683 - mmdet3d - INFO - Saving checkpoint at 4 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 3s, ETA:   257s[  ] 2/81, 0.6 task/s, elapsed: 3s, ETA:   127s[  ] 3/81, 0.9 task/s, elapsed: 3s, ETA:    90s[  ] 4/81, 1.2 task/s, elapsed: 3s, ETA:    67s[  ] 5/81, 1.3 task/s, elapsed: 4s, ETA:    57s[  ] 6/81, 1.6 task/s, elapsed: 4s, ETA:    47s[  ] 7/81, 1.8 task/s, elapsed: 4s, ETA:    42s[  ] 8/81, 2.0 task/s, elapsed: 4s, ETA:    36s[  ] 9/81, 2.0 task/s, elapsed: 5s, ETA:    37s[  ] 10/81, 2.2 task/s, elapsed: 5s, ETA:    32s[  ] 11/81, 2.3 task/s, elapsed: 5s, ETA:    31s[  ] 12/81, 2.5 task/s, elapsed: 5s, ETA:    28s[  ] 13/81, 2.5 task/s, elapsed: 5s, ETA:    27s[  ] 14/81, 2.7 task/s, elapsed: 5s, ETA:    25s[  ] 15/81, 2.8 task/s, elapsed: 5s, ETA:    24s[  ] 16/81, 3.0 task/s, elapsed: 5s, ETA:    22s[  ] 17/81, 2.8 task/s, elapsed: 6s, ETA:    23s[  ] 18/81, 2.9 task/s, elapsed: 6s, ETA:    22s[  ] 19/81, 2.9 task/s, elapsed: 6s, ETA:    21s[  ] 20/81, 3.1 task/s, elapsed: 6s, ETA:    20s[  ] 21/81, 3.1 task/s, elapsed: 7s, ETA:    19s[  ] 22/81, 3.3 task/s, elapsed: 7s, ETA:    18s[  ] 23/81, 3.3 task/s, elapsed: 7s, ETA:    18s[  ] 24/81, 3.4 task/s, elapsed: 7s, ETA:    17s[  ] 25/81, 3.2 task/s, elapsed: 8s, ETA:    17s[  ] 26/81, 3.3 task/s, elapsed: 8s, ETA:    16s[  ] 27/81, 3.4 task/s, elapsed: 8s, ETA:    16s[  ] 28/81, 3.5 task/s, elapsed: 8s, ETA:    15s[  ] 29/81, 3.5 task/s, elapsed: 8s, ETA:    15s[  ] 30/81, 3.6 task/s, elapsed: 8s, ETA:    14s[  ] 31/81, 3.6 task/s, elapsed: 9s, ETA:    14s[  ] 32/81, 3.7 task/s, elapsed: 9s, ETA:    13s[  ] 33/81, 3.5 task/s, elapsed: 9s, ETA:    14s[  ] 34/81, 3.6 task/s, elapsed: 9s, ETA:    13s[  ] 35/81, 3.6 task/s, elapsed: 10s, ETA:    13s[  ] 36/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 37/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 38/81, 3.8 task/s, elapsed: 10s, ETA:    11s[  ] 39/81, 3.8 task/s, elapsed: 10s, ETA:    11s[  ] 40/81, 3.9 task/s, elapsed: 10s, ETA:    10s[> ] 41/81, 3.7 task/s, elapsed: 11s, ETA:    11s[> ] 42/81, 3.8 task/s, elapsed: 11s, ETA:    10s[> ] 43/81, 3.8 task/s, elapsed: 11s, ETA:    10s[> ] 44/81, 3.9 task/s, elapsed: 11s, ETA:     9s[> ] 45/81, 3.9 task/s, elapsed: 12s, ETA:     9s[> ] 46/81, 4.0 task/s, elapsed: 12s, ETA:     9s[> ] 47/81, 4.0 task/s, elapsed: 12s, ETA:     9s[> ] 48/81, 4.1 task/s, elapsed: 12s, ETA:     8s[> ] 49/81, 3.9 task/s, elapsed: 13s, ETA:     8s[> ] 50/81, 4.0 task/s, elapsed: 13s, ETA:     8s[> ] 51/81, 4.0 task/s, elapsed: 13s, ETA:     8s[> ] 52/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 53/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 54/81, 4.1 task/s, elapsed: 13s, ETA:     7s[> ] 55/81, 4.1 task/s, elapsed: 13s, ETA:     6s[> ] 56/81, 4.2 task/s, elapsed: 13s, ETA:     6s[> ] 57/81, 4.0 task/s, elapsed: 14s, ETA:     6s[> ] 58/81, 4.1 task/s, elapsed: 14s, ETA:     6s[> ] 59/81, 4.1 task/s, elapsed: 15s, ETA:     5s[> ] 60/81, 4.1 task/s, elapsed: 15s, ETA:     5s[> ] 61/81, 4.1 task/s, elapsed: 15s, ETA:     5s[> ] 62/81, 4.2 task/s, elapsed: 15s, ETA:     5s[> ] 63/81, 4.2 task/s, elapsed: 15s, ETA:     4s[> ] 64/81, 4.2 task/s, elapsed: 15s, ETA:     4s[> ] 65/81, 4.2 task/s, elapsed: 15s, ETA:     4s[> ] 66/81, 4.3 task/s, elapsed: 15s, ETA:     3s[> ] 67/81, 4.2 task/s, elapsed: 16s, ETA:     3s[> ] 68/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 69/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 70/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 71/81, 4.3 task/s, elapsed: 16s, ETA:     2s[> ] 72/81, 4.4 task/s, elapsed: 16s, ETA:     2s[> ] 73/81, 4.4 task/s, elapsed: 17s, ETA:     2s[> ] 74/81, 4.4 task/s, elapsed: 17s, ETA:     2s[> ] 75/81, 4.4 task/s, elapsed: 17s, ETA:     1s[> ] 76/81, 4.5 task/s, elapsed: 17s, ETA:     1s[> ] 77/81, 4.4 task/s, elapsed: 18s, ETA:     1s[> ] 78/81, 4.4 task/s, elapsed: 18s, ETA:     1s[> ] 79/81, 4.4 task/s, elapsed: 18s, ETA:     0s[> ] 80/81, 4.5 task/s, elapsed: 18s, ETA:     0s[>>] 81/81, 4.5 task/s, elapsed: 18s, ETA:     0s[>>] 82/81, 4.5 task/s, elapsed: 18s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 34.6 task/s, elapsed: 0s, ETA:     2s[  ] 2/81, 35.0 task/s, elapsed: 0s, ETA:     2s[  ] 3/81, 35.8 task/s, elapsed: 0s, ETA:     2s[  ] 4/81, 36.1 task/s, elapsed: 0s, ETA:     2s[  ] 5/81, 36.2 task/s, elapsed: 0s, ETA:     2s[  ] 6/81, 36.3 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 36.0 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 36.1 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 36.1 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 36.1 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 36.1 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 36.2 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 36.2 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 36.1 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 36.1 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 36.0 task/s, elapsed: 0s, ETA:     2s[  ] 17/81, 36.0 task/s, elapsed: 0s, ETA:     2s[  ] 18/81, 36.0 task/s, elapsed: 0s, ETA:     2s[  ] 19/81, 36.0 task/s, elapsed: 1s, ETA:     2s[  ] 20/81, 36.0 task/s, elapsed: 1s, ETA:     2s[  ] 21/81, 36.0 task/s, elapsed: 1s, ETA:     2s[  ] 22/81, 36.0 task/s, elapsed: 1s, ETA:     2s[  ] 23/81, 36.0 task/s, elapsed: 1s, ETA:     2s[  ] 24/81, 36.0 task/s, elapsed: 1s, ETA:     2s[  ] 25/81, 36.0 task/s, elapsed: 1s, ETA:     2s[  ] 26/81, 35.9 task/s, elapsed: 1s, ETA:     2s[  ] 27/81, 35.9 task/s, elapsed: 1s, ETA:     2s[  ] 28/81, 35.9 task/s, elapsed: 1s, ETA:     1s[  ] 29/81, 35.9 task/s, elapsed: 1s, ETA:     1s[  ] 30/81, 35.8 task/s, elapsed: 1s, ETA:     1s[  ] 31/81, 35.8 task/s, elapsed: 1s, ETA:     1s[  ] 32/81, 35.7 task/s, elapsed: 1s, ETA:     1s[  ] 33/81, 35.5 task/s, elapsed: 1s, ETA:     1s[  ] 34/81, 35.4 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 35.4 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 35.3 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 35.3 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 35.3 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 35.2 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 35.2 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 35.2 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 35.2 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 35.2 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 35.2 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 35.2 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 35.2 task/s, elapsed: 1s, ETA:     1s[> ] 47/81, 35.1 task/s, elapsed: 1s, ETA:     1s[> ] 48/81, 35.1 task/s, elapsed: 1s, ETA:     1s[> ] 49/81, 35.1 task/s, elapsed: 1s, ETA:     1s[> ] 50/81, 35.0 task/s, elapsed: 1s, ETA:     1s[> ] 51/81, 35.0 task/s, elapsed: 1s, ETA:     1s[> ] 52/81, 35.0 task/s, elapsed: 1s, ETA:     1s[> ] 53/81, 35.0 task/s, elapsed: 2s, ETA:     1s[> ] 54/81, 35.0 task/s, elapsed: 2s, ETA:     1s[> ] 55/81, 35.0 task/s, elapsed: 2s, ETA:     1s[> ] 56/81, 34.9 task/s, elapsed: 2s, ETA:     1s[> ] 57/81, 34.9 task/s, elapsed: 2s, ETA:     1s[> ] 58/81, 34.9 task/s, elapsed: 2s, ETA:     1s[> ] 59/81, 34.9 task/s, elapsed: 2s, ETA:     1s[> ] 60/81, 34.9 task/s, elapsed: 2s, ETA:     1s[> ] 61/81, 34.9 task/s, elapsed: 2s, ETA:     1s[> ] 62/81, 34.9 task/s, elapsed: 2s, ETA:     1s[> ] 63/81, 34.9 task/s, elapsed: 2s, ETA:     1s[> ] 64/81, 34.9 task/s, elapsed: 2s, ETA:     0s[> ] 65/81, 34.9 task/s, elapsed: 2s, ETA:     0s[> ] 66/81, 34.9 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 34.9 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 34.9 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 34.9 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 34.9 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 34.9 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 34.9 task/s, elapsed: 2s, ETA:     0s[> ] 73/81, 34.9 task/s, elapsed: 2s, ETA:     0s[> ] 74/81, 34.9 task/s, elapsed: 2s, ETA:     0s[> ] 75/81, 34.8 task/s, elapsed: 2s, ETA:     0s[> ] 76/81, 30.9 task/s, elapsed: 2s, ETA:     0s[> ] 77/81, 31.0 task/s, elapsed: 2s, ETA:     0s[> ] 78/81, 31.0 task/s, elapsed: 3s, ETA:     0s[> ] 79/81, 31.1 task/s, elapsed: 3s, ETA:     0s[> ] 80/81, 31.1 task/s, elapsed: 3s, ETA:     0s[>>] 81/81, 31.2 task/s, elapsed: 3s, ETA:     0s
Results writes to /tmp/tmpj1t4d9vl/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7faae3a3bf40>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 54% 44/81 [00:00<00:00, 432.22it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0329
mATE: 0.9906
mASE: 0.7667
mAOE: 1.1296
mAVE: 1.0422
mAAE: 0.7271
NDS: 0.0680
Eval time: 2.4s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.204 	0.730 	0.425 	1.369 	0.370 	0.187 
truck               	0.002 	0.867 	0.359 	1.130 	0.262 	0.020 
bus                 	0.001 	1.110 	0.671 	1.242 	3.267 	1.000 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.121 	0.703 	0.402 	1.425 	0.439 	0.610 
motorcycle          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.000 	1.497 	0.810 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-28 03:56:13,553 - mmdet3d - INFO - Epoch(val) [4][41]	object/car_ap_dist_0.5: 0.0078, object/car_ap_dist_1.0: 0.1342, object/car_ap_dist_2.0: 0.3116, object/car_ap_dist_4.0: 0.3640, object/car_trans_err: 0.7296, object/car_scale_err: 0.4253, object/car_orient_err: 1.3686, object/car_vel_err: 0.3697, object/car_attr_err: 0.1868, object/mATE: 0.9906, object/mASE: 0.7667, object/mAOE: 1.1296, object/mAVE: 1.0422, object/mAAE: 0.7271, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0000, object/truck_ap_dist_2.0: 0.0044, object/truck_ap_dist_4.0: 0.0046, object/truck_trans_err: 0.8668, object/truck_scale_err: 0.3585, object/truck_orient_err: 1.1302, object/truck_vel_err: 0.2616, object/truck_attr_err: 0.0197, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0010, object/bus_ap_dist_4.0: 0.0047, object/bus_trans_err: 1.1098, object/bus_scale_err: 0.6714, object/bus_orient_err: 1.2423, object/bus_vel_err: 3.2672, object/bus_attr_err: 1.0000, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 1.0000, object/motorcycle_scale_err: 1.0000, object/motorcycle_orient_err: 1.0000, object/motorcycle_vel_err: 1.0000, object/motorcycle_attr_err: 1.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0465, object/pedestrian_ap_dist_1.0: 0.0769, object/pedestrian_ap_dist_2.0: 0.1354, object/pedestrian_ap_dist_4.0: 0.2266, object/pedestrian_trans_err: 0.7029, object/pedestrian_scale_err: 0.4023, object/pedestrian_orient_err: 1.4251, object/pedestrian_vel_err: 0.4391, object/pedestrian_attr_err: 0.6103, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0000, object/traffic_cone_ap_dist_2.0: 0.0000, object/traffic_cone_ap_dist_4.0: 0.0000, object/traffic_cone_trans_err: 1.4968, object/traffic_cone_scale_err: 0.8099, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.0680, object/map: 0.0329
2025-04-28 03:56:57,417 - mmdet3d - INFO - Epoch [5][50/815]	lr: 5.015e-05, eta: 0:21:32, time: 0.877, data_time: 0.067, memory: 13397, loss/object/loss_heatmap: 1.5108, loss/object/layer_-1_loss_cls: 0.3191, loss/object/layer_-1_loss_bbox: 2.2771, stats/object/matched_ious: 0.1584, loss: 4.1070, grad_norm: 6.8680
2025-04-28 03:57:38,506 - mmdet3d - INFO - Epoch [5][100/815]	lr: 5.015e-05, eta: 0:20:51, time: 0.822, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.4975, loss/object/layer_-1_loss_cls: 0.3276, loss/object/layer_-1_loss_bbox: 2.3222, stats/object/matched_ious: 0.1636, loss: 4.1473, grad_norm: 7.8327
2025-04-28 03:58:19,381 - mmdet3d - INFO - Epoch [5][150/815]	lr: 5.015e-05, eta: 0:20:10, time: 0.817, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.5276, loss/object/layer_-1_loss_cls: 0.3261, loss/object/layer_-1_loss_bbox: 2.1789, stats/object/matched_ious: 0.1633, loss: 4.0325, grad_norm: 7.9752
2025-04-28 03:59:00,343 - mmdet3d - INFO - Epoch [5][200/815]	lr: 5.015e-05, eta: 0:19:29, time: 0.819, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.3696, loss/object/layer_-1_loss_cls: 0.3027, loss/object/layer_-1_loss_bbox: 2.1771, stats/object/matched_ious: 0.1648, loss: 3.8493, grad_norm: 6.7847
2025-04-28 03:59:41,330 - mmdet3d - INFO - Epoch [5][250/815]	lr: 5.015e-05, eta: 0:18:48, time: 0.820, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.3800, loss/object/layer_-1_loss_cls: 0.3013, loss/object/layer_-1_loss_bbox: 2.1090, stats/object/matched_ious: 0.1658, loss: 3.7903, grad_norm: 6.6721
2025-04-28 04:00:22,608 - mmdet3d - INFO - Epoch [5][300/815]	lr: 5.015e-05, eta: 0:18:07, time: 0.826, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.4679, loss/object/layer_-1_loss_cls: 0.3136, loss/object/layer_-1_loss_bbox: 2.0946, stats/object/matched_ious: 0.1641, loss: 3.8761, grad_norm: 7.5931
2025-04-28 04:01:04,033 - mmdet3d - INFO - Epoch [5][350/815]	lr: 5.015e-05, eta: 0:17:27, time: 0.829, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.4146, loss/object/layer_-1_loss_cls: 0.3139, loss/object/layer_-1_loss_bbox: 2.1834, stats/object/matched_ious: 0.1682, loss: 3.9118, grad_norm: 7.1971
2025-04-28 04:01:45,426 - mmdet3d - INFO - Epoch [5][400/815]	lr: 5.015e-05, eta: 0:16:46, time: 0.828, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.4996, loss/object/layer_-1_loss_cls: 0.3175, loss/object/layer_-1_loss_bbox: 2.3658, stats/object/matched_ious: 0.1604, loss: 4.1829, grad_norm: 7.7393
2025-04-28 04:02:26,805 - mmdet3d - INFO - Epoch [5][450/815]	lr: 5.015e-05, eta: 0:16:05, time: 0.828, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.4169, loss/object/layer_-1_loss_cls: 0.2956, loss/object/layer_-1_loss_bbox: 2.1030, stats/object/matched_ious: 0.1714, loss: 3.8155, grad_norm: 7.1530
2025-04-28 04:03:08,107 - mmdet3d - INFO - Epoch [5][500/815]	lr: 5.015e-05, eta: 0:15:24, time: 0.826, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.4386, loss/object/layer_-1_loss_cls: 0.3127, loss/object/layer_-1_loss_bbox: 2.2858, stats/object/matched_ious: 0.1742, loss: 4.0371, grad_norm: 8.0465
2025-04-28 04:03:49,610 - mmdet3d - INFO - Epoch [5][550/815]	lr: 5.015e-05, eta: 0:14:44, time: 0.830, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.4181, loss/object/layer_-1_loss_cls: 0.3105, loss/object/layer_-1_loss_bbox: 2.2012, stats/object/matched_ious: 0.1656, loss: 3.9299, grad_norm: 7.8303
2025-04-28 04:04:31,137 - mmdet3d - INFO - Epoch [5][600/815]	lr: 5.015e-05, eta: 0:14:03, time: 0.831, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.3996, loss/object/layer_-1_loss_cls: 0.3038, loss/object/layer_-1_loss_bbox: 2.2259, stats/object/matched_ious: 0.1680, loss: 3.9292, grad_norm: 7.8157
2025-04-28 04:05:12,616 - mmdet3d - INFO - Epoch [5][650/815]	lr: 5.015e-05, eta: 0:13:22, time: 0.830, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.3656, loss/object/layer_-1_loss_cls: 0.2979, loss/object/layer_-1_loss_bbox: 2.0834, stats/object/matched_ious: 0.1776, loss: 3.7468, grad_norm: 7.4290
2025-04-28 04:05:54,046 - mmdet3d - INFO - Epoch [5][700/815]	lr: 5.015e-05, eta: 0:12:41, time: 0.829, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.3826, loss/object/layer_-1_loss_cls: 0.2920, loss/object/layer_-1_loss_bbox: 2.0864, stats/object/matched_ious: 0.1722, loss: 3.7611, grad_norm: 7.9604
2025-04-28 04:06:35,437 - mmdet3d - INFO - Epoch [5][750/815]	lr: 5.015e-05, eta: 0:12:00, time: 0.828, data_time: 0.011, memory: 13397, loss/object/loss_heatmap: 1.3838, loss/object/layer_-1_loss_cls: 0.3012, loss/object/layer_-1_loss_bbox: 2.3466, stats/object/matched_ious: 0.1738, loss: 4.0317, grad_norm: 7.9836
2025-04-28 04:07:17,885 - mmdet3d - INFO - Epoch [5][800/815]	lr: 5.015e-05, eta: 0:11:20, time: 0.849, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.3019, loss/object/layer_-1_loss_cls: 0.2909, loss/object/layer_-1_loss_bbox: 2.0123, stats/object/matched_ious: 0.1792, loss: 3.6052, grad_norm: 7.4680
2025-04-28 04:07:30,191 - mmdet3d - INFO - Saving checkpoint at 5 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 3s, ETA:   260s[  ] 2/81, 0.6 task/s, elapsed: 3s, ETA:   128s[  ] 3/81, 0.9 task/s, elapsed: 4s, ETA:    91s[  ] 4/81, 1.1 task/s, elapsed: 4s, ETA:    67s[  ] 5/81, 1.3 task/s, elapsed: 4s, ETA:    57s[  ] 6/81, 1.6 task/s, elapsed: 4s, ETA:    47s[  ] 7/81, 1.7 task/s, elapsed: 4s, ETA:    43s[  ] 8/81, 2.0 task/s, elapsed: 4s, ETA:    37s[  ] 9/81, 1.9 task/s, elapsed: 5s, ETA:    38s[  ] 10/81, 2.1 task/s, elapsed: 5s, ETA:    33s[  ] 11/81, 2.2 task/s, elapsed: 5s, ETA:    32s[  ] 12/81, 2.4 task/s, elapsed: 5s, ETA:    29s[  ] 13/81, 2.5 task/s, elapsed: 5s, ETA:    28s[  ] 14/81, 2.7 task/s, elapsed: 5s, ETA:    25s[  ] 15/81, 2.7 task/s, elapsed: 6s, ETA:    24s[  ] 16/81, 2.9 task/s, elapsed: 6s, ETA:    23s[  ] 17/81, 2.7 task/s, elapsed: 6s, ETA:    24s[  ] 18/81, 2.9 task/s, elapsed: 6s, ETA:    22s[  ] 19/81, 2.9 task/s, elapsed: 7s, ETA:    21s[  ] 20/81, 3.0 task/s, elapsed: 7s, ETA:    20s[  ] 21/81, 3.1 task/s, elapsed: 7s, ETA:    20s[  ] 22/81, 3.2 task/s, elapsed: 7s, ETA:    18s[  ] 23/81, 3.2 task/s, elapsed: 7s, ETA:    18s[  ] 24/81, 3.4 task/s, elapsed: 7s, ETA:    17s[  ] 25/81, 3.2 task/s, elapsed: 8s, ETA:    18s[  ] 26/81, 3.3 task/s, elapsed: 8s, ETA:    17s[  ] 27/81, 3.3 task/s, elapsed: 8s, ETA:    16s[  ] 28/81, 3.4 task/s, elapsed: 8s, ETA:    15s[  ] 29/81, 3.4 task/s, elapsed: 8s, ETA:    15s[  ] 30/81, 3.5 task/s, elapsed: 8s, ETA:    14s[  ] 31/81, 3.5 task/s, elapsed: 9s, ETA:    14s[  ] 32/81, 3.7 task/s, elapsed: 9s, ETA:    13s[  ] 33/81, 3.5 task/s, elapsed: 9s, ETA:    14s[  ] 34/81, 3.6 task/s, elapsed: 9s, ETA:    13s[  ] 35/81, 3.6 task/s, elapsed: 10s, ETA:    13s[  ] 36/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 37/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 38/81, 3.8 task/s, elapsed: 10s, ETA:    11s[  ] 39/81, 3.8 task/s, elapsed: 10s, ETA:    11s[  ] 40/81, 3.9 task/s, elapsed: 10s, ETA:    11s[> ] 41/81, 3.7 task/s, elapsed: 11s, ETA:    11s[> ] 42/81, 3.8 task/s, elapsed: 11s, ETA:    10s[> ] 43/81, 3.8 task/s, elapsed: 11s, ETA:    10s[> ] 44/81, 3.9 task/s, elapsed: 11s, ETA:    10s[> ] 45/81, 3.9 task/s, elapsed: 12s, ETA:     9s[> ] 46/81, 3.9 task/s, elapsed: 12s, ETA:     9s[> ] 47/81, 3.9 task/s, elapsed: 12s, ETA:     9s[> ] 48/81, 4.0 task/s, elapsed: 12s, ETA:     8s[> ] 49/81, 3.9 task/s, elapsed: 13s, ETA:     8s[> ] 50/81, 3.9 task/s, elapsed: 13s, ETA:     8s[> ] 51/81, 3.9 task/s, elapsed: 13s, ETA:     8s[> ] 52/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 53/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 54/81, 4.1 task/s, elapsed: 13s, ETA:     7s[> ] 55/81, 4.1 task/s, elapsed: 14s, ETA:     6s[> ] 56/81, 4.1 task/s, elapsed: 14s, ETA:     6s[> ] 57/81, 4.0 task/s, elapsed: 14s, ETA:     6s[> ] 58/81, 4.1 task/s, elapsed: 14s, ETA:     6s[> ] 59/81, 4.1 task/s, elapsed: 15s, ETA:     5s[> ] 60/81, 4.1 task/s, elapsed: 15s, ETA:     5s[> ] 61/81, 4.1 task/s, elapsed: 15s, ETA:     5s[> ] 62/81, 4.2 task/s, elapsed: 15s, ETA:     5s[> ] 63/81, 4.2 task/s, elapsed: 15s, ETA:     4s[> ] 64/81, 4.2 task/s, elapsed: 15s, ETA:     4s[> ] 65/81, 4.2 task/s, elapsed: 15s, ETA:     4s[> ] 66/81, 4.3 task/s, elapsed: 15s, ETA:     3s[> ] 67/81, 4.2 task/s, elapsed: 16s, ETA:     3s[> ] 68/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 69/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 70/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 71/81, 4.3 task/s, elapsed: 16s, ETA:     2s[> ] 72/81, 4.4 task/s, elapsed: 16s, ETA:     2s[> ] 73/81, 4.4 task/s, elapsed: 17s, ETA:     2s[> ] 74/81, 4.4 task/s, elapsed: 17s, ETA:     2s[> ] 75/81, 4.4 task/s, elapsed: 17s, ETA:     1s[> ] 76/81, 4.5 task/s, elapsed: 17s, ETA:     1s[> ] 77/81, 4.4 task/s, elapsed: 18s, ETA:     1s[> ] 78/81, 4.4 task/s, elapsed: 18s, ETA:     1s[> ] 79/81, 4.4 task/s, elapsed: 18s, ETA:     0s[> ] 80/81, 4.5 task/s, elapsed: 18s, ETA:     0s[>>] 81/81, 4.5 task/s, elapsed: 18s, ETA:     0s[>>] 82/81, 4.5 task/s, elapsed: 18s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 34.2 task/s, elapsed: 0s, ETA:     2s[  ] 2/81, 31.9 task/s, elapsed: 0s, ETA:     2s[  ] 3/81, 33.6 task/s, elapsed: 0s, ETA:     2s[  ] 4/81, 34.1 task/s, elapsed: 0s, ETA:     2s[  ] 5/81, 34.6 task/s, elapsed: 0s, ETA:     2s[  ] 6/81, 34.8 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 34.9 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 34.9 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 34.9 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 34.9 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 35.0 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 35.0 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 35.0 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 35.1 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 35.1 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 35.1 task/s, elapsed: 0s, ETA:     2s[  ] 17/81, 35.1 task/s, elapsed: 0s, ETA:     2s[  ] 18/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 19/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 20/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 21/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 22/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 23/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 24/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 25/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 26/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 27/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 28/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 29/81, 35.1 task/s, elapsed: 1s, ETA:     1s[  ] 30/81, 35.1 task/s, elapsed: 1s, ETA:     1s[  ] 31/81, 35.0 task/s, elapsed: 1s, ETA:     1s[  ] 32/81, 35.0 task/s, elapsed: 1s, ETA:     1s[  ] 33/81, 35.0 task/s, elapsed: 1s, ETA:     1s[  ] 34/81, 34.9 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 34.9 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 34.9 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 34.9 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 34.9 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 34.9 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 34.9 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 34.9 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 34.9 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 34.9 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 34.8 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 34.9 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 34.8 task/s, elapsed: 1s, ETA:     1s[> ] 47/81, 34.8 task/s, elapsed: 1s, ETA:     1s[> ] 48/81, 34.8 task/s, elapsed: 1s, ETA:     1s[> ] 49/81, 34.8 task/s, elapsed: 1s, ETA:     1s[> ] 50/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 51/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 52/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 53/81, 34.7 task/s, elapsed: 2s, ETA:     1s[> ] 54/81, 34.6 task/s, elapsed: 2s, ETA:     1s[> ] 55/81, 34.6 task/s, elapsed: 2s, ETA:     1s[> ] 56/81, 34.6 task/s, elapsed: 2s, ETA:     1s[> ] 57/81, 34.6 task/s, elapsed: 2s, ETA:     1s[> ] 58/81, 34.6 task/s, elapsed: 2s, ETA:     1s[> ] 59/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 60/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 61/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 62/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 63/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 64/81, 34.5 task/s, elapsed: 2s, ETA:     0s[> ] 65/81, 34.5 task/s, elapsed: 2s, ETA:     0s[> ] 66/81, 34.6 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 34.6 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 34.6 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 34.6 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 34.6 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 34.6 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 34.6 task/s, elapsed: 2s, ETA:     0s[> ] 73/81, 34.6 task/s, elapsed: 2s, ETA:     0s[> ] 74/81, 34.5 task/s, elapsed: 2s, ETA:     0s[> ] 75/81, 34.5 task/s, elapsed: 2s, ETA:     0s[> ] 76/81, 34.4 task/s, elapsed: 2s, ETA:     0s[> ] 77/81, 34.4 task/s, elapsed: 2s, ETA:     0s[> ] 78/81, 34.3 task/s, elapsed: 2s, ETA:     0s[> ] 79/81, 34.1 task/s, elapsed: 2s, ETA:     0s[> ] 80/81, 33.6 task/s, elapsed: 2s, ETA:     0s[>>] 81/81, 33.4 task/s, elapsed: 2s, ETA:     0s
Results writes to /tmp/tmpt0bcnzie/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7faae16f25e0>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 54% 44/81 [00:00<00:00, 433.14it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0340
mATE: 0.9096
mASE: 0.7824
mAOE: 1.1748
mAVE: 1.0048
mAAE: 0.7245
NDS: 0.0754
Eval time: 2.4s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.182 	0.744 	0.403 	1.365 	0.256 	0.167 
truck               	0.013 	0.606 	0.354 	1.258 	0.080 	0.000 
bus                 	0.001 	1.073 	0.599 	1.440 	3.224 	1.000 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.145 	0.672 	0.468 	1.510 	0.479 	0.628 
motorcycle          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.000 	1.000 	1.000 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-28 04:08:02,983 - mmdet3d - INFO - Epoch(val) [5][41]	object/car_ap_dist_0.5: 0.0048, object/car_ap_dist_1.0: 0.1131, object/car_ap_dist_2.0: 0.2793, object/car_ap_dist_4.0: 0.3292, object/car_trans_err: 0.7442, object/car_scale_err: 0.4030, object/car_orient_err: 1.3649, object/car_vel_err: 0.2564, object/car_attr_err: 0.1674, object/mATE: 0.9096, object/mASE: 0.7824, object/mAOE: 1.1748, object/mAVE: 1.0048, object/mAAE: 0.7245, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0041, object/truck_ap_dist_2.0: 0.0184, object/truck_ap_dist_4.0: 0.0289, object/truck_trans_err: 0.6064, object/truck_scale_err: 0.3541, object/truck_orient_err: 1.2585, object/truck_vel_err: 0.0801, object/truck_attr_err: 0.0000, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0000, object/bus_ap_dist_4.0: 0.0031, object/bus_trans_err: 1.0733, object/bus_scale_err: 0.5987, object/bus_orient_err: 1.4400, object/bus_vel_err: 3.2236, object/bus_attr_err: 1.0000, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 1.0000, object/motorcycle_scale_err: 1.0000, object/motorcycle_orient_err: 1.0000, object/motorcycle_vel_err: 1.0000, object/motorcycle_attr_err: 1.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0580, object/pedestrian_ap_dist_1.0: 0.1069, object/pedestrian_ap_dist_2.0: 0.1599, object/pedestrian_ap_dist_4.0: 0.2544, object/pedestrian_trans_err: 0.6724, object/pedestrian_scale_err: 0.4682, object/pedestrian_orient_err: 1.5100, object/pedestrian_vel_err: 0.4787, object/pedestrian_attr_err: 0.6283, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0000, object/traffic_cone_ap_dist_2.0: 0.0000, object/traffic_cone_ap_dist_4.0: 0.0000, object/traffic_cone_trans_err: 1.0000, object/traffic_cone_scale_err: 1.0000, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.0754, object/map: 0.0340
2025-04-28 04:08:46,457 - mmdet3d - INFO - Epoch [6][50/815]	lr: 1.358e-05, eta: 0:10:25, time: 0.869, data_time: 0.067, memory: 13397, loss/object/loss_heatmap: 1.2691, loss/object/layer_-1_loss_cls: 0.2952, loss/object/layer_-1_loss_bbox: 1.8546, stats/object/matched_ious: 0.1896, loss: 3.4189, grad_norm: 7.3771
2025-04-28 04:09:27,459 - mmdet3d - INFO - Epoch [6][100/815]	lr: 1.358e-05, eta: 0:09:44, time: 0.820, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.3503, loss/object/layer_-1_loss_cls: 0.2951, loss/object/layer_-1_loss_bbox: 1.9595, stats/object/matched_ious: 0.1835, loss: 3.6048, grad_norm: 7.7507
2025-04-28 04:10:08,413 - mmdet3d - INFO - Epoch [6][150/815]	lr: 1.358e-05, eta: 0:09:03, time: 0.819, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.3230, loss/object/layer_-1_loss_cls: 0.2917, loss/object/layer_-1_loss_bbox: 2.0555, stats/object/matched_ious: 0.1856, loss: 3.6702, grad_norm: 7.1713
2025-04-28 04:10:49,326 - mmdet3d - INFO - Epoch [6][200/815]	lr: 1.358e-05, eta: 0:08:22, time: 0.818, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.3595, loss/object/layer_-1_loss_cls: 0.2943, loss/object/layer_-1_loss_bbox: 2.1538, stats/object/matched_ious: 0.1782, loss: 3.8076, grad_norm: 7.7597
2025-04-28 04:11:30,520 - mmdet3d - INFO - Epoch [6][250/815]	lr: 1.358e-05, eta: 0:07:41, time: 0.824, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.3197, loss/object/layer_-1_loss_cls: 0.2836, loss/object/layer_-1_loss_bbox: 2.0000, stats/object/matched_ious: 0.1779, loss: 3.6033, grad_norm: 7.0697
2025-04-28 04:12:11,976 - mmdet3d - INFO - Epoch [6][300/815]	lr: 1.358e-05, eta: 0:07:00, time: 0.829, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.2534, loss/object/layer_-1_loss_cls: 0.2822, loss/object/layer_-1_loss_bbox: 2.0850, stats/object/matched_ious: 0.1893, loss: 3.6206, grad_norm: 7.0223
2025-04-28 04:12:53,472 - mmdet3d - INFO - Epoch [6][350/815]	lr: 1.358e-05, eta: 0:06:20, time: 0.830, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.2368, loss/object/layer_-1_loss_cls: 0.2703, loss/object/layer_-1_loss_bbox: 2.0661, stats/object/matched_ious: 0.1746, loss: 3.5732, grad_norm: 6.5315
2025-04-28 04:13:34,884 - mmdet3d - INFO - Epoch [6][400/815]	lr: 1.358e-05, eta: 0:05:39, time: 0.828, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.3191, loss/object/layer_-1_loss_cls: 0.2795, loss/object/layer_-1_loss_bbox: 2.0356, stats/object/matched_ious: 0.1795, loss: 3.6342, grad_norm: 7.2540
2025-04-28 04:14:16,241 - mmdet3d - INFO - Epoch [6][450/815]	lr: 1.358e-05, eta: 0:04:58, time: 0.827, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.3175, loss/object/layer_-1_loss_cls: 0.2858, loss/object/layer_-1_loss_bbox: 2.1200, stats/object/matched_ious: 0.1746, loss: 3.7233, grad_norm: 7.8438
2025-04-28 04:14:57,812 - mmdet3d - INFO - Epoch [6][500/815]	lr: 1.358e-05, eta: 0:04:17, time: 0.831, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.2930, loss/object/layer_-1_loss_cls: 0.2817, loss/object/layer_-1_loss_bbox: 2.1274, stats/object/matched_ious: 0.1762, loss: 3.7021, grad_norm: 7.3806
2025-04-28 04:15:39,265 - mmdet3d - INFO - Epoch [6][550/815]	lr: 1.358e-05, eta: 0:03:36, time: 0.829, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.2677, loss/object/layer_-1_loss_cls: 0.2849, loss/object/layer_-1_loss_bbox: 2.0554, stats/object/matched_ious: 0.1933, loss: 3.6081, grad_norm: 7.3813
2025-04-28 04:16:20,561 - mmdet3d - INFO - Epoch [6][600/815]	lr: 1.358e-05, eta: 0:02:55, time: 0.826, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.3386, loss/object/layer_-1_loss_cls: 0.2804, loss/object/layer_-1_loss_bbox: 2.0696, stats/object/matched_ious: 0.1787, loss: 3.6886, grad_norm: 7.5883
2025-04-28 04:17:02,482 - mmdet3d - INFO - Epoch [6][650/815]	lr: 1.358e-05, eta: 0:02:15, time: 0.838, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.2572, loss/object/layer_-1_loss_cls: 0.2736, loss/object/layer_-1_loss_bbox: 2.0355, stats/object/matched_ious: 0.1796, loss: 3.5664, grad_norm: 7.0818
2025-04-28 04:17:43,695 - mmdet3d - INFO - Epoch [6][700/815]	lr: 1.358e-05, eta: 0:01:34, time: 0.824, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.2941, loss/object/layer_-1_loss_cls: 0.2705, loss/object/layer_-1_loss_bbox: 2.0601, stats/object/matched_ious: 0.1788, loss: 3.6247, grad_norm: 7.3590
2025-04-28 04:18:25,906 - mmdet3d - INFO - Epoch [6][750/815]	lr: 1.358e-05, eta: 0:00:53, time: 0.844, data_time: 0.010, memory: 13397, loss/object/loss_heatmap: 1.3114, loss/object/layer_-1_loss_cls: 0.2827, loss/object/layer_-1_loss_bbox: 1.9496, stats/object/matched_ious: 0.1905, loss: 3.5437, grad_norm: 7.7502
2025-04-28 04:19:07,331 - mmdet3d - INFO - Epoch [6][800/815]	lr: 1.358e-05, eta: 0:00:12, time: 0.828, data_time: 0.011, memory: 13397, loss/object/loss_heatmap: 1.2988, loss/object/layer_-1_loss_cls: 0.2804, loss/object/layer_-1_loss_bbox: 2.0435, stats/object/matched_ious: 0.1863, loss: 3.6227, grad_norm: 7.4719
2025-04-28 04:19:19,690 - mmdet3d - INFO - Saving checkpoint at 6 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 3s, ETA:   258s[  ] 2/81, 0.6 task/s, elapsed: 3s, ETA:   128s[  ] 3/81, 0.9 task/s, elapsed: 3s, ETA:    91s[  ] 4/81, 1.1 task/s, elapsed: 3s, ETA:    67s[  ] 5/81, 1.3 task/s, elapsed: 4s, ETA:    57s[  ] 6/81, 1.6 task/s, elapsed: 4s, ETA:    47s[  ] 7/81, 1.7 task/s, elapsed: 4s, ETA:    42s[  ] 8/81, 2.0 task/s, elapsed: 4s, ETA:    37s[  ] 9/81, 1.9 task/s, elapsed: 5s, ETA:    37s[  ] 10/81, 2.2 task/s, elapsed: 5s, ETA:    33s[  ] 11/81, 2.2 task/s, elapsed: 5s, ETA:    31s[  ] 12/81, 2.5 task/s, elapsed: 5s, ETA:    28s[  ] 13/81, 2.5 task/s, elapsed: 5s, ETA:    27s[  ] 14/81, 2.7 task/s, elapsed: 5s, ETA:    25s[  ] 15/81, 2.7 task/s, elapsed: 5s, ETA:    24s[  ] 16/81, 2.9 task/s, elapsed: 5s, ETA:    22s[  ] 17/81, 2.7 task/s, elapsed: 6s, ETA:    23s[  ] 18/81, 2.9 task/s, elapsed: 6s, ETA:    22s[  ] 19/81, 2.9 task/s, elapsed: 6s, ETA:    21s[  ] 20/81, 3.1 task/s, elapsed: 6s, ETA:    20s[  ] 21/81, 3.1 task/s, elapsed: 7s, ETA:    19s[  ] 22/81, 3.2 task/s, elapsed: 7s, ETA:    18s[  ] 23/81, 3.3 task/s, elapsed: 7s, ETA:    18s[  ] 24/81, 3.4 task/s, elapsed: 7s, ETA:    17s[  ] 25/81, 3.2 task/s, elapsed: 8s, ETA:    18s[  ] 26/81, 3.3 task/s, elapsed: 8s, ETA:    17s[  ] 27/81, 3.3 task/s, elapsed: 8s, ETA:    16s[  ] 28/81, 3.5 task/s, elapsed: 8s, ETA:    15s[  ] 29/81, 3.5 task/s, elapsed: 8s, ETA:    15s[  ] 30/81, 3.6 task/s, elapsed: 8s, ETA:    14s[  ] 31/81, 3.6 task/s, elapsed: 9s, ETA:    14s[  ] 32/81, 3.7 task/s, elapsed: 9s, ETA:    13s[  ] 33/81, 3.5 task/s, elapsed: 9s, ETA:    14s[  ] 34/81, 3.6 task/s, elapsed: 9s, ETA:    13s[  ] 35/81, 3.6 task/s, elapsed: 10s, ETA:    13s[  ] 36/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 37/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 38/81, 3.8 task/s, elapsed: 10s, ETA:    11s[  ] 39/81, 3.8 task/s, elapsed: 10s, ETA:    11s[  ] 40/81, 3.9 task/s, elapsed: 10s, ETA:    11s[> ] 41/81, 3.7 task/s, elapsed: 11s, ETA:    11s[> ] 42/81, 3.8 task/s, elapsed: 11s, ETA:    10s[> ] 43/81, 3.8 task/s, elapsed: 11s, ETA:    10s[> ] 44/81, 3.9 task/s, elapsed: 11s, ETA:     9s[> ] 45/81, 3.9 task/s, elapsed: 12s, ETA:     9s[> ] 46/81, 4.0 task/s, elapsed: 12s, ETA:     9s[> ] 47/81, 4.0 task/s, elapsed: 12s, ETA:     9s[> ] 48/81, 4.0 task/s, elapsed: 12s, ETA:     8s[> ] 49/81, 3.9 task/s, elapsed: 13s, ETA:     8s[> ] 50/81, 4.0 task/s, elapsed: 13s, ETA:     8s[> ] 51/81, 4.0 task/s, elapsed: 13s, ETA:     8s[> ] 52/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 53/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 54/81, 4.1 task/s, elapsed: 13s, ETA:     7s[> ] 55/81, 4.1 task/s, elapsed: 13s, ETA:     6s[> ] 56/81, 4.2 task/s, elapsed: 13s, ETA:     6s[> ] 57/81, 4.0 task/s, elapsed: 14s, ETA:     6s[> ] 58/81, 4.1 task/s, elapsed: 14s, ETA:     6s[> ] 59/81, 4.1 task/s, elapsed: 14s, ETA:     5s[> ] 60/81, 4.1 task/s, elapsed: 14s, ETA:     5s[> ] 61/81, 4.1 task/s, elapsed: 15s, ETA:     5s[> ] 62/81, 4.2 task/s, elapsed: 15s, ETA:     5s[> ] 63/81, 4.2 task/s, elapsed: 15s, ETA:     4s[> ] 64/81, 4.3 task/s, elapsed: 15s, ETA:     4s[> ] 65/81, 4.3 task/s, elapsed: 15s, ETA:     4s[> ] 66/81, 4.3 task/s, elapsed: 15s, ETA:     3s[> ] 67/81, 4.2 task/s, elapsed: 16s, ETA:     3s[> ] 68/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 69/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 70/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 71/81, 4.3 task/s, elapsed: 16s, ETA:     2s[> ] 72/81, 4.4 task/s, elapsed: 16s, ETA:     2s[> ] 73/81, 4.4 task/s, elapsed: 17s, ETA:     2s[> ] 74/81, 4.4 task/s, elapsed: 17s, ETA:     2s[> ] 75/81, 4.4 task/s, elapsed: 17s, ETA:     1s[> ] 76/81, 4.5 task/s, elapsed: 17s, ETA:     1s[> ] 77/81, 4.4 task/s, elapsed: 17s, ETA:     1s[> ] 78/81, 4.5 task/s, elapsed: 17s, ETA:     1s[> ] 79/81, 4.5 task/s, elapsed: 18s, ETA:     0s[> ] 80/81, 4.5 task/s, elapsed: 18s, ETA:     0s[>>] 81/81, 4.5 task/s, elapsed: 18s, ETA:     0s[>>] 82/81, 4.6 task/s, elapsed: 18s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 33.8 task/s, elapsed: 0s, ETA:     2s[  ] 2/81, 33.6 task/s, elapsed: 0s, ETA:     2s[  ] 3/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 4/81, 34.4 task/s, elapsed: 0s, ETA:     2s[  ] 5/81, 34.7 task/s, elapsed: 0s, ETA:     2s[  ] 6/81, 34.8 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 34.8 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 35.0 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 35.0 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 35.0 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 35.1 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 35.1 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 35.1 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 35.2 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 35.2 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 35.2 task/s, elapsed: 0s, ETA:     2s[  ] 17/81, 35.3 task/s, elapsed: 0s, ETA:     2s[  ] 18/81, 35.3 task/s, elapsed: 1s, ETA:     2s[  ] 19/81, 35.2 task/s, elapsed: 1s, ETA:     2s[  ] 20/81, 35.2 task/s, elapsed: 1s, ETA:     2s[  ] 21/81, 35.2 task/s, elapsed: 1s, ETA:     2s[  ] 22/81, 35.2 task/s, elapsed: 1s, ETA:     2s[  ] 23/81, 35.2 task/s, elapsed: 1s, ETA:     2s[  ] 24/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 25/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 26/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 27/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 28/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 29/81, 35.1 task/s, elapsed: 1s, ETA:     1s[  ] 30/81, 35.0 task/s, elapsed: 1s, ETA:     1s[  ] 31/81, 35.0 task/s, elapsed: 1s, ETA:     1s[  ] 32/81, 35.0 task/s, elapsed: 1s, ETA:     1s[  ] 33/81, 34.9 task/s, elapsed: 1s, ETA:     1s[  ] 34/81, 34.8 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 34.8 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 34.8 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 34.8 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 34.8 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 34.8 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 34.8 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 34.6 task/s, elapsed: 1s, ETA:     1s[> ] 47/81, 34.6 task/s, elapsed: 1s, ETA:     1s[> ] 48/81, 34.6 task/s, elapsed: 1s, ETA:     1s[> ] 49/81, 34.6 task/s, elapsed: 1s, ETA:     1s[> ] 50/81, 34.5 task/s, elapsed: 1s, ETA:     1s[> ] 51/81, 34.5 task/s, elapsed: 1s, ETA:     1s[> ] 52/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 53/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 54/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 55/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 56/81, 34.4 task/s, elapsed: 2s, ETA:     1s[> ] 57/81, 34.4 task/s, elapsed: 2s, ETA:     1s[> ] 58/81, 34.4 task/s, elapsed: 2s, ETA:     1s[> ] 59/81, 34.4 task/s, elapsed: 2s, ETA:     1s[> ] 60/81, 34.4 task/s, elapsed: 2s, ETA:     1s[> ] 61/81, 34.4 task/s, elapsed: 2s, ETA:     1s[> ] 62/81, 34.4 task/s, elapsed: 2s, ETA:     1s[> ] 63/81, 34.4 task/s, elapsed: 2s, ETA:     1s[> ] 64/81, 34.4 task/s, elapsed: 2s, ETA:     0s[> ] 65/81, 34.4 task/s, elapsed: 2s, ETA:     0s[> ] 66/81, 34.4 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 34.4 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 34.4 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 34.4 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 34.4 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 34.5 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 34.5 task/s, elapsed: 2s, ETA:     0s[> ] 73/81, 34.5 task/s, elapsed: 2s, ETA:     0s[> ] 74/81, 34.5 task/s, elapsed: 2s, ETA:     0s[> ] 75/81, 34.5 task/s, elapsed: 2s, ETA:     0s[> ] 76/81, 34.5 task/s, elapsed: 2s, ETA:     0s[> ] 77/81, 34.5 task/s, elapsed: 2s, ETA:     0s[> ] 78/81, 34.5 task/s, elapsed: 2s, ETA:     0s[> ] 79/81, 34.6 task/s, elapsed: 2s, ETA:     0s[> ] 80/81, 34.6 task/s, elapsed: 2s, ETA:     0s[>>] 81/81, 34.6 task/s, elapsed: 2s, ETA:     0s
Results writes to /tmp/tmp2wen10o5/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7faadfae0340>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 54% 44/81 [00:00<00:00, 432.93it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0406
mATE: 0.9069
mASE: 0.7604
mAOE: 1.2065
mAVE: 0.8412
mAAE: 0.7121
NDS: 0.0982
Eval time: 2.7s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.220 	0.758 	0.249 	1.385 	0.258 	0.168 
truck               	0.004 	0.541 	0.255 	1.103 	0.773 	0.102 
bus                 	0.002 	1.134 	0.701 	1.582 	1.224 	0.800 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.180 	0.636 	0.399 	1.789 	0.474 	0.627 
motorcycle          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.000 	1.000 	1.000 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-28 04:19:52,839 - mmdet3d - INFO - Epoch(val) [6][41]	object/car_ap_dist_0.5: 0.0057, object/car_ap_dist_1.0: 0.1375, object/car_ap_dist_2.0: 0.3409, object/car_ap_dist_4.0: 0.3957, object/car_trans_err: 0.7578, object/car_scale_err: 0.2491, object/car_orient_err: 1.3847, object/car_vel_err: 0.2585, object/car_attr_err: 0.1685, object/mATE: 0.9069, object/mASE: 0.7604, object/mAOE: 1.2065, object/mAVE: 0.8412, object/mAAE: 0.7121, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0023, object/truck_ap_dist_2.0: 0.0038, object/truck_ap_dist_4.0: 0.0087, object/truck_trans_err: 0.5407, object/truck_scale_err: 0.2549, object/truck_orient_err: 1.1028, object/truck_vel_err: 0.7729, object/truck_attr_err: 0.1022, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0000, object/bus_ap_dist_4.0: 0.0081, object/bus_trans_err: 1.1344, object/bus_scale_err: 0.7012, object/bus_orient_err: 1.5822, object/bus_vel_err: 1.2244, object/bus_attr_err: 0.7995, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 1.0000, object/motorcycle_scale_err: 1.0000, object/motorcycle_orient_err: 1.0000, object/motorcycle_vel_err: 1.0000, object/motorcycle_attr_err: 1.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0883, object/pedestrian_ap_dist_1.0: 0.1336, object/pedestrian_ap_dist_2.0: 0.1993, object/pedestrian_ap_dist_4.0: 0.3003, object/pedestrian_trans_err: 0.6358, object/pedestrian_scale_err: 0.3986, object/pedestrian_orient_err: 1.7889, object/pedestrian_vel_err: 0.4736, object/pedestrian_attr_err: 0.6267, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0000, object/traffic_cone_ap_dist_2.0: 0.0000, object/traffic_cone_ap_dist_4.0: 0.0000, object/traffic_cone_trans_err: 1.0000, object/traffic_cone_scale_err: 1.0000, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.0982, object/map: 0.0406
