2025-04-28 04:31:38,602 - mmdet3d - INFO - Config:
seed = 0
deterministic = False
checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
load_from = None
resume_from = None
cudnn_benchmark = False
fp16 = dict(loss_scale=dict(growth_interval=2000))
max_epochs = 6
runner = dict(type='CustomEpochBasedRunner', max_epochs=6)
dataset_type = 'NuScenesDataset'
dataset_root = 'data/nuscenes/'
gt_paste_stop_epoch = -1
reduce_beams = 32
load_dim = 5
use_dim = 5
load_augmented = None
point_cloud_range = [-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]
voxel_size = [0.075, 0.075, 0.2]
image_size = [256, 704]
augment2d = dict(
    resize=[[0.38, 0.55], [0.48, 0.48]],
    rotate=[-5.4, 5.4],
    gridmask=dict(prob=0.0, fixed_prob=True))
augment3d = dict(
    scale=[0.9, 1.1], rotate=[-0.78539816, 0.78539816], translate=0.5)
object_classes = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
map_classes = [
    'drivable_area', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area',
    'divider'
]
input_modality = dict(
    use_lidar=True,
    use_camera=True,
    use_radar=False,
    use_map=False,
    use_external=False)
train_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        load_augmented=None),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=0,
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        pad_empty_sweeps=True,
        remove_close=True,
        load_augmented=None),
    dict(
        type='LoadRadarPointsMultiSweeps',
        load_dim=18,
        sweeps_num=6,
        use_dim=[
            0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
            30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
            47, 48, 49, 50, 51, 52, 53, 54, 55, 56
        ],
        max_num=2500,
        compensate_velocity=True,
        filtering='none',
        normalize=False),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False),
    dict(
        type='ObjectPaste',
        stop_epoch=-1,
        db_sampler=dict(
            dataset_root='data/nuscenes/',
            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
            rate=1.0,
            prepare=dict(
                filter_by_difficulty=[-1],
                filter_by_min_points=dict(
                    car=5,
                    truck=5,
                    bus=5,
                    trailer=5,
                    construction_vehicle=5,
                    traffic_cone=5,
                    barrier=5,
                    motorcycle=5,
                    bicycle=5,
                    pedestrian=5)),
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            sample_groups=dict(
                car=2,
                truck=3,
                construction_vehicle=7,
                bus=4,
                trailer=6,
                barrier=2,
                motorcycle=6,
                bicycle=6,
                pedestrian=2,
                traffic_cone=2),
            points_loader=dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32))),
    dict(
        type='ImageAug3D',
        final_dim=[256, 704],
        resize_lim=[0.38, 0.55],
        bot_pct_lim=[0.0, 0.0],
        rot_lim=[-5.4, 5.4],
        rand_flip=True,
        is_train=True),
    dict(
        type='GlobalRotScaleTrans',
        resize_lim=[0.9, 1.1],
        rot_lim=[-0.78539816, 0.78539816],
        trans_lim=0.5,
        is_train=True),
    dict(type='RandomFlip3D'),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(
        type='ObjectNameFilter',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='ImageNormalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(
        type='GridMask',
        use_h=True,
        use_w=True,
        max_epoch=6,
        rotate=1,
        offset=False,
        ratio=0.5,
        mode=1,
        prob=0.0,
        fixed_prob=True),
    dict(type='PointShuffle'),
    dict(
        type='DefaultFormatBundle3D',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='Collect3D',
        keys=['img', 'points', 'radar', 'gt_bboxes_3d', 'gt_labels_3d'],
        meta_keys=[
            'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
            'lidar2image', 'camera2lidar', 'img_aug_matrix', 'lidar_aug_matrix'
        ]),
    dict(type='GTDepth', keyframe_only=True)
]
test_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        load_augmented=None),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        pad_empty_sweeps=True,
        remove_close=True,
        load_augmented=None),
    dict(
        type='LoadRadarPointsMultiSweeps',
        load_dim=18,
        sweeps_num=6,
        use_dim=[
            0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
            30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
            47, 48, 49, 50, 51, 52, 53, 54, 55, 56
        ],
        max_num=2500,
        compensate_velocity=True,
        filtering='none',
        normalize=False),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False),
    dict(
        type='ImageAug3D',
        final_dim=[256, 704],
        resize_lim=[0.48, 0.48],
        bot_pct_lim=[0.0, 0.0],
        rot_lim=[0.0, 0.0],
        rand_flip=False,
        is_train=False),
    dict(
        type='GlobalRotScaleTrans',
        resize_lim=[1.0, 1.0],
        rot_lim=[0.0, 0.0],
        trans_lim=0.0,
        is_train=False),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(
        type='ImageNormalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(
        type='DefaultFormatBundle3D',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='Collect3D',
        keys=['img', 'points', 'radar', 'gt_bboxes_3d', 'gt_labels_3d'],
        meta_keys=[
            'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
            'lidar2image', 'camera2lidar', 'img_aug_matrix', 'lidar_aug_matrix'
        ]),
    dict(type='GTDepth', keyframe_only=True)
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=4,
    train=dict(
        type='CBGSDataset',
        dataset=dict(
            type='NuScenesDataset',
            dataset_root='data/nuscenes/',
            ann_file='data/nuscenes/nuscenes_infos_train.pkl',
            pipeline=[
                dict(type='LoadMultiViewImageFromFiles', to_float32=True),
                dict(
                    type='LoadPointsFromFile',
                    coord_type='LIDAR',
                    load_dim=5,
                    use_dim=5,
                    reduce_beams=32,
                    load_augmented=None),
                dict(
                    type='LoadPointsFromMultiSweeps',
                    sweeps_num=0,
                    load_dim=5,
                    use_dim=5,
                    reduce_beams=32,
                    pad_empty_sweeps=True,
                    remove_close=True,
                    load_augmented=None),
                dict(
                    type='LoadRadarPointsMultiSweeps',
                    load_dim=18,
                    sweeps_num=6,
                    use_dim=[
                        0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26,
                        27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
                        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56
                    ],
                    max_num=2500,
                    compensate_velocity=True,
                    filtering='none',
                    normalize=False),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True,
                    with_attr_label=False),
                dict(
                    type='ObjectPaste',
                    stop_epoch=-1,
                    db_sampler=dict(
                        dataset_root='data/nuscenes/',
                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1],
                            filter_by_min_points=dict(
                                car=5,
                                truck=5,
                                bus=5,
                                trailer=5,
                                construction_vehicle=5,
                                traffic_cone=5,
                                barrier=5,
                                motorcycle=5,
                                bicycle=5,
                                pedestrian=5)),
                        classes=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        sample_groups=dict(
                            car=2,
                            truck=3,
                            construction_vehicle=7,
                            bus=4,
                            trailer=6,
                            barrier=2,
                            motorcycle=6,
                            bicycle=6,
                            pedestrian=2,
                            traffic_cone=2),
                        points_loader=dict(
                            type='LoadPointsFromFile',
                            coord_type='LIDAR',
                            load_dim=5,
                            use_dim=5,
                            reduce_beams=32))),
                dict(
                    type='ImageAug3D',
                    final_dim=[256, 704],
                    resize_lim=[0.38, 0.55],
                    bot_pct_lim=[0.0, 0.0],
                    rot_lim=[-5.4, 5.4],
                    rand_flip=True,
                    is_train=True),
                dict(
                    type='GlobalRotScaleTrans',
                    resize_lim=[0.9, 1.1],
                    rot_lim=[-0.78539816, 0.78539816],
                    trans_lim=0.5,
                    is_train=True),
                dict(type='RandomFlip3D'),
                dict(
                    type='PointsRangeFilter',
                    point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
                dict(
                    type='ObjectRangeFilter',
                    point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
                dict(
                    type='ObjectNameFilter',
                    classes=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(
                    type='ImageNormalize',
                    mean=[0.485, 0.456, 0.406],
                    std=[0.229, 0.224, 0.225]),
                dict(
                    type='GridMask',
                    use_h=True,
                    use_w=True,
                    max_epoch=6,
                    rotate=1,
                    offset=False,
                    ratio=0.5,
                    mode=1,
                    prob=0.0,
                    fixed_prob=True),
                dict(type='PointShuffle'),
                dict(
                    type='DefaultFormatBundle3D',
                    classes=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(
                    type='Collect3D',
                    keys=[
                        'img', 'points', 'radar', 'gt_bboxes_3d',
                        'gt_labels_3d'
                    ],
                    meta_keys=[
                        'camera_intrinsics', 'camera2ego', 'lidar2ego',
                        'lidar2camera', 'lidar2image', 'camera2lidar',
                        'img_aug_matrix', 'lidar_aug_matrix'
                    ]),
                dict(type='GTDepth', keyframe_only=True)
            ],
            object_classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            map_classes=[
                'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
                'carpark_area', 'divider'
            ],
            modality=dict(
                use_lidar=True,
                use_camera=True,
                use_radar=False,
                use_map=False,
                use_external=False),
            test_mode=False,
            use_valid_flag=True,
            box_type_3d='LiDAR')),
    val=dict(
        type='NuScenesDataset',
        dataset_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                load_augmented=None),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                pad_empty_sweeps=True,
                remove_close=True,
                load_augmented=None),
            dict(
                type='LoadRadarPointsMultiSweeps',
                load_dim=18,
                sweeps_num=6,
                use_dim=[
                    0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
                    28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
                    43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56
                ],
                max_num=2500,
                compensate_velocity=True,
                filtering='none',
                normalize=False),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False),
            dict(
                type='ImageAug3D',
                final_dim=[256, 704],
                resize_lim=[0.48, 0.48],
                bot_pct_lim=[0.0, 0.0],
                rot_lim=[0.0, 0.0],
                rand_flip=False,
                is_train=False),
            dict(
                type='GlobalRotScaleTrans',
                resize_lim=[1.0, 1.0],
                rot_lim=[0.0, 0.0],
                trans_lim=0.0,
                is_train=False),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
            dict(
                type='ImageNormalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(
                type='DefaultFormatBundle3D',
                classes=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='Collect3D',
                keys=[
                    'img', 'points', 'radar', 'gt_bboxes_3d', 'gt_labels_3d'
                ],
                meta_keys=[
                    'camera_intrinsics', 'camera2ego', 'lidar2ego',
                    'lidar2camera', 'lidar2image', 'camera2lidar',
                    'img_aug_matrix', 'lidar_aug_matrix'
                ]),
            dict(type='GTDepth', keyframe_only=True)
        ],
        object_classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        map_classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area', 'divider'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        dataset_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                load_augmented=None),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                pad_empty_sweeps=True,
                remove_close=True,
                load_augmented=None),
            dict(
                type='LoadRadarPointsMultiSweeps',
                load_dim=18,
                sweeps_num=6,
                use_dim=[
                    0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
                    28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
                    43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56
                ],
                max_num=2500,
                compensate_velocity=True,
                filtering='none',
                normalize=False),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False),
            dict(
                type='ImageAug3D',
                final_dim=[256, 704],
                resize_lim=[0.48, 0.48],
                bot_pct_lim=[0.0, 0.0],
                rot_lim=[0.0, 0.0],
                rand_flip=False,
                is_train=False),
            dict(
                type='GlobalRotScaleTrans',
                resize_lim=[1.0, 1.0],
                rot_lim=[0.0, 0.0],
                trans_lim=0.0,
                is_train=False),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
            dict(
                type='ImageNormalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(
                type='DefaultFormatBundle3D',
                classes=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='Collect3D',
                keys=[
                    'img', 'points', 'radar', 'gt_bboxes_3d', 'gt_labels_3d'
                ],
                meta_keys=[
                    'camera_intrinsics', 'camera2ego', 'lidar2ego',
                    'lidar2camera', 'lidar2image', 'camera2lidar',
                    'img_aug_matrix', 'lidar_aug_matrix'
                ]),
            dict(type='GTDepth', keyframe_only=True)
        ],
        object_classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        map_classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area', 'divider'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=1,
    pipeline=[
        dict(type='LoadMultiViewImageFromFiles', to_float32=True),
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            reduce_beams=32,
            load_augmented=None),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=9,
            load_dim=5,
            use_dim=5,
            reduce_beams=32,
            pad_empty_sweeps=True,
            remove_close=True,
            load_augmented=None),
        dict(
            type='LoadRadarPointsMultiSweeps',
            load_dim=18,
            sweeps_num=6,
            use_dim=[
                0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
                45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56
            ],
            max_num=2500,
            compensate_velocity=True,
            filtering='none',
            normalize=False),
        dict(
            type='LoadAnnotations3D',
            with_bbox_3d=True,
            with_label_3d=True,
            with_attr_label=False),
        dict(
            type='ImageAug3D',
            final_dim=[256, 704],
            resize_lim=[0.48, 0.48],
            bot_pct_lim=[0.0, 0.0],
            rot_lim=[0.0, 0.0],
            rand_flip=False,
            is_train=False),
        dict(
            type='GlobalRotScaleTrans',
            resize_lim=[1.0, 1.0],
            rot_lim=[0.0, 0.0],
            trans_lim=0.0,
            is_train=False),
        dict(
            type='PointsRangeFilter',
            point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
        dict(
            type='ImageNormalize',
            mean=[0.485, 0.456, 0.406],
            std=[0.229, 0.224, 0.225]),
        dict(
            type='DefaultFormatBundle3D',
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ]),
        dict(
            type='Collect3D',
            keys=['img', 'points', 'radar', 'gt_bboxes_3d', 'gt_labels_3d'],
            meta_keys=[
                'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
                'lidar2image', 'camera2lidar', 'img_aug_matrix',
                'lidar_aug_matrix'
            ]),
        dict(type='GTDepth', keyframe_only=True)
    ])
radar_sweeps = 6
radar_max_points = 2500
radar_use_dims = [
    0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
    51, 52, 53, 54, 55, 56
]
radar_compensate_velocity = True
radar_filtering = 'none'
radar_voxel_size = [0.8, 0.8, 8]
radar_jitter = 0
radar_normalize = False
model = dict(
    type='BEVFusion',
    encoders=dict(
        camera=dict(
            neck=dict(
                type='GeneralizedLSSFPN',
                in_channels=[192, 384, 768],
                out_channels=256,
                start_level=0,
                num_outs=3,
                norm_cfg=dict(type='BN2d', requires_grad=True),
                act_cfg=dict(type='ReLU', inplace=True),
                upsample_cfg=dict(mode='bilinear', align_corners=False)),
            vtransform=dict(
                type='DepthLSSTransform',
                in_channels=256,
                out_channels=80,
                image_size=[256, 704],
                feature_size=[32, 88],
                xbound=[-54.0, 54.0, 0.3],
                ybound=[-54.0, 54.0, 0.3],
                zbound=[-10.0, 10.0, 20.0],
                dbound=[1.0, 60.0, 0.5],
                downsample=2),
            backbone=dict(
                type='MoENetwork',
                num_experts=4,
                in_channels=3,
                experts_cfg=[
                    dict(
                        type='SwinTransformer',
                        embed_dims=96,
                        depths=[2, 2, 6, 2],
                        num_heads=[3, 6, 12, 24],
                        window_size=7,
                        mlp_ratio=4,
                        qkv_bias=True,
                        qk_scale=None,
                        drop_rate=0.0,
                        attn_drop_rate=0.0,
                        drop_path_rate=0.2,
                        patch_norm=True,
                        out_indices=[1, 2, 3],
                        with_cp=False,
                        convert_weights=True,
                        init_cfg=dict(
                            type='Pretrained',
                            checkpoint=
                            'pretrained/swint-nuimages-pretrained.pth')),
                    dict(
                        type='ResNet',
                        depth=50,
                        num_stages=4,
                        out_indices=[1, 2, 3],
                        norm_cfg=dict(type='BN2d', requires_grad=True),
                        norm_eval=False,
                        init_cfg=dict(
                            type='Pretrained',
                            checkpoint='torchvision://resnet50')),
                    dict(
                        type='ResNet',
                        depth=101,
                        num_stages=4,
                        out_indices=[1, 2, 3],
                        norm_cfg=dict(type='BN2d', requires_grad=True),
                        norm_eval=False,
                        init_cfg=dict(
                            type='Pretrained',
                            checkpoint='torchvision://resnet101')),
                    dict(
                        type='PyramidVisionTransformer',
                        pretrain_img_size=[256, 704],
                        embed_dims=64,
                        num_stages=4,
                        drop_path_rate=0.1,
                        out_indices=[1, 2, 3],
                        sr_ratios=[4, 2, 1, 1],
                        convert_weights=True,
                        norm_cfg=dict(type='LN'),
                        init_cfg=dict(
                            type='Pretrained',
                            checkpoint='pretrained/pvt_v2_b5.pth'))
                ],
                router=dict(in_channels=3, num_experts=4))),
        lidar=dict(
            voxelize=dict(
                max_num_points=10,
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0],
                voxel_size=[0.075, 0.075, 0.2],
                max_voxels=[120000, 160000]),
            backbone=dict(
                type='SparseEncoder',
                in_channels=5,
                sparse_shape=[1440, 1440, 41],
                output_channels=128,
                order=['conv', 'norm', 'act'],
                encoder_channels=[[16, 16, 32], [32, 32, 64], [64, 64, 128],
                                  [128, 128]],
                encoder_paddings=[[0, 0, 1], [0, 0, 1], [0, 0, [1, 1, 0]],
                                  [0, 0]],
                block_type='basicblock'))),
    fuser=dict(type='ConvFuser', in_channels=[80, 256], out_channels=256),
    heads=dict(
        map=None,
        object=dict(
            type='TransFusionHead',
            num_proposals=200,
            auxiliary=True,
            in_channels=512,
            hidden_channel=128,
            num_classes=10,
            num_decoder_layers=1,
            num_heads=8,
            nms_kernel_size=3,
            ffn_channel=256,
            dropout=0.1,
            bn_momentum=0.1,
            activation='relu',
            train_cfg=dict(
                dataset='nuScenes',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0],
                grid_size=[1440, 1440, 41],
                voxel_size=[0.075, 0.075, 0.2],
                out_size_factor=8,
                gaussian_overlap=0.1,
                min_radius=2,
                pos_weight=-1,
                code_weights=[
                    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2
                ],
                assigner=dict(
                    type='HungarianAssigner3D',
                    iou_calculator=dict(
                        type='BboxOverlaps3D', coordinate='lidar'),
                    cls_cost=dict(
                        type='FocalLossCost',
                        gamma=2.0,
                        alpha=0.25,
                        weight=0.15),
                    reg_cost=dict(type='BBoxBEVL1Cost', weight=0.25),
                    iou_cost=dict(type='IoU3DCost', weight=0.25))),
            test_cfg=dict(
                dataset='nuScenes',
                grid_size=[1440, 1440, 41],
                out_size_factor=8,
                voxel_size=[0.075, 0.075],
                pc_range=[-54.0, -54.0],
                nms_type=None),
            common_heads=dict(
                center=[2, 2],
                height=[1, 2],
                dim=[3, 2],
                rot=[2, 2],
                vel=[2, 2]),
            bbox_coder=dict(
                type='TransFusionBBoxCoder',
                pc_range=[-54.0, -54.0],
                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
                score_threshold=0.0,
                out_size_factor=8,
                voxel_size=[0.075, 0.075],
                code_size=10),
            loss_cls=dict(
                type='FocalLoss',
                use_sigmoid=True,
                gamma=2.0,
                alpha=0.25,
                reduction='mean',
                loss_weight=1.0),
            loss_heatmap=dict(
                type='GaussianFocalLoss', reduction='mean', loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', reduction='mean',
                           loss_weight=0.25))),
    decoder=dict(
        backbone=dict(
            type='SECOND',
            in_channels=256,
            out_channels=[128, 256],
            layer_nums=[5, 5],
            layer_strides=[1, 2],
            norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
            conv_cfg=dict(type='Conv2d', bias=False)),
        neck=dict(
            type='SECONDFPN',
            in_channels=[128, 256],
            out_channels=[256, 256],
            upsample_strides=[1, 2],
            norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
            upsample_cfg=dict(type='deconv', bias=False),
            use_conv_for_no_stride=True)))
optimizer = dict(type='AdamW', lr=0.0002, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.33333333,
    min_lr_ratio=0.001)
momentum_config = dict(policy='cyclic')
run_dir = 'train_result/moe_4_experts_no_reshape_for_swint'

2025-04-28 04:31:38,603 - mmdet3d - INFO - Set random seed to 0, deterministic mode: False
2025-04-28 04:31:39,082 - mmdet3d - INFO - load 3068 pedestrian database infos
2025-04-28 04:31:39,082 - mmdet3d - INFO - load 4082 car database infos
2025-04-28 04:31:39,082 - mmdet3d - INFO - load 773 traffic_cone database infos
2025-04-28 04:31:39,082 - mmdet3d - INFO - load 147 bicycle database infos
2025-04-28 04:31:39,082 - mmdet3d - INFO - load 1851 barrier database infos
2025-04-28 04:31:39,082 - mmdet3d - INFO - load 451 truck database infos
2025-04-28 04:31:39,082 - mmdet3d - INFO - load 337 bus database infos
2025-04-28 04:31:39,082 - mmdet3d - INFO - load 174 construction_vehicle database infos
2025-04-28 04:31:39,083 - mmdet3d - INFO - load 57 movable_object.pushable_pullable database infos
2025-04-28 04:31:39,083 - mmdet3d - INFO - load 179 motorcycle database infos
2025-04-28 04:31:39,083 - mmdet3d - INFO - load 13 movable_object.debris database infos
2025-04-28 04:31:39,083 - mmdet3d - INFO - load 59 trailer database infos
2025-04-28 04:31:39,083 - mmdet3d - INFO - load 25 human.pedestrian.personal_mobility database infos
2025-04-28 04:31:39,101 - mmdet3d - INFO - After filter database:
2025-04-28 04:31:39,101 - mmdet3d - INFO - load 2395 pedestrian database infos
2025-04-28 04:31:39,101 - mmdet3d - INFO - load 2287 car database infos
2025-04-28 04:31:39,101 - mmdet3d - INFO - load 381 traffic_cone database infos
2025-04-28 04:31:39,102 - mmdet3d - INFO - load 108 bicycle database infos
2025-04-28 04:31:39,102 - mmdet3d - INFO - load 1442 barrier database infos
2025-04-28 04:31:39,102 - mmdet3d - INFO - load 381 truck database infos
2025-04-28 04:31:39,102 - mmdet3d - INFO - load 275 bus database infos
2025-04-28 04:31:39,102 - mmdet3d - INFO - load 155 construction_vehicle database infos
2025-04-28 04:31:39,102 - mmdet3d - INFO - load 57 movable_object.pushable_pullable database infos
2025-04-28 04:31:39,102 - mmdet3d - INFO - load 124 motorcycle database infos
2025-04-28 04:31:39,102 - mmdet3d - INFO - load 13 movable_object.debris database infos
2025-04-28 04:31:39,102 - mmdet3d - INFO - load 57 trailer database infos
2025-04-28 04:31:39,102 - mmdet3d - INFO - load 25 human.pedestrian.personal_mobility database infos
/opt/conda/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  /opt/conda/conda-bld/pytorch_1639180588308/work/aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
/opt/conda/lib/python3.8/site-packages/mmcv/runner/base_module.py:127: UserWarning: init_weights of MoENetwork has been called more than once.
  warnings.warn(f'init_weights of {self.__class__.__name__} has '
2025-04-28 04:31:40,386 - mmdet3d - INFO - Model:
BEVFusion(
  (encoders): ModuleDict(
    (camera): ModuleDict(
      (backbone): MoENetwork(
        (moe): MoE(
          (experts): ModuleList(
            (0): SwinTransformer(
              (patch_embed): PatchEmbed(
                (adap_padding): AdaptivePadding()
                (projection): Conv2d(3, 96, kernel_size=(4, 4), stride=(4, 4))
                (norm): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
              )
              (drop_after_pos): Dropout(p=0.0, inplace=False)
              (stages): ModuleList(
                (0): SwinBlockSequence(
                  (blocks): ModuleList(
                    (0): SwinBlock(
                      (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=96, out_features=288, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=96, out_features=96, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=96, out_features=384, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=384, out_features=96, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (1): SwinBlock(
                      (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=96, out_features=288, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=96, out_features=96, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=96, out_features=384, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=384, out_features=96, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                  )
                  (downsample): PatchMerging(
                    (adap_padding): AdaptivePadding()
                    (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
                    (norm): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                    (reduction): Linear(in_features=384, out_features=192, bias=False)
                  )
                )
                (1): SwinBlockSequence(
                  (blocks): ModuleList(
                    (0): SwinBlock(
                      (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=192, out_features=576, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=192, out_features=192, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=192, out_features=768, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=768, out_features=192, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (1): SwinBlock(
                      (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=192, out_features=576, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=192, out_features=192, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=192, out_features=768, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=768, out_features=192, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                  )
                  (downsample): PatchMerging(
                    (adap_padding): AdaptivePadding()
                    (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
                    (norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                    (reduction): Linear(in_features=768, out_features=384, bias=False)
                  )
                )
                (2): SwinBlockSequence(
                  (blocks): ModuleList(
                    (0): SwinBlock(
                      (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=384, out_features=1152, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=384, out_features=384, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=384, out_features=1536, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=1536, out_features=384, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (1): SwinBlock(
                      (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=384, out_features=1152, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=384, out_features=384, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=384, out_features=1536, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=1536, out_features=384, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (2): SwinBlock(
                      (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=384, out_features=1152, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=384, out_features=384, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=384, out_features=1536, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=1536, out_features=384, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (3): SwinBlock(
                      (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=384, out_features=1152, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=384, out_features=384, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=384, out_features=1536, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=1536, out_features=384, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (4): SwinBlock(
                      (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=384, out_features=1152, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=384, out_features=384, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=384, out_features=1536, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=1536, out_features=384, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (5): SwinBlock(
                      (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=384, out_features=1152, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=384, out_features=384, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=384, out_features=1536, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=1536, out_features=384, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                  )
                  (downsample): PatchMerging(
                    (adap_padding): AdaptivePadding()
                    (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
                    (norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
                    (reduction): Linear(in_features=1536, out_features=768, bias=False)
                  )
                )
                (3): SwinBlockSequence(
                  (blocks): ModuleList(
                    (0): SwinBlock(
                      (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=768, out_features=2304, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=768, out_features=768, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=768, out_features=3072, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=3072, out_features=768, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (1): SwinBlock(
                      (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                      (attn): ShiftWindowMSA(
                        (w_msa): WindowMSA(
                          (qkv): Linear(in_features=768, out_features=2304, bias=True)
                          (attn_drop): Dropout(p=0.0, inplace=False)
                          (proj): Linear(in_features=768, out_features=768, bias=True)
                          (proj_drop): Dropout(p=0.0, inplace=False)
                          (softmax): Softmax(dim=-1)
                        )
                        (drop): DropPath()
                      )
                      (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                      (ffn): FFN(
                        (activate): GELU()
                        (layers): Sequential(
                          (0): Sequential(
                            (0): Linear(in_features=768, out_features=3072, bias=True)
                            (1): GELU()
                            (2): Dropout(p=0.0, inplace=False)
                          )
                          (1): Linear(in_features=3072, out_features=768, bias=True)
                          (2): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                  )
                )
              )
              (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
              (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              (norm3): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            init_cfg={'type': 'Pretrained', 'checkpoint': 'pretrained/swint-nuimages-pretrained.pth'}
            (1): ResNet(
              (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
              (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (layer1): ResLayer(
                (0): Bottleneck(
                  (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
              (layer2): ResLayer(
                (0): Bottleneck(
                  (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (3): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
              (layer3): ResLayer(
                (0): Bottleneck(
                  (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (3): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (4): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (5): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
              (layer4): ResLayer(
                (0): Bottleneck(
                  (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
            )
            init_cfg={'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
            (2): ResNet(
              (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
              (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (layer1): ResLayer(
                (0): Bottleneck(
                  (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
              (layer2): ResLayer(
                (0): Bottleneck(
                  (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (3): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
              (layer3): ResLayer(
                (0): Bottleneck(
                  (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (3): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (4): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (5): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (6): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (7): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (8): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (9): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (10): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (11): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (12): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (13): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (14): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (15): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (16): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (17): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (18): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (19): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (20): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (21): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (22): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
              (layer4): ResLayer(
                (0): Bottleneck(
                  (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
            )
            init_cfg={'type': 'Pretrained', 'checkpoint': 'torchvision://resnet101'}
            (3): PyramidVisionTransformer(
              (layers): ModuleList(
                (0): ModuleList(
                  (0): PatchEmbed(
                    (projection): Conv2d(3, 64, kernel_size=(4, 4), stride=(4, 4))
                    (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleList(
                    (0): AbsolutePositionEmbedding(
                      (drop): Dropout(p=0.0, inplace=False)
                    )
                    (1): PVTEncoderLayer(
                      (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                        (sr): Conv2d(64, 64, kernel_size=(4, 4), stride=(4, 4))
                        (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      )
                      (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(64, 512, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (2): PVTEncoderLayer(
                      (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                        (sr): Conv2d(64, 64, kernel_size=(4, 4), stride=(4, 4))
                        (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      )
                      (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(64, 512, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (3): PVTEncoderLayer(
                      (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                        (sr): Conv2d(64, 64, kernel_size=(4, 4), stride=(4, 4))
                        (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      )
                      (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(64, 512, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                  )
                  (2): Identity()
                )
                (1): ModuleList(
                  (0): PatchEmbed(
                    (projection): Conv2d(64, 128, kernel_size=(2, 2), stride=(2, 2))
                    (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleList(
                    (0): AbsolutePositionEmbedding(
                      (drop): Dropout(p=0.0, inplace=False)
                    )
                    (1): PVTEncoderLayer(
                      (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                        (sr): Conv2d(128, 128, kernel_size=(2, 2), stride=(2, 2))
                        (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      )
                      (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(128, 1024, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (2): PVTEncoderLayer(
                      (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                        (sr): Conv2d(128, 128, kernel_size=(2, 2), stride=(2, 2))
                        (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      )
                      (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(128, 1024, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (3): PVTEncoderLayer(
                      (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                        (sr): Conv2d(128, 128, kernel_size=(2, 2), stride=(2, 2))
                        (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      )
                      (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(128, 1024, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (4): PVTEncoderLayer(
                      (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                        (sr): Conv2d(128, 128, kernel_size=(2, 2), stride=(2, 2))
                        (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      )
                      (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(128, 1024, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                  )
                  (2): Identity()
                )
                (2): ModuleList(
                  (0): PatchEmbed(
                    (projection): Conv2d(128, 320, kernel_size=(2, 2), stride=(2, 2))
                    (norm): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleList(
                    (0): AbsolutePositionEmbedding(
                      (drop): Dropout(p=0.0, inplace=False)
                    )
                    (1): PVTEncoderLayer(
                      (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (2): PVTEncoderLayer(
                      (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (3): PVTEncoderLayer(
                      (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (4): PVTEncoderLayer(
                      (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (5): PVTEncoderLayer(
                      (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (6): PVTEncoderLayer(
                      (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                  )
                  (2): Identity()
                )
                (3): ModuleList(
                  (0): PatchEmbed(
                    (projection): Conv2d(320, 512, kernel_size=(2, 2), stride=(2, 2))
                    (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleList(
                    (0): AbsolutePositionEmbedding(
                      (drop): Dropout(p=0.0, inplace=False)
                    )
                    (1): PVTEncoderLayer(
                      (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (2): PVTEncoderLayer(
                      (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                    (3): PVTEncoderLayer(
                      (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                      (attn): SpatialReductionAttention(
                        (attn): MultiheadAttention(
                          (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                        )
                        (proj_drop): Dropout(p=0.0, inplace=False)
                        (dropout_layer): DropPath()
                      )
                      (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                      (ffn): MixFFN(
                        (layers): Sequential(
                          (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))
                          (1): GELU()
                          (2): Dropout(p=0.0, inplace=False)
                          (3): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))
                          (4): Dropout(p=0.0, inplace=False)
                        )
                        (dropout_layer): DropPath()
                      )
                    )
                  )
                  (2): Identity()
                )
              )
            )
            init_cfg={'type': 'Pretrained', 'checkpoint': 'pretrained/pvt_v2_b5.pth'}
          )
          (router): MLPRouter(
            (conv): Conv2d(3, 512, kernel_size=(3, 3), stride=(1, 1))
            (pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Linear(in_features=512, out_features=4, bias=True)
          )
          (conv_resnet_1): Conv2d(512, 192, kernel_size=(1, 1), stride=(1, 1))
          (conv_resnet_2): Conv2d(1024, 384, kernel_size=(1, 1), stride=(1, 1))
          (conv_resnet_3): Conv2d(2048, 768, kernel_size=(1, 1), stride=(1, 1))
          (conv_pvt_1): Conv2d(128, 192, kernel_size=(1, 1), stride=(1, 1))
          (conv_pvt_2): Conv2d(320, 384, kernel_size=(1, 1), stride=(1, 1))
          (conv_pvt_3): Conv2d(512, 768, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (neck): GeneralizedLSSFPN(
        (lateral_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(448, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(1152, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
        (fpn_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
      )
      (vtransform): DepthLSSTransform(
        (dtransform): Sequential(
          (0): Conv2d(1, 8, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(8, 32, kernel_size=(5, 5), stride=(4, 4), padding=(2, 2))
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(32, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
        (depthnet): Sequential(
          (0): Conv2d(320, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 198, kernel_size=(1, 1), stride=(1, 1))
        )
        (downsample): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (4): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
      )
    )
    (lidar): ModuleDict(
      (voxelize): Voxelization(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0], max_num_points=10, max_voxels=(120000, 160000), deterministic=True)
      (backbone): SparseEncoder(
        (conv_input): SparseSequential(
          (0): SubMConv3d()
          (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (encoder_layers): SparseSequential(
          (encoder_layer1): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer2): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer3): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer4): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
          )
        )
        (conv_out): SparseSequential(
          (0): SparseConv3d()
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (fuser): ConvFuser(
    (0): Conv2d(336, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (decoder): ModuleDict(
    (backbone): SECOND(
      (blocks): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
          (9): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (10): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (11): ReLU(inplace=True)
          (12): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (13): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (14): ReLU(inplace=True)
          (15): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (16): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (17): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (10): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (11): ReLU(inplace=True)
          (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (13): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (14): ReLU(inplace=True)
          (15): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (16): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (17): ReLU(inplace=True)
        )
      )
    )
    init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
    (neck): SECONDFPN(
      (deblocks): ModuleList(
        (0): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
    init_cfg=[{'type': 'Kaiming', 'layer': 'ConvTranspose2d'}, {'type': 'Constant', 'layer': 'NaiveSyncBatchNorm2d', 'val': 1.0}]
  )
  (heads): ModuleDict(
    (object): TransFusionHead(
      (loss_cls): FocalLoss()
      (loss_bbox): L1Loss()
      (loss_iou): VarifocalLoss()
      (loss_heatmap): GaussianFocalLoss()
      (shared_conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (heatmap_head): Sequential(
        (0): ConvModule(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (1): Conv2d(128, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (class_encoding): Conv1d(10, 128, kernel_size=(1,), stride=(1,))
      (decoder): ModuleList(
        (0): TransformerDecoderLayer(
          (self_attn): MultiheadAttention(
            (out_proj): Linear(in_features=128, out_features=128, bias=True)
          )
          (multihead_attn): MultiheadAttention(
            (out_proj): Linear(in_features=128, out_features=128, bias=True)
          )
          (linear1): Linear(in_features=128, out_features=256, bias=True)
          (dropout): Dropout(p=0.1, inplace=False)
          (linear2): Linear(in_features=256, out_features=128, bias=True)
          (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (norm3): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (dropout1): Dropout(p=0.1, inplace=False)
          (dropout2): Dropout(p=0.1, inplace=False)
          (dropout3): Dropout(p=0.1, inplace=False)
          (self_posembed): PositionEmbeddingLearned(
            (position_embedding_head): Sequential(
              (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
            )
          )
          (cross_posembed): PositionEmbeddingLearned(
            (position_embedding_head): Sequential(
              (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
            )
          )
        )
      )
      (prediction_heads): ModuleList(
        (0): FFN(
          (center): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 1, kernel_size=(1,), stride=(1,))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 3, kernel_size=(1,), stride=(1,))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 10, kernel_size=(1,), stride=(1,))
          )
        )
      )
    )
  )
)
2025-04-28 04:31:47,005 - mmdet3d - INFO - Start running, host: root@1cf78a6d245c, work_dir: /bevfusion/train_result/moe_4_experts_no_reshape_for_swint
2025-04-28 04:31:47,005 - mmdet3d - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2025-04-28 04:31:47,005 - mmdet3d - INFO - workflow: [('train', 1)], max: 6 epochs
2025-04-28 04:31:47,010 - mmdet3d - INFO - Checkpoints will be saved to /bevfusion/train_result/moe_4_experts_no_reshape_for_swint by HardDiskBackend.
/opt/conda/lib/python3.8/site-packages/torch/nn/functional.py:3631: UserWarning: Default upsampling behavior when mode=bilinear is changed to align_corners=False since 0.4.0. Please specify align_corners=True if the old behavior is desired. See the documentation of nn.Upsample for details.
  warnings.warn(
2025-04-28 04:31:55,160 - mmcv - INFO - Reducer buckets have been rebuilt in this iteration.
2025-04-28 04:32:35,019 - mmdet3d - INFO - Epoch [1][50/815]	lr: 7.973e-05, eta: 1:17:01, time: 0.955, data_time: 0.071, memory: 13363, loss/object/loss_heatmap: 1136.7149, loss/object/layer_-1_loss_cls: 11.5330, loss/object/layer_-1_loss_bbox: 11.1163, stats/object/matched_ious: 0.0064, loss: 1159.3642, grad_norm: nan
2025-04-28 04:33:16,490 - mmdet3d - INFO - Epoch [1][100/815]	lr: 9.307e-05, eta: 1:11:13, time: 0.829, data_time: 0.010, memory: 13371, loss/object/loss_heatmap: 14.4949, loss/object/layer_-1_loss_cls: 9.3398, loss/object/layer_-1_loss_bbox: 9.6507, stats/object/matched_ious: 0.0084, loss: 33.4855, grad_norm: 198.5276
2025-04-28 04:33:57,961 - mmdet3d - INFO - Epoch [1][150/815]	lr: 1.064e-04, eta: 1:08:49, time: 0.829, data_time: 0.009, memory: 13371, loss/object/loss_heatmap: 3.1670, loss/object/layer_-1_loss_cls: 5.2811, loss/object/layer_-1_loss_bbox: 6.7311, stats/object/matched_ious: 0.0189, loss: 15.1792, grad_norm: 24.7653
2025-04-28 04:34:39,151 - mmdet3d - INFO - Epoch [1][200/815]	lr: 1.197e-04, eta: 1:07:10, time: 0.824, data_time: 0.010, memory: 13371, loss/object/loss_heatmap: 3.0932, loss/object/layer_-1_loss_cls: 4.5898, loss/object/layer_-1_loss_bbox: 6.1085, stats/object/matched_ious: 0.0308, loss: 13.7914, grad_norm: 26.5626
2025-04-28 04:35:20,545 - mmdet3d - INFO - Epoch [1][250/815]	lr: 1.331e-04, eta: 1:05:58, time: 0.828, data_time: 0.010, memory: 13372, loss/object/loss_heatmap: 2.9338, loss/object/layer_-1_loss_cls: 2.6707, loss/object/layer_-1_loss_bbox: 6.0877, stats/object/matched_ious: 0.0384, loss: 11.6923, grad_norm: 18.4340
2025-04-28 04:36:01,772 - mmdet3d - INFO - Epoch [1][300/815]	lr: 1.464e-04, eta: 1:04:53, time: 0.825, data_time: 0.010, memory: 13372, loss/object/loss_heatmap: 2.9899, loss/object/layer_-1_loss_cls: 2.0568, loss/object/layer_-1_loss_bbox: 5.6251, stats/object/matched_ious: 0.0308, loss: 10.6718, grad_norm: 24.1955
2025-04-28 04:36:43,065 - mmdet3d - INFO - Epoch [1][350/815]	lr: 1.597e-04, eta: 1:03:56, time: 0.826, data_time: 0.009, memory: 13372, loss/object/loss_heatmap: 2.9030, loss/object/layer_-1_loss_cls: 1.5354, loss/object/layer_-1_loss_bbox: 4.2825, stats/object/matched_ious: 0.0396, loss: 8.7210, grad_norm: 26.9934
2025-04-28 04:37:24,388 - mmdet3d - INFO - Epoch [1][400/815]	lr: 1.731e-04, eta: 1:03:04, time: 0.826, data_time: 0.010, memory: 13372, loss/object/loss_heatmap: 2.8700, loss/object/layer_-1_loss_cls: 1.3233, loss/object/layer_-1_loss_bbox: 4.9059, stats/object/matched_ious: 0.0437, loss: 9.0992, grad_norm: 12.7799
2025-04-28 04:38:05,680 - mmdet3d - INFO - Epoch [1][450/815]	lr: 1.864e-04, eta: 1:02:13, time: 0.826, data_time: 0.010, memory: 13372, loss/object/loss_heatmap: 2.6533, loss/object/layer_-1_loss_cls: 0.9845, loss/object/layer_-1_loss_bbox: 4.8859, stats/object/matched_ious: 0.0507, loss: 8.5237, grad_norm: 9.9320
2025-04-28 04:38:47,088 - mmdet3d - INFO - Epoch [1][500/815]	lr: 1.997e-04, eta: 1:01:25, time: 0.828, data_time: 0.010, memory: 13372, loss/object/loss_heatmap: 2.6766, loss/object/layer_-1_loss_cls: 0.8249, loss/object/layer_-1_loss_bbox: 4.0636, stats/object/matched_ious: 0.0541, loss: 7.5652, grad_norm: 10.9234
2025-04-28 04:39:28,370 - mmdet3d - INFO - Epoch [1][550/815]	lr: 2.000e-04, eta: 1:00:38, time: 0.826, data_time: 0.010, memory: 13372, loss/object/loss_heatmap: 2.7056, loss/object/layer_-1_loss_cls: 0.8232, loss/object/layer_-1_loss_bbox: 3.6442, stats/object/matched_ious: 0.0609, loss: 7.1730, grad_norm: 13.1241
2025-04-28 04:40:09,604 - mmdet3d - INFO - Epoch [1][600/815]	lr: 2.000e-04, eta: 0:59:51, time: 0.825, data_time: 0.010, memory: 13372, loss/object/loss_heatmap: 2.5263, loss/object/layer_-1_loss_cls: 0.6634, loss/object/layer_-1_loss_bbox: 3.2869, stats/object/matched_ious: 0.0632, loss: 6.4767, grad_norm: 10.2949
2025-04-28 04:40:50,934 - mmdet3d - INFO - Epoch [1][650/815]	lr: 2.000e-04, eta: 0:59:06, time: 0.827, data_time: 0.010, memory: 13372, loss/object/loss_heatmap: 2.4339, loss/object/layer_-1_loss_cls: 0.5895, loss/object/layer_-1_loss_bbox: 2.9689, stats/object/matched_ious: 0.0685, loss: 5.9923, grad_norm: 9.3885
2025-04-28 04:41:32,271 - mmdet3d - INFO - Epoch [1][700/815]	lr: 2.000e-04, eta: 0:58:21, time: 0.827, data_time: 0.010, memory: 13372, loss/object/loss_heatmap: 2.3549, loss/object/layer_-1_loss_cls: 0.5751, loss/object/layer_-1_loss_bbox: 3.2318, stats/object/matched_ious: 0.0650, loss: 6.1619, grad_norm: 8.5922
2025-04-28 04:42:13,584 - mmdet3d - INFO - Epoch [1][750/815]	lr: 2.000e-04, eta: 0:57:37, time: 0.826, data_time: 0.010, memory: 13372, loss/object/loss_heatmap: 2.3852, loss/object/layer_-1_loss_cls: 0.5906, loss/object/layer_-1_loss_bbox: 3.4345, stats/object/matched_ious: 0.0703, loss: 6.4103, grad_norm: 10.3202
2025-04-28 04:42:54,754 - mmdet3d - INFO - Epoch [1][800/815]	lr: 2.000e-04, eta: 0:56:52, time: 0.823, data_time: 0.010, memory: 13373, loss/object/loss_heatmap: 2.3993, loss/object/layer_-1_loss_cls: 0.5808, loss/object/layer_-1_loss_bbox: 3.2888, stats/object/matched_ious: 0.0680, loss: 6.2689, grad_norm: 10.7780
2025-04-28 04:43:07,418 - mmdet3d - INFO - Saving checkpoint at 1 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 3s, ETA:   261s[  ] 2/81, 0.6 task/s, elapsed: 3s, ETA:   129s/bevfusion/mmdet3d/core/bbox/coders/transfusion_bbox_coder.py:96: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.post_center_range = torch.tensor(
[  ] 3/81, 0.9 task/s, elapsed: 4s, ETA:    91s[  ] 4/81, 1.1 task/s, elapsed: 4s, ETA:    68s[  ] 5/81, 1.3 task/s, elapsed: 4s, ETA:    57s[  ] 6/81, 1.6 task/s, elapsed: 4s, ETA:    47s[  ] 7/81, 1.7 task/s, elapsed: 4s, ETA:    43s[  ] 8/81, 2.0 task/s, elapsed: 4s, ETA:    37s[  ] 9/81, 2.1 task/s, elapsed: 4s, ETA:    34s[  ] 10/81, 2.3 task/s, elapsed: 4s, ETA:    31s[  ] 11/81, 2.2 task/s, elapsed: 5s, ETA:    31s[  ] 12/81, 2.5 task/s, elapsed: 5s, ETA:    28s[  ] 13/81, 2.5 task/s, elapsed: 5s, ETA:    27s[  ] 14/81, 2.7 task/s, elapsed: 5s, ETA:    25s[  ] 15/81, 2.8 task/s, elapsed: 5s, ETA:    24s[  ] 16/81, 2.9 task/s, elapsed: 5s, ETA:    22s[  ] 17/81, 3.0 task/s, elapsed: 6s, ETA:    22s[  ] 18/81, 3.1 task/s, elapsed: 6s, ETA:    20s[  ] 19/81, 2.9 task/s, elapsed: 6s, ETA:    21s[  ] 20/81, 3.1 task/s, elapsed: 6s, ETA:    20s[  ] 21/81, 3.1 task/s, elapsed: 7s, ETA:    19s[  ] 22/81, 3.3 task/s, elapsed: 7s, ETA:    18s[  ] 23/81, 3.3 task/s, elapsed: 7s, ETA:    18s[  ] 24/81, 3.4 task/s, elapsed: 7s, ETA:    17s[  ] 25/81, 3.4 task/s, elapsed: 7s, ETA:    16s[  ] 26/81, 3.5 task/s, elapsed: 7s, ETA:    15s[  ] 27/81, 3.3 task/s, elapsed: 8s, ETA:    16s[  ] 28/81, 3.5 task/s, elapsed: 8s, ETA:    15s[  ] 29/81, 3.5 task/s, elapsed: 8s, ETA:    15s[  ] 30/81, 3.6 task/s, elapsed: 8s, ETA:    14s[  ] 31/81, 3.6 task/s, elapsed: 9s, ETA:    14s[  ] 32/81, 3.7 task/s, elapsed: 9s, ETA:    13s[  ] 33/81, 3.7 task/s, elapsed: 9s, ETA:    13s[  ] 34/81, 3.8 task/s, elapsed: 9s, ETA:    12s[  ] 35/81, 3.6 task/s, elapsed: 10s, ETA:    13s[  ] 36/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 37/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 38/81, 3.8 task/s, elapsed: 10s, ETA:    11s[  ] 39/81, 3.8 task/s, elapsed: 10s, ETA:    11s[  ] 40/81, 3.9 task/s, elapsed: 10s, ETA:    10s[> ] 41/81, 3.9 task/s, elapsed: 10s, ETA:    10s[> ] 42/81, 4.0 task/s, elapsed: 10s, ETA:    10s[> ] 43/81, 3.8 task/s, elapsed: 11s, ETA:    10s[> ] 44/81, 3.9 task/s, elapsed: 11s, ETA:     9s[> ] 45/81, 3.9 task/s, elapsed: 12s, ETA:     9s[> ] 46/81, 4.0 task/s, elapsed: 12s, ETA:     9s[> ] 47/81, 4.0 task/s, elapsed: 12s, ETA:     9s[> ] 48/81, 4.1 task/s, elapsed: 12s, ETA:     8s[> ] 49/81, 4.1 task/s, elapsed: 12s, ETA:     8s[> ] 50/81, 4.1 task/s, elapsed: 12s, ETA:     7s[> ] 51/81, 4.0 task/s, elapsed: 13s, ETA:     8s[> ] 52/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 53/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 54/81, 4.1 task/s, elapsed: 13s, ETA:     7s[> ] 55/81, 4.1 task/s, elapsed: 13s, ETA:     6s[> ] 56/81, 4.2 task/s, elapsed: 13s, ETA:     6s[> ] 57/81, 4.2 task/s, elapsed: 14s, ETA:     6s[> ] 58/81, 4.2 task/s, elapsed: 14s, ETA:     5s[> ] 59/81, 4.2 task/s, elapsed: 14s, ETA:     5s[> ] 60/81, 4.3 task/s, elapsed: 14s, ETA:     5s[> ] 61/81, 4.2 task/s, elapsed: 14s, ETA:     5s[> ] 62/81, 4.3 task/s, elapsed: 14s, ETA:     4s[> ] 63/81, 4.3 task/s, elapsed: 15s, ETA:     4s[> ] 64/81, 4.3 task/s, elapsed: 15s, ETA:     4s[> ] 65/81, 4.3 task/s, elapsed: 15s, ETA:     4s[> ] 66/81, 4.4 task/s, elapsed: 15s, ETA:     3s[> ] 67/81, 4.4 task/s, elapsed: 15s, ETA:     3s[> ] 68/81, 4.5 task/s, elapsed: 15s, ETA:     3s[> ] 69/81, 4.4 task/s, elapsed: 16s, ETA:     3s[> ] 70/81, 4.5 task/s, elapsed: 16s, ETA:     2s[> ] 71/81, 4.4 task/s, elapsed: 16s, ETA:     2s[> ] 72/81, 4.5 task/s, elapsed: 16s, ETA:     2s[> ] 73/81, 4.5 task/s, elapsed: 16s, ETA:     2s[> ] 74/81, 4.5 task/s, elapsed: 16s, ETA:     2s[> ] 75/81, 4.5 task/s, elapsed: 17s, ETA:     1s[> ] 76/81, 4.6 task/s, elapsed: 17s, ETA:     1s[> ] 77/81, 4.6 task/s, elapsed: 17s, ETA:     1s[> ] 78/81, 4.6 task/s, elapsed: 17s, ETA:     1s[> ] 79/81, 4.6 task/s, elapsed: 17s, ETA:     0s[> ] 80/81, 4.7 task/s, elapsed: 17s, ETA:     0s[>>] 81/81, 4.6 task/s, elapsed: 18s, ETA:     0s[>>] 82/81, 4.6 task/s, elapsed: 18s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 32.8 task/s, elapsed: 0s, ETA:     2s[  ] 2/81, 33.2 task/s, elapsed: 0s, ETA:     2s[  ] 3/81, 33.7 task/s, elapsed: 0s, ETA:     2s[  ] 4/81, 33.8 task/s, elapsed: 0s, ETA:     2s[  ] 5/81, 33.8 task/s, elapsed: 0s, ETA:     2s[  ] 6/81, 33.8 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 33.9 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 34.0 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 34.0 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 33.9 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 33.9 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 34.0 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 34.0 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 34.1 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 34.0 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 34.0 task/s, elapsed: 0s, ETA:     2s[  ] 17/81, 34.0 task/s, elapsed: 0s, ETA:     2s[  ] 18/81, 34.0 task/s, elapsed: 1s, ETA:     2s[  ] 19/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 20/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 21/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 22/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 23/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 24/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 25/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 26/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 27/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 28/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 29/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 30/81, 34.1 task/s, elapsed: 1s, ETA:     1s[  ] 31/81, 34.1 task/s, elapsed: 1s, ETA:     1s[  ] 32/81, 34.0 task/s, elapsed: 1s, ETA:     1s[  ] 33/81, 34.0 task/s, elapsed: 1s, ETA:     1s[  ] 34/81, 34.0 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 34.0 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 34.0 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 34.0 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 34.0 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 34.0 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 34.0 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 34.0 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 34.0 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 34.0 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 34.0 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 34.0 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 34.0 task/s, elapsed: 1s, ETA:     1s[> ] 47/81, 34.0 task/s, elapsed: 1s, ETA:     1s[> ] 48/81, 34.0 task/s, elapsed: 1s, ETA:     1s[> ] 49/81, 34.1 task/s, elapsed: 1s, ETA:     1s[> ] 50/81, 34.0 task/s, elapsed: 1s, ETA:     1s[> ] 51/81, 34.0 task/s, elapsed: 1s, ETA:     1s[> ] 52/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 53/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 54/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 55/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 56/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 57/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 58/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 59/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 60/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 61/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 62/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 63/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 64/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 65/81, 34.0 task/s, elapsed: 2s, ETA:     0s[> ] 66/81, 33.9 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 33.9 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 33.9 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 33.9 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 33.9 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 33.8 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 33.8 task/s, elapsed: 2s, ETA:     0s[> ] 73/81, 33.8 task/s, elapsed: 2s, ETA:     0s[> ] 74/81, 33.7 task/s, elapsed: 2s, ETA:     0s[> ] 75/81, 33.7 task/s, elapsed: 2s, ETA:     0s[> ] 76/81, 33.6 task/s, elapsed: 2s, ETA:     0s[> ] 77/81, 33.5 task/s, elapsed: 2s, ETA:     0s[> ] 78/81, 32.4 task/s, elapsed: 2s, ETA:     0s[> ] 79/81, 32.4 task/s, elapsed: 2s, ETA:     0s[> ] 80/81, 32.4 task/s, elapsed: 2s, ETA:     0s[>>] 81/81, 32.5 task/s, elapsed: 2s, ETA:     0s
Results writes to /tmp/tmpgo5h8ye5/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7f2857feceb0>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 54% 44/81 [00:00<00:00, 437.97it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0129
mATE: 1.0024
mASE: 0.9393
mAOE: 1.1022
mAVE: 0.9435
mAAE: 0.8818
NDS: 0.0300
Eval time: 3.3s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.117 	1.017 	0.686 	1.420 	0.519 	0.186 
truck               	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bus                 	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.013 	0.835 	0.740 	1.499 	1.028 	0.868 
motorcycle          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.000 	1.172 	0.968 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-28 04:43:39,470 - mmdet3d - INFO - Epoch(val) [1][41]	object/car_ap_dist_0.5: 0.0000, object/car_ap_dist_1.0: 0.0297, object/car_ap_dist_2.0: 0.1817, object/car_ap_dist_4.0: 0.2549, object/car_trans_err: 1.0168, object/car_scale_err: 0.6857, object/car_orient_err: 1.4203, object/car_vel_err: 0.5194, object/car_attr_err: 0.1862, object/mATE: 1.0024, object/mASE: 0.9393, object/mAOE: 1.1022, object/mAVE: 0.9435, object/mAAE: 0.8818, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0000, object/truck_ap_dist_2.0: 0.0000, object/truck_ap_dist_4.0: 0.0000, object/truck_trans_err: 1.0000, object/truck_scale_err: 1.0000, object/truck_orient_err: 1.0000, object/truck_vel_err: 1.0000, object/truck_attr_err: 1.0000, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0000, object/bus_ap_dist_4.0: 0.0000, object/bus_trans_err: 1.0000, object/bus_scale_err: 1.0000, object/bus_orient_err: 1.0000, object/bus_vel_err: 1.0000, object/bus_attr_err: 1.0000, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 1.0000, object/motorcycle_scale_err: 1.0000, object/motorcycle_orient_err: 1.0000, object/motorcycle_vel_err: 1.0000, object/motorcycle_attr_err: 1.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0000, object/pedestrian_ap_dist_1.0: 0.0004, object/pedestrian_ap_dist_2.0: 0.0074, object/pedestrian_ap_dist_4.0: 0.0424, object/pedestrian_trans_err: 0.8346, object/pedestrian_scale_err: 0.7401, object/pedestrian_orient_err: 1.4993, object/pedestrian_vel_err: 1.0283, object/pedestrian_attr_err: 0.8683, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0000, object/traffic_cone_ap_dist_2.0: 0.0000, object/traffic_cone_ap_dist_4.0: 0.0000, object/traffic_cone_trans_err: 1.1721, object/traffic_cone_scale_err: 0.9675, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.0300, object/map: 0.0129
2025-04-28 04:44:23,511 - mmdet3d - INFO - Epoch [2][50/815]	lr: 1.866e-04, eta: 0:55:10, time: 0.880, data_time: 0.067, memory: 13373, loss/object/loss_heatmap: 2.2678, loss/object/layer_-1_loss_cls: 0.5139, loss/object/layer_-1_loss_bbox: 3.1564, stats/object/matched_ious: 0.0759, loss: 5.9381, grad_norm: 9.7400
2025-04-28 04:45:04,647 - mmdet3d - INFO - Epoch [2][100/815]	lr: 1.866e-04, eta: 0:54:29, time: 0.823, data_time: 0.010, memory: 13373, loss/object/loss_heatmap: 2.2922, loss/object/layer_-1_loss_cls: 0.5243, loss/object/layer_-1_loss_bbox: 3.0810, stats/object/matched_ious: 0.0730, loss: 5.8975, grad_norm: 9.6932
2025-04-28 04:45:45,972 - mmdet3d - INFO - Epoch [2][150/815]	lr: 1.866e-04, eta: 0:53:49, time: 0.826, data_time: 0.010, memory: 13373, loss/object/loss_heatmap: 2.2634, loss/object/layer_-1_loss_cls: 0.5041, loss/object/layer_-1_loss_bbox: 3.1261, stats/object/matched_ious: 0.0788, loss: 5.8935, grad_norm: 9.9972
2025-04-28 04:46:27,293 - mmdet3d - INFO - Epoch [2][200/815]	lr: 1.866e-04, eta: 0:53:08, time: 0.826, data_time: 0.010, memory: 13373, loss/object/loss_heatmap: 2.1856, loss/object/layer_-1_loss_cls: 0.4766, loss/object/layer_-1_loss_bbox: 3.1152, stats/object/matched_ious: 0.0786, loss: 5.7774, grad_norm: 8.1896
2025-04-28 04:47:08,573 - mmdet3d - INFO - Epoch [2][250/815]	lr: 1.866e-04, eta: 0:52:28, time: 0.826, data_time: 0.010, memory: 13373, loss/object/loss_heatmap: 2.1410, loss/object/layer_-1_loss_cls: 0.5000, loss/object/layer_-1_loss_bbox: 2.9172, stats/object/matched_ious: 0.0892, loss: 5.5583, grad_norm: 9.9359
2025-04-28 04:47:49,688 - mmdet3d - INFO - Epoch [2][300/815]	lr: 1.866e-04, eta: 0:51:46, time: 0.822, data_time: 0.010, memory: 13373, loss/object/loss_heatmap: 2.1016, loss/object/layer_-1_loss_cls: 0.4845, loss/object/layer_-1_loss_bbox: 2.9033, stats/object/matched_ious: 0.0944, loss: 5.4895, grad_norm: 9.0278
2025-04-28 04:48:31,214 - mmdet3d - INFO - Epoch [2][350/815]	lr: 1.866e-04, eta: 0:51:06, time: 0.830, data_time: 0.010, memory: 13373, loss/object/loss_heatmap: 2.0550, loss/object/layer_-1_loss_cls: 0.4555, loss/object/layer_-1_loss_bbox: 2.8881, stats/object/matched_ious: 0.0852, loss: 5.3986, grad_norm: 9.1260
2025-04-28 04:49:12,342 - mmdet3d - INFO - Epoch [2][400/815]	lr: 1.866e-04, eta: 0:50:25, time: 0.823, data_time: 0.010, memory: 13373, loss/object/loss_heatmap: 2.0741, loss/object/layer_-1_loss_cls: 0.4560, loss/object/layer_-1_loss_bbox: 2.8486, stats/object/matched_ious: 0.0890, loss: 5.3787, grad_norm: 8.8010
2025-04-28 04:49:53,460 - mmdet3d - INFO - Epoch [2][450/815]	lr: 1.866e-04, eta: 0:49:44, time: 0.822, data_time: 0.010, memory: 13373, loss/object/loss_heatmap: 1.9846, loss/object/layer_-1_loss_cls: 0.4660, loss/object/layer_-1_loss_bbox: 2.6602, stats/object/matched_ious: 0.1022, loss: 5.1108, grad_norm: 7.8085
2025-04-28 04:50:34,802 - mmdet3d - INFO - Epoch [2][500/815]	lr: 1.866e-04, eta: 0:49:03, time: 0.827, data_time: 0.010, memory: 13373, loss/object/loss_heatmap: 1.9639, loss/object/layer_-1_loss_cls: 0.4492, loss/object/layer_-1_loss_bbox: 2.8167, stats/object/matched_ious: 0.1097, loss: 5.2298, grad_norm: 8.7255
2025-04-28 04:51:15,991 - mmdet3d - INFO - Epoch [2][550/815]	lr: 1.866e-04, eta: 0:48:22, time: 0.824, data_time: 0.010, memory: 13373, loss/object/loss_heatmap: 1.9805, loss/object/layer_-1_loss_cls: 0.4315, loss/object/layer_-1_loss_bbox: 2.6792, stats/object/matched_ious: 0.1063, loss: 5.0912, grad_norm: 8.8578
2025-04-28 04:51:57,213 - mmdet3d - INFO - Epoch [2][600/815]	lr: 1.866e-04, eta: 0:47:41, time: 0.824, data_time: 0.010, memory: 13373, loss/object/loss_heatmap: 1.8508, loss/object/layer_-1_loss_cls: 0.4135, loss/object/layer_-1_loss_bbox: 2.6373, stats/object/matched_ious: 0.1103, loss: 4.9017, grad_norm: 8.5784
2025-04-28 04:52:38,804 - mmdet3d - INFO - Epoch [2][650/815]	lr: 1.866e-04, eta: 0:47:01, time: 0.832, data_time: 0.010, memory: 13373, loss/object/loss_heatmap: 1.8925, loss/object/layer_-1_loss_cls: 0.4339, loss/object/layer_-1_loss_bbox: 2.6549, stats/object/matched_ious: 0.1089, loss: 4.9813, grad_norm: 8.2483
2025-04-28 04:53:20,120 - mmdet3d - INFO - Epoch [2][700/815]	lr: 1.866e-04, eta: 0:46:20, time: 0.826, data_time: 0.010, memory: 13373, loss/object/loss_heatmap: 1.9582, loss/object/layer_-1_loss_cls: 0.4197, loss/object/layer_-1_loss_bbox: 2.8507, stats/object/matched_ious: 0.1156, loss: 5.2286, grad_norm: 9.1756
2025-04-28 04:54:01,291 - mmdet3d - INFO - Epoch [2][750/815]	lr: 1.866e-04, eta: 0:45:39, time: 0.823, data_time: 0.010, memory: 13373, loss/object/loss_heatmap: 1.9216, loss/object/layer_-1_loss_cls: 0.4125, loss/object/layer_-1_loss_bbox: 2.4095, stats/object/matched_ious: 0.1279, loss: 4.7437, grad_norm: 9.3007
2025-04-28 04:54:42,551 - mmdet3d - INFO - Epoch [2][800/815]	lr: 1.866e-04, eta: 0:44:58, time: 0.825, data_time: 0.010, memory: 13373, loss/object/loss_heatmap: 1.8575, loss/object/layer_-1_loss_cls: 0.4036, loss/object/layer_-1_loss_bbox: 2.6157, stats/object/matched_ious: 0.1313, loss: 4.8768, grad_norm: 8.1366
2025-04-28 04:54:54,811 - mmdet3d - INFO - Saving checkpoint at 2 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 3s, ETA:   254s[  ] 2/81, 0.6 task/s, elapsed: 3s, ETA:   125s[  ] 3/81, 0.9 task/s, elapsed: 3s, ETA:    89s[  ] 4/81, 1.2 task/s, elapsed: 3s, ETA:    66s[  ] 5/81, 1.2 task/s, elapsed: 4s, ETA:    63s[  ] 6/81, 1.4 task/s, elapsed: 4s, ETA:    52s[  ] 7/81, 1.6 task/s, elapsed: 4s, ETA:    47s[  ] 8/81, 1.8 task/s, elapsed: 4s, ETA:    40s[  ] 9/81, 1.9 task/s, elapsed: 5s, ETA:    38s[  ] 10/81, 2.1 task/s, elapsed: 5s, ETA:    33s[  ] 11/81, 2.2 task/s, elapsed: 5s, ETA:    32s[  ] 12/81, 2.4 task/s, elapsed: 5s, ETA:    29s[  ] 13/81, 2.3 task/s, elapsed: 6s, ETA:    30s[  ] 14/81, 2.4 task/s, elapsed: 6s, ETA:    27s[  ] 15/81, 2.5 task/s, elapsed: 6s, ETA:    26s[  ] 16/81, 2.7 task/s, elapsed: 6s, ETA:    24s[  ] 17/81, 2.7 task/s, elapsed: 6s, ETA:    24s[  ] 18/81, 2.9 task/s, elapsed: 6s, ETA:    22s[  ] 19/81, 2.9 task/s, elapsed: 7s, ETA:    21s[  ] 20/81, 3.0 task/s, elapsed: 7s, ETA:    20s[  ] 21/81, 2.9 task/s, elapsed: 7s, ETA:    21s[  ] 22/81, 3.0 task/s, elapsed: 7s, ETA:    20s[  ] 23/81, 3.0 task/s, elapsed: 8s, ETA:    19s[  ] 24/81, 3.2 task/s, elapsed: 8s, ETA:    18s[  ] 25/81, 3.2 task/s, elapsed: 8s, ETA:    18s[  ] 26/81, 3.3 task/s, elapsed: 8s, ETA:    17s[  ] 27/81, 3.3 task/s, elapsed: 8s, ETA:    16s[  ] 28/81, 3.4 task/s, elapsed: 8s, ETA:    15s[  ] 29/81, 3.2 task/s, elapsed: 9s, ETA:    16s[  ] 30/81, 3.4 task/s, elapsed: 9s, ETA:    15s[  ] 31/81, 3.4 task/s, elapsed: 9s, ETA:    15s[  ] 32/81, 3.5 task/s, elapsed: 9s, ETA:    14s[  ] 33/81, 3.5 task/s, elapsed: 9s, ETA:    14s[  ] 34/81, 3.6 task/s, elapsed: 9s, ETA:    13s[  ] 35/81, 3.6 task/s, elapsed: 10s, ETA:    13s[  ] 36/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 37/81, 3.5 task/s, elapsed: 11s, ETA:    13s[  ] 38/81, 3.6 task/s, elapsed: 11s, ETA:    12s[  ] 39/81, 3.6 task/s, elapsed: 11s, ETA:    12s[  ] 40/81, 3.7 task/s, elapsed: 11s, ETA:    11s[> ] 41/81, 3.7 task/s, elapsed: 11s, ETA:    11s[> ] 42/81, 3.8 task/s, elapsed: 11s, ETA:    10s[> ] 43/81, 3.8 task/s, elapsed: 11s, ETA:    10s[> ] 44/81, 3.9 task/s, elapsed: 11s, ETA:    10s[> ] 45/81, 3.7 task/s, elapsed: 12s, ETA:    10s[> ] 46/81, 3.8 task/s, elapsed: 12s, ETA:     9s[> ] 47/81, 3.8 task/s, elapsed: 12s, ETA:     9s[> ] 48/81, 3.9 task/s, elapsed: 12s, ETA:     9s[> ] 49/81, 3.9 task/s, elapsed: 13s, ETA:     8s[> ] 50/81, 4.0 task/s, elapsed: 13s, ETA:     8s[> ] 51/81, 3.9 task/s, elapsed: 13s, ETA:     8s[> ] 52/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 53/81, 3.9 task/s, elapsed: 14s, ETA:     7s[> ] 54/81, 3.9 task/s, elapsed: 14s, ETA:     7s[> ] 55/81, 3.9 task/s, elapsed: 14s, ETA:     7s[> ] 56/81, 4.0 task/s, elapsed: 14s, ETA:     6s[> ] 57/81, 4.0 task/s, elapsed: 14s, ETA:     6s[> ] 58/81, 4.1 task/s, elapsed: 14s, ETA:     6s[> ] 59/81, 4.1 task/s, elapsed: 15s, ETA:     5s[> ] 60/81, 4.1 task/s, elapsed: 15s, ETA:     5s[> ] 61/81, 4.1 task/s, elapsed: 15s, ETA:     5s[> ] 62/81, 4.2 task/s, elapsed: 15s, ETA:     5s[> ] 63/81, 4.1 task/s, elapsed: 15s, ETA:     4s[> ] 64/81, 4.2 task/s, elapsed: 15s, ETA:     4s[> ] 65/81, 4.2 task/s, elapsed: 16s, ETA:     4s[> ] 66/81, 4.2 task/s, elapsed: 16s, ETA:     4s[> ] 67/81, 4.2 task/s, elapsed: 16s, ETA:     3s[> ] 68/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 69/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 70/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 71/81, 4.3 task/s, elapsed: 16s, ETA:     2s[> ] 72/81, 4.4 task/s, elapsed: 16s, ETA:     2s[> ] 73/81, 4.3 task/s, elapsed: 17s, ETA:     2s[> ] 74/81, 4.4 task/s, elapsed: 17s, ETA:     2s[> ] 75/81, 4.4 task/s, elapsed: 17s, ETA:     1s[> ] 76/81, 4.4 task/s, elapsed: 17s, ETA:     1s[> ] 77/81, 4.4 task/s, elapsed: 17s, ETA:     1s[> ] 78/81, 4.5 task/s, elapsed: 17s, ETA:     1s[> ] 79/81, 4.5 task/s, elapsed: 18s, ETA:     0s[> ] 80/81, 4.5 task/s, elapsed: 18s, ETA:     0s[>>] 81/81, 4.5 task/s, elapsed: 18s, ETA:     0s[>>] 82/81, 4.6 task/s, elapsed: 18s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 31.7 task/s, elapsed: 0s, ETA:     3s[  ] 2/81, 32.5 task/s, elapsed: 0s, ETA:     2s[  ] 3/81, 33.3 task/s, elapsed: 0s, ETA:     2s[  ] 4/81, 33.6 task/s, elapsed: 0s, ETA:     2s[  ] 5/81, 33.4 task/s, elapsed: 0s, ETA:     2s[  ] 6/81, 33.3 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 33.5 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 33.5 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 33.7 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 33.8 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 33.9 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 34.0 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 34.0 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 34.0 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 34.0 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 34.1 task/s, elapsed: 0s, ETA:     2s[  ] 17/81, 34.1 task/s, elapsed: 0s, ETA:     2s[  ] 18/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 19/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 20/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 21/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 22/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 23/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 24/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 25/81, 34.2 task/s, elapsed: 1s, ETA:     2s[  ] 26/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 27/81, 34.2 task/s, elapsed: 1s, ETA:     2s[  ] 28/81, 34.2 task/s, elapsed: 1s, ETA:     2s[  ] 29/81, 34.2 task/s, elapsed: 1s, ETA:     2s[  ] 30/81, 34.2 task/s, elapsed: 1s, ETA:     1s[  ] 31/81, 34.2 task/s, elapsed: 1s, ETA:     1s[  ] 32/81, 34.2 task/s, elapsed: 1s, ETA:     1s[  ] 33/81, 34.2 task/s, elapsed: 1s, ETA:     1s[  ] 34/81, 34.2 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 34.2 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 34.2 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 34.2 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 34.2 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 34.2 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 34.2 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 34.2 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 34.2 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 34.2 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 34.2 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 34.2 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 34.2 task/s, elapsed: 1s, ETA:     1s[> ] 47/81, 34.2 task/s, elapsed: 1s, ETA:     1s[> ] 48/81, 34.2 task/s, elapsed: 1s, ETA:     1s[> ] 49/81, 34.2 task/s, elapsed: 1s, ETA:     1s[> ] 50/81, 34.2 task/s, elapsed: 1s, ETA:     1s[> ] 51/81, 34.2 task/s, elapsed: 1s, ETA:     1s[> ] 52/81, 34.2 task/s, elapsed: 2s, ETA:     1s[> ] 53/81, 34.1 task/s, elapsed: 2s, ETA:     1s[> ] 54/81, 34.1 task/s, elapsed: 2s, ETA:     1s[> ] 55/81, 34.1 task/s, elapsed: 2s, ETA:     1s[> ] 56/81, 34.1 task/s, elapsed: 2s, ETA:     1s[> ] 57/81, 34.1 task/s, elapsed: 2s, ETA:     1s[> ] 58/81, 34.1 task/s, elapsed: 2s, ETA:     1s[> ] 59/81, 34.1 task/s, elapsed: 2s, ETA:     1s[> ] 60/81, 34.1 task/s, elapsed: 2s, ETA:     1s[> ] 61/81, 34.1 task/s, elapsed: 2s, ETA:     1s[> ] 62/81, 34.1 task/s, elapsed: 2s, ETA:     1s[> ] 63/81, 34.1 task/s, elapsed: 2s, ETA:     1s[> ] 64/81, 34.1 task/s, elapsed: 2s, ETA:     0s[> ] 65/81, 34.1 task/s, elapsed: 2s, ETA:     0s[> ] 66/81, 34.1 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 34.1 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 34.1 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 34.1 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 34.1 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 34.1 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 34.1 task/s, elapsed: 2s, ETA:     0s[> ] 73/81, 34.0 task/s, elapsed: 2s, ETA:     0s[> ] 74/81, 34.0 task/s, elapsed: 2s, ETA:     0s[> ] 75/81, 33.9 task/s, elapsed: 2s, ETA:     0s[> ] 76/81, 33.9 task/s, elapsed: 2s, ETA:     0s[> ] 77/81, 33.8 task/s, elapsed: 2s, ETA:     0s[> ] 78/81, 33.4 task/s, elapsed: 2s, ETA:     0s[> ] 79/81, 33.2 task/s, elapsed: 2s, ETA:     0s[> ] 80/81, 33.0 task/s, elapsed: 2s, ETA:     0s[>>] 81/81, 30.5 task/s, elapsed: 3s, ETA:     0s
Results writes to /tmp/tmpvp_9dioy/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7f285632c850>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 53% 43/81 [00:00<00:00, 423.42it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0201
mATE: 0.9443
mASE: 0.8748
mAOE: 1.1108
mAVE: 0.9251
mAAE: 0.8751
NDS: 0.0481
Eval time: 3.1s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.105 	0.839 	0.350 	1.489 	0.537 	0.174 
truck               	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bus                 	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.097 	0.604 	0.399 	1.508 	0.864 	0.826 
motorcycle          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.000 	1.000 	1.000 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-28 04:55:28,944 - mmdet3d - INFO - Epoch(val) [2][41]	object/car_ap_dist_0.5: 0.0000, object/car_ap_dist_1.0: 0.0358, object/car_ap_dist_2.0: 0.1562, object/car_ap_dist_4.0: 0.2261, object/car_trans_err: 0.8390, object/car_scale_err: 0.3497, object/car_orient_err: 1.4889, object/car_vel_err: 0.5372, object/car_attr_err: 0.1743, object/mATE: 0.9443, object/mASE: 0.8748, object/mAOE: 1.1108, object/mAVE: 0.9251, object/mAAE: 0.8751, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0000, object/truck_ap_dist_2.0: 0.0000, object/truck_ap_dist_4.0: 0.0000, object/truck_trans_err: 1.0000, object/truck_scale_err: 1.0000, object/truck_orient_err: 1.0000, object/truck_vel_err: 1.0000, object/truck_attr_err: 1.0000, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0000, object/bus_ap_dist_4.0: 0.0000, object/bus_trans_err: 1.0000, object/bus_scale_err: 1.0000, object/bus_orient_err: 1.0000, object/bus_vel_err: 1.0000, object/bus_attr_err: 1.0000, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 1.0000, object/motorcycle_scale_err: 1.0000, object/motorcycle_orient_err: 1.0000, object/motorcycle_vel_err: 1.0000, object/motorcycle_attr_err: 1.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0326, object/pedestrian_ap_dist_1.0: 0.0776, object/pedestrian_ap_dist_2.0: 0.1089, object/pedestrian_ap_dist_4.0: 0.1674, object/pedestrian_trans_err: 0.6041, object/pedestrian_scale_err: 0.3985, object/pedestrian_orient_err: 1.5080, object/pedestrian_vel_err: 0.8637, object/pedestrian_attr_err: 0.8261, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0000, object/traffic_cone_ap_dist_2.0: 0.0000, object/traffic_cone_ap_dist_4.0: 0.0000, object/traffic_cone_trans_err: 1.0000, object/traffic_cone_scale_err: 1.0000, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.0481, object/map: 0.0201
2025-04-28 04:56:12,791 - mmdet3d - INFO - Epoch [3][50/815]	lr: 1.501e-04, eta: 0:43:45, time: 0.876, data_time: 0.067, memory: 13374, loss/object/loss_heatmap: 1.7572, loss/object/layer_-1_loss_cls: 0.3928, loss/object/layer_-1_loss_bbox: 2.4010, stats/object/matched_ious: 0.1301, loss: 4.5510, grad_norm: 7.7367
2025-04-28 04:56:53,661 - mmdet3d - INFO - Epoch [3][100/815]	lr: 1.501e-04, eta: 0:43:04, time: 0.817, data_time: 0.010, memory: 13374, loss/object/loss_heatmap: 1.7529, loss/object/layer_-1_loss_cls: 0.3825, loss/object/layer_-1_loss_bbox: 2.5166, stats/object/matched_ious: 0.1329, loss: 4.6520, grad_norm: 8.1054
2025-04-28 04:57:34,453 - mmdet3d - INFO - Epoch [3][150/815]	lr: 1.501e-04, eta: 0:42:23, time: 0.816, data_time: 0.010, memory: 13374, loss/object/loss_heatmap: 1.7378, loss/object/layer_-1_loss_cls: 0.3891, loss/object/layer_-1_loss_bbox: 2.4556, stats/object/matched_ious: 0.1346, loss: 4.5826, grad_norm: 8.2261
2025-04-28 04:58:15,421 - mmdet3d - INFO - Epoch [3][200/815]	lr: 1.501e-04, eta: 0:41:43, time: 0.819, data_time: 0.010, memory: 13374, loss/object/loss_heatmap: 1.7064, loss/object/layer_-1_loss_cls: 0.3705, loss/object/layer_-1_loss_bbox: 2.3801, stats/object/matched_ious: 0.1335, loss: 4.4570, grad_norm: 8.6192
2025-04-28 04:58:56,453 - mmdet3d - INFO - Epoch [3][250/815]	lr: 1.501e-04, eta: 0:41:02, time: 0.821, data_time: 0.010, memory: 13374, loss/object/loss_heatmap: 1.6838, loss/object/layer_-1_loss_cls: 0.3723, loss/object/layer_-1_loss_bbox: 2.4116, stats/object/matched_ious: 0.1421, loss: 4.4676, grad_norm: 7.6789
2025-04-28 04:59:37,945 - mmdet3d - INFO - Epoch [3][300/815]	lr: 1.501e-04, eta: 0:40:22, time: 0.830, data_time: 0.010, memory: 13374, loss/object/loss_heatmap: 1.6276, loss/object/layer_-1_loss_cls: 0.3574, loss/object/layer_-1_loss_bbox: 2.2463, stats/object/matched_ious: 0.1547, loss: 4.2313, grad_norm: 7.4211
2025-04-28 05:00:19,403 - mmdet3d - INFO - Epoch [3][350/815]	lr: 1.501e-04, eta: 0:39:42, time: 0.829, data_time: 0.010, memory: 13374, loss/object/loss_heatmap: 1.5976, loss/object/layer_-1_loss_cls: 0.3529, loss/object/layer_-1_loss_bbox: 2.4212, stats/object/matched_ious: 0.1459, loss: 4.3716, grad_norm: 8.3131
2025-04-28 05:01:00,672 - mmdet3d - INFO - Epoch [3][400/815]	lr: 1.501e-04, eta: 0:39:01, time: 0.825, data_time: 0.010, memory: 13374, loss/object/loss_heatmap: 1.6144, loss/object/layer_-1_loss_cls: 0.3633, loss/object/layer_-1_loss_bbox: 2.2016, stats/object/matched_ious: 0.1525, loss: 4.1792, grad_norm: 8.1805
2025-04-28 05:01:42,036 - mmdet3d - INFO - Epoch [3][450/815]	lr: 1.501e-04, eta: 0:38:21, time: 0.827, data_time: 0.010, memory: 13374, loss/object/loss_heatmap: 1.5922, loss/object/layer_-1_loss_cls: 0.3528, loss/object/layer_-1_loss_bbox: 2.2545, stats/object/matched_ious: 0.1586, loss: 4.1995, grad_norm: 8.0899
2025-04-28 05:02:23,469 - mmdet3d - INFO - Epoch [3][500/815]	lr: 1.501e-04, eta: 0:37:41, time: 0.829, data_time: 0.010, memory: 13374, loss/object/loss_heatmap: 1.5603, loss/object/layer_-1_loss_cls: 0.3414, loss/object/layer_-1_loss_bbox: 2.3067, stats/object/matched_ious: 0.1560, loss: 4.2084, grad_norm: 7.8663
2025-04-28 05:03:04,752 - mmdet3d - INFO - Epoch [3][550/815]	lr: 1.501e-04, eta: 0:37:00, time: 0.826, data_time: 0.010, memory: 13374, loss/object/loss_heatmap: 1.6553, loss/object/layer_-1_loss_cls: 0.3464, loss/object/layer_-1_loss_bbox: 2.4639, stats/object/matched_ious: 0.1437, loss: 4.4657, grad_norm: 8.6554
2025-04-28 05:03:46,141 - mmdet3d - INFO - Epoch [3][600/815]	lr: 1.501e-04, eta: 0:36:20, time: 0.828, data_time: 0.010, memory: 13374, loss/object/loss_heatmap: 1.5026, loss/object/layer_-1_loss_cls: 0.3325, loss/object/layer_-1_loss_bbox: 2.2006, stats/object/matched_ious: 0.1525, loss: 4.0357, grad_norm: 7.3128
2025-04-28 05:04:27,486 - mmdet3d - INFO - Epoch [3][650/815]	lr: 1.501e-04, eta: 0:35:39, time: 0.827, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.5907, loss/object/layer_-1_loss_cls: 0.3334, loss/object/layer_-1_loss_bbox: 2.2597, stats/object/matched_ious: 0.1542, loss: 4.1838, grad_norm: 8.0435
2025-04-28 05:05:08,877 - mmdet3d - INFO - Epoch [3][700/815]	lr: 1.501e-04, eta: 0:34:58, time: 0.828, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.4866, loss/object/layer_-1_loss_cls: 0.3300, loss/object/layer_-1_loss_bbox: 2.2832, stats/object/matched_ious: 0.1596, loss: 4.0998, grad_norm: 7.4410
2025-04-28 05:05:51,130 - mmdet3d - INFO - Epoch [3][750/815]	lr: 1.501e-04, eta: 0:34:19, time: 0.845, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.5071, loss/object/layer_-1_loss_cls: 0.3183, loss/object/layer_-1_loss_bbox: 2.2167, stats/object/matched_ious: 0.1602, loss: 4.0420, grad_norm: 7.4536
2025-04-28 05:06:32,410 - mmdet3d - INFO - Epoch [3][800/815]	lr: 1.501e-04, eta: 0:33:38, time: 0.826, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.4653, loss/object/layer_-1_loss_cls: 0.3129, loss/object/layer_-1_loss_bbox: 2.1380, stats/object/matched_ious: 0.1747, loss: 3.9162, grad_norm: 7.4844
2025-04-28 05:06:44,731 - mmdet3d - INFO - Saving checkpoint at 3 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 3s, ETA:   255s[  ] 2/81, 0.6 task/s, elapsed: 3s, ETA:   126s[  ] 3/81, 0.9 task/s, elapsed: 3s, ETA:    90s[  ] 4/81, 1.2 task/s, elapsed: 3s, ETA:    66s[  ] 5/81, 1.3 task/s, elapsed: 4s, ETA:    56s[  ] 6/81, 1.6 task/s, elapsed: 4s, ETA:    46s[  ] 7/81, 1.6 task/s, elapsed: 4s, ETA:    45s[  ] 8/81, 1.9 task/s, elapsed: 4s, ETA:    39s[  ] 9/81, 2.0 task/s, elapsed: 5s, ETA:    36s[  ] 10/81, 2.2 task/s, elapsed: 5s, ETA:    32s[  ] 11/81, 2.3 task/s, elapsed: 5s, ETA:    31s[  ] 12/81, 2.5 task/s, elapsed: 5s, ETA:    28s[  ] 13/81, 2.5 task/s, elapsed: 5s, ETA:    27s[  ] 14/81, 2.7 task/s, elapsed: 5s, ETA:    24s[  ] 15/81, 2.6 task/s, elapsed: 6s, ETA:    26s[  ] 16/81, 2.7 task/s, elapsed: 6s, ETA:    24s[  ] 17/81, 2.8 task/s, elapsed: 6s, ETA:    23s[  ] 18/81, 2.9 task/s, elapsed: 6s, ETA:    21s[  ] 19/81, 3.0 task/s, elapsed: 6s, ETA:    21s[  ] 20/81, 3.1 task/s, elapsed: 6s, ETA:    20s[  ] 21/81, 3.1 task/s, elapsed: 7s, ETA:    19s[  ] 22/81, 3.3 task/s, elapsed: 7s, ETA:    18s[  ] 23/81, 3.1 task/s, elapsed: 7s, ETA:    19s[  ] 24/81, 3.2 task/s, elapsed: 7s, ETA:    18s[  ] 25/81, 3.2 task/s, elapsed: 8s, ETA:    17s[  ] 26/81, 3.4 task/s, elapsed: 8s, ETA:    16s[  ] 27/81, 3.4 task/s, elapsed: 8s, ETA:    16s[  ] 28/81, 3.5 task/s, elapsed: 8s, ETA:    15s[  ] 29/81, 3.5 task/s, elapsed: 8s, ETA:    15s[  ] 30/81, 3.6 task/s, elapsed: 8s, ETA:    14s[  ] 31/81, 3.4 task/s, elapsed: 9s, ETA:    15s[  ] 32/81, 3.5 task/s, elapsed: 9s, ETA:    14s[  ] 33/81, 3.5 task/s, elapsed: 9s, ETA:    14s[  ] 34/81, 3.6 task/s, elapsed: 9s, ETA:    13s[  ] 35/81, 3.6 task/s, elapsed: 10s, ETA:    13s[  ] 36/81, 3.8 task/s, elapsed: 10s, ETA:    12s[  ] 37/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 38/81, 3.8 task/s, elapsed: 10s, ETA:    11s[  ] 39/81, 3.7 task/s, elapsed: 11s, ETA:    11s[  ] 40/81, 3.8 task/s, elapsed: 11s, ETA:    11s[> ] 41/81, 3.8 task/s, elapsed: 11s, ETA:    11s[> ] 42/81, 3.9 task/s, elapsed: 11s, ETA:    10s[> ] 43/81, 3.8 task/s, elapsed: 11s, ETA:    10s[> ] 44/81, 3.9 task/s, elapsed: 11s, ETA:     9s[> ] 45/81, 3.9 task/s, elapsed: 11s, ETA:     9s[> ] 46/81, 4.0 task/s, elapsed: 11s, ETA:     9s[> ] 47/81, 3.8 task/s, elapsed: 12s, ETA:     9s[> ] 48/81, 3.9 task/s, elapsed: 12s, ETA:     8s[> ] 49/81, 3.9 task/s, elapsed: 13s, ETA:     8s[> ] 50/81, 4.0 task/s, elapsed: 13s, ETA:     8s[> ] 51/81, 4.0 task/s, elapsed: 13s, ETA:     8s[> ] 52/81, 4.1 task/s, elapsed: 13s, ETA:     7s[> ] 53/81, 4.1 task/s, elapsed: 13s, ETA:     7s[> ] 54/81, 4.1 task/s, elapsed: 13s, ETA:     7s[> ] 55/81, 4.1 task/s, elapsed: 14s, ETA:     6s[> ] 56/81, 4.1 task/s, elapsed: 14s, ETA:     6s[> ] 57/81, 4.1 task/s, elapsed: 14s, ETA:     6s[> ] 58/81, 4.2 task/s, elapsed: 14s, ETA:     5s[> ] 59/81, 4.2 task/s, elapsed: 14s, ETA:     5s[> ] 60/81, 4.2 task/s, elapsed: 14s, ETA:     5s[> ] 61/81, 4.2 task/s, elapsed: 14s, ETA:     5s[> ] 62/81, 4.3 task/s, elapsed: 14s, ETA:     4s[> ] 63/81, 4.3 task/s, elapsed: 15s, ETA:     4s[> ] 64/81, 4.4 task/s, elapsed: 15s, ETA:     4s[> ] 65/81, 4.2 task/s, elapsed: 15s, ETA:     4s[> ] 66/81, 4.3 task/s, elapsed: 15s, ETA:     4s[> ] 67/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 68/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 69/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 70/81, 4.4 task/s, elapsed: 16s, ETA:     3s[> ] 71/81, 4.4 task/s, elapsed: 16s, ETA:     2s[> ] 72/81, 4.4 task/s, elapsed: 16s, ETA:     2s[> ] 73/81, 4.4 task/s, elapsed: 16s, ETA:     2s[> ] 74/81, 4.5 task/s, elapsed: 16s, ETA:     2s[> ] 75/81, 4.4 task/s, elapsed: 17s, ETA:     1s[> ] 76/81, 4.5 task/s, elapsed: 17s, ETA:     1s[> ] 77/81, 4.5 task/s, elapsed: 17s, ETA:     1s[> ] 78/81, 4.5 task/s, elapsed: 17s, ETA:     1s[> ] 79/81, 4.5 task/s, elapsed: 18s, ETA:     0s[> ] 80/81, 4.6 task/s, elapsed: 18s, ETA:     0s[>>] 81/81, 4.5 task/s, elapsed: 18s, ETA:     0s[>>] 82/81, 4.6 task/s, elapsed: 18s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 33.4 task/s, elapsed: 0s, ETA:     2s[  ] 2/81, 33.5 task/s, elapsed: 0s, ETA:     2s[  ] 3/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 4/81, 34.5 task/s, elapsed: 0s, ETA:     2s[  ] 5/81, 34.6 task/s, elapsed: 0s, ETA:     2s[  ] 6/81, 34.5 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 34.6 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 34.5 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 34.6 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 34.6 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 34.7 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 34.8 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 34.9 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 34.8 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 34.8 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 34.9 task/s, elapsed: 0s, ETA:     2s[  ] 17/81, 34.9 task/s, elapsed: 0s, ETA:     2s[  ] 18/81, 34.9 task/s, elapsed: 1s, ETA:     2s[  ] 19/81, 35.0 task/s, elapsed: 1s, ETA:     2s[  ] 20/81, 35.0 task/s, elapsed: 1s, ETA:     2s[  ] 21/81, 35.0 task/s, elapsed: 1s, ETA:     2s[  ] 22/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 23/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 24/81, 35.1 task/s, elapsed: 1s, ETA:     2s[  ] 25/81, 34.9 task/s, elapsed: 1s, ETA:     2s[  ] 26/81, 34.9 task/s, elapsed: 1s, ETA:     2s[  ] 27/81, 34.9 task/s, elapsed: 1s, ETA:     2s[  ] 28/81, 34.9 task/s, elapsed: 1s, ETA:     2s[  ] 29/81, 35.0 task/s, elapsed: 1s, ETA:     1s[  ] 30/81, 34.9 task/s, elapsed: 1s, ETA:     1s[  ] 31/81, 34.9 task/s, elapsed: 1s, ETA:     1s[  ] 32/81, 34.9 task/s, elapsed: 1s, ETA:     1s[  ] 33/81, 34.8 task/s, elapsed: 1s, ETA:     1s[  ] 34/81, 34.8 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 34.8 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 34.8 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 34.7 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 34.7 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 34.7 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 47/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 48/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 49/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 50/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 51/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 52/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 53/81, 34.7 task/s, elapsed: 2s, ETA:     1s[> ] 54/81, 34.7 task/s, elapsed: 2s, ETA:     1s[> ] 55/81, 34.7 task/s, elapsed: 2s, ETA:     1s[> ] 56/81, 34.7 task/s, elapsed: 2s, ETA:     1s[> ] 57/81, 34.7 task/s, elapsed: 2s, ETA:     1s[> ] 58/81, 34.7 task/s, elapsed: 2s, ETA:     1s[> ] 59/81, 34.7 task/s, elapsed: 2s, ETA:     1s[> ] 60/81, 34.7 task/s, elapsed: 2s, ETA:     1s[> ] 61/81, 34.6 task/s, elapsed: 2s, ETA:     1s[> ] 62/81, 34.6 task/s, elapsed: 2s, ETA:     1s[> ] 63/81, 34.6 task/s, elapsed: 2s, ETA:     1s[> ] 64/81, 34.6 task/s, elapsed: 2s, ETA:     0s[> ] 65/81, 34.6 task/s, elapsed: 2s, ETA:     0s[> ] 66/81, 34.6 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 34.6 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 34.6 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 34.6 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 34.6 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 34.6 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 34.5 task/s, elapsed: 2s, ETA:     0s[> ] 73/81, 34.5 task/s, elapsed: 2s, ETA:     0s[> ] 74/81, 34.4 task/s, elapsed: 2s, ETA:     0s[> ] 75/81, 34.4 task/s, elapsed: 2s, ETA:     0s[> ] 76/81, 34.3 task/s, elapsed: 2s, ETA:     0s[> ] 77/81, 34.3 task/s, elapsed: 2s, ETA:     0s[> ] 78/81, 34.2 task/s, elapsed: 2s, ETA:     0s[> ] 79/81, 33.8 task/s, elapsed: 2s, ETA:     0s[> ] 80/81, 33.1 task/s, elapsed: 2s, ETA:     0s[>>] 81/81, 33.1 task/s, elapsed: 2s, ETA:     0s
Results writes to /tmp/tmpx6yvnipg/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7f2857d96280>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 54% 44/81 [00:00<00:00, 432.05it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0273
mATE: 0.9512
mASE: 0.8270
mAOE: 1.1252
mAVE: 0.8574
mAAE: 0.8532
NDS: 0.0648
Eval time: 2.3s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.190 	0.735 	0.291 	1.509 	0.293 	0.150 
truck               	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bus                 	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.083 	0.614 	0.401 	1.617 	0.566 	0.675 
motorcycle          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.000 	1.163 	0.578 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-28 05:07:17,728 - mmdet3d - INFO - Epoch(val) [3][41]	object/car_ap_dist_0.5: 0.0034, object/car_ap_dist_1.0: 0.1073, object/car_ap_dist_2.0: 0.2865, object/car_ap_dist_4.0: 0.3628, object/car_trans_err: 0.7349, object/car_scale_err: 0.2906, object/car_orient_err: 1.5093, object/car_vel_err: 0.2928, object/car_attr_err: 0.1504, object/mATE: 0.9512, object/mASE: 0.8270, object/mAOE: 1.1252, object/mAVE: 0.8574, object/mAAE: 0.8532, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0000, object/truck_ap_dist_2.0: 0.0000, object/truck_ap_dist_4.0: 0.0000, object/truck_trans_err: 1.0000, object/truck_scale_err: 1.0000, object/truck_orient_err: 1.0000, object/truck_vel_err: 1.0000, object/truck_attr_err: 1.0000, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0000, object/bus_ap_dist_4.0: 0.0000, object/bus_trans_err: 1.0000, object/bus_scale_err: 1.0000, object/bus_orient_err: 1.0000, object/bus_vel_err: 1.0000, object/bus_attr_err: 1.0000, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 1.0000, object/motorcycle_scale_err: 1.0000, object/motorcycle_orient_err: 1.0000, object/motorcycle_vel_err: 1.0000, object/motorcycle_attr_err: 1.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0271, object/pedestrian_ap_dist_1.0: 0.0510, object/pedestrian_ap_dist_2.0: 0.0908, object/pedestrian_ap_dist_4.0: 0.1632, object/pedestrian_trans_err: 0.6141, object/pedestrian_scale_err: 0.4013, object/pedestrian_orient_err: 1.6174, object/pedestrian_vel_err: 0.5663, object/pedestrian_attr_err: 0.6748, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0000, object/traffic_cone_ap_dist_2.0: 0.0000, object/traffic_cone_ap_dist_4.0: 0.0000, object/traffic_cone_trans_err: 1.1631, object/traffic_cone_scale_err: 0.5784, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.0648, object/map: 0.0273
2025-04-28 05:08:01,046 - mmdet3d - INFO - Epoch [4][50/815]	lr: 1.001e-04, eta: 0:32:35, time: 0.866, data_time: 0.067, memory: 13375, loss/object/loss_heatmap: 1.4055, loss/object/layer_-1_loss_cls: 0.2982, loss/object/layer_-1_loss_bbox: 2.0931, stats/object/matched_ious: 0.1782, loss: 3.7968, grad_norm: 6.6028
2025-04-28 05:08:42,001 - mmdet3d - INFO - Epoch [4][100/815]	lr: 1.001e-04, eta: 0:31:54, time: 0.819, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.2803, loss/object/layer_-1_loss_cls: 0.3053, loss/object/layer_-1_loss_bbox: 2.0408, stats/object/matched_ious: 0.1787, loss: 3.6265, grad_norm: 7.1472
2025-04-28 05:09:22,756 - mmdet3d - INFO - Epoch [4][150/815]	lr: 1.001e-04, eta: 0:31:13, time: 0.815, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.3843, loss/object/layer_-1_loss_cls: 0.2969, loss/object/layer_-1_loss_bbox: 2.0532, stats/object/matched_ious: 0.1703, loss: 3.7344, grad_norm: 7.1609
2025-04-28 05:10:03,596 - mmdet3d - INFO - Epoch [4][200/815]	lr: 1.001e-04, eta: 0:30:33, time: 0.817, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.3864, loss/object/layer_-1_loss_cls: 0.3031, loss/object/layer_-1_loss_bbox: 1.8788, stats/object/matched_ious: 0.1893, loss: 3.5684, grad_norm: 7.7212
2025-04-28 05:10:44,639 - mmdet3d - INFO - Epoch [4][250/815]	lr: 1.001e-04, eta: 0:29:52, time: 0.821, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.3670, loss/object/layer_-1_loss_cls: 0.2969, loss/object/layer_-1_loss_bbox: 2.0697, stats/object/matched_ious: 0.1770, loss: 3.7335, grad_norm: 7.7628
2025-04-28 05:11:26,047 - mmdet3d - INFO - Epoch [4][300/815]	lr: 1.001e-04, eta: 0:29:12, time: 0.828, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.3949, loss/object/layer_-1_loss_cls: 0.2985, loss/object/layer_-1_loss_bbox: 1.9809, stats/object/matched_ious: 0.1902, loss: 3.6744, grad_norm: 7.9084
2025-04-28 05:12:07,432 - mmdet3d - INFO - Epoch [4][350/815]	lr: 1.001e-04, eta: 0:28:31, time: 0.828, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.2835, loss/object/layer_-1_loss_cls: 0.2849, loss/object/layer_-1_loss_bbox: 1.8922, stats/object/matched_ious: 0.1898, loss: 3.4606, grad_norm: 7.4458
2025-04-28 05:12:48,765 - mmdet3d - INFO - Epoch [4][400/815]	lr: 1.001e-04, eta: 0:27:51, time: 0.827, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.2921, loss/object/layer_-1_loss_cls: 0.2974, loss/object/layer_-1_loss_bbox: 1.9890, stats/object/matched_ious: 0.1894, loss: 3.5785, grad_norm: 7.2562
2025-04-28 05:13:30,161 - mmdet3d - INFO - Epoch [4][450/815]	lr: 1.001e-04, eta: 0:27:10, time: 0.828, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.2598, loss/object/layer_-1_loss_cls: 0.2798, loss/object/layer_-1_loss_bbox: 1.9875, stats/object/matched_ious: 0.1840, loss: 3.5271, grad_norm: 7.0175
2025-04-28 05:14:11,502 - mmdet3d - INFO - Epoch [4][500/815]	lr: 1.001e-04, eta: 0:26:30, time: 0.827, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.3360, loss/object/layer_-1_loss_cls: 0.2788, loss/object/layer_-1_loss_bbox: 2.1074, stats/object/matched_ious: 0.1788, loss: 3.7222, grad_norm: 7.8783
2025-04-28 05:14:52,851 - mmdet3d - INFO - Epoch [4][550/815]	lr: 1.001e-04, eta: 0:25:49, time: 0.827, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.2516, loss/object/layer_-1_loss_cls: 0.2650, loss/object/layer_-1_loss_bbox: 2.0492, stats/object/matched_ious: 0.1804, loss: 3.5657, grad_norm: 6.7162
2025-04-28 05:15:34,201 - mmdet3d - INFO - Epoch [4][600/815]	lr: 1.001e-04, eta: 0:25:08, time: 0.827, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.2726, loss/object/layer_-1_loss_cls: 0.2688, loss/object/layer_-1_loss_bbox: 1.9760, stats/object/matched_ious: 0.1847, loss: 3.5174, grad_norm: 7.1270
2025-04-28 05:16:15,501 - mmdet3d - INFO - Epoch [4][650/815]	lr: 1.001e-04, eta: 0:24:28, time: 0.826, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.2161, loss/object/layer_-1_loss_cls: 0.2648, loss/object/layer_-1_loss_bbox: 2.0547, stats/object/matched_ious: 0.1771, loss: 3.5356, grad_norm: 7.0538
2025-04-28 05:16:57,114 - mmdet3d - INFO - Epoch [4][700/815]	lr: 1.001e-04, eta: 0:23:47, time: 0.832, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.1669, loss/object/layer_-1_loss_cls: 0.2666, loss/object/layer_-1_loss_bbox: 1.8631, stats/object/matched_ious: 0.2014, loss: 3.2966, grad_norm: 6.7744
2025-04-28 05:17:38,491 - mmdet3d - INFO - Epoch [4][750/815]	lr: 1.001e-04, eta: 0:23:07, time: 0.828, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.2965, loss/object/layer_-1_loss_cls: 0.2606, loss/object/layer_-1_loss_bbox: 2.0547, stats/object/matched_ious: 0.1883, loss: 3.6119, grad_norm: 7.4207
2025-04-28 05:18:19,764 - mmdet3d - INFO - Epoch [4][800/815]	lr: 1.001e-04, eta: 0:22:26, time: 0.825, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.2644, loss/object/layer_-1_loss_cls: 0.2741, loss/object/layer_-1_loss_bbox: 1.8591, stats/object/matched_ious: 0.1976, loss: 3.3976, grad_norm: 7.9205
2025-04-28 05:18:32,342 - mmdet3d - INFO - Saving checkpoint at 4 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 3s, ETA:   257s[  ] 2/81, 0.6 task/s, elapsed: 3s, ETA:   127s[  ] 3/81, 0.9 task/s, elapsed: 3s, ETA:    90s[  ] 4/81, 1.2 task/s, elapsed: 3s, ETA:    67s[  ] 5/81, 1.3 task/s, elapsed: 4s, ETA:    57s[  ] 6/81, 1.6 task/s, elapsed: 4s, ETA:    47s[  ] 7/81, 1.8 task/s, elapsed: 4s, ETA:    42s[  ] 8/81, 2.0 task/s, elapsed: 4s, ETA:    36s[  ] 9/81, 1.9 task/s, elapsed: 5s, ETA:    38s[  ] 10/81, 2.1 task/s, elapsed: 5s, ETA:    33s[  ] 11/81, 2.2 task/s, elapsed: 5s, ETA:    32s[  ] 12/81, 2.4 task/s, elapsed: 5s, ETA:    29s[  ] 13/81, 2.5 task/s, elapsed: 5s, ETA:    27s[  ] 14/81, 2.7 task/s, elapsed: 5s, ETA:    25s[  ] 15/81, 2.7 task/s, elapsed: 6s, ETA:    24s[  ] 16/81, 2.9 task/s, elapsed: 6s, ETA:    22s[  ] 17/81, 2.7 task/s, elapsed: 6s, ETA:    24s[  ] 18/81, 2.9 task/s, elapsed: 6s, ETA:    22s[  ] 19/81, 2.9 task/s, elapsed: 7s, ETA:    21s[  ] 20/81, 3.0 task/s, elapsed: 7s, ETA:    20s[  ] 21/81, 3.1 task/s, elapsed: 7s, ETA:    20s[  ] 22/81, 3.2 task/s, elapsed: 7s, ETA:    18s[  ] 23/81, 3.2 task/s, elapsed: 7s, ETA:    18s[  ] 24/81, 3.4 task/s, elapsed: 7s, ETA:    17s[  ] 25/81, 3.2 task/s, elapsed: 8s, ETA:    18s[  ] 26/81, 3.3 task/s, elapsed: 8s, ETA:    17s[  ] 27/81, 3.3 task/s, elapsed: 8s, ETA:    16s[  ] 28/81, 3.4 task/s, elapsed: 8s, ETA:    15s[  ] 29/81, 3.4 task/s, elapsed: 8s, ETA:    15s[  ] 30/81, 3.6 task/s, elapsed: 8s, ETA:    14s[  ] 31/81, 3.6 task/s, elapsed: 9s, ETA:    14s[  ] 32/81, 3.7 task/s, elapsed: 9s, ETA:    13s[  ] 33/81, 3.5 task/s, elapsed: 9s, ETA:    14s[  ] 34/81, 3.6 task/s, elapsed: 9s, ETA:    13s[  ] 35/81, 3.6 task/s, elapsed: 10s, ETA:    13s[  ] 36/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 37/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 38/81, 3.8 task/s, elapsed: 10s, ETA:    11s[  ] 39/81, 3.8 task/s, elapsed: 10s, ETA:    11s[  ] 40/81, 3.9 task/s, elapsed: 10s, ETA:    11s[> ] 41/81, 3.8 task/s, elapsed: 11s, ETA:    11s[> ] 42/81, 3.9 task/s, elapsed: 11s, ETA:    10s[> ] 43/81, 3.9 task/s, elapsed: 11s, ETA:    10s[> ] 44/81, 4.0 task/s, elapsed: 11s, ETA:     9s[> ] 45/81, 3.9 task/s, elapsed: 11s, ETA:     9s[> ] 46/81, 4.0 task/s, elapsed: 11s, ETA:     9s[> ] 47/81, 4.0 task/s, elapsed: 12s, ETA:     8s[> ] 48/81, 4.1 task/s, elapsed: 12s, ETA:     8s[> ] 49/81, 4.1 task/s, elapsed: 12s, ETA:     8s[> ] 50/81, 4.2 task/s, elapsed: 12s, ETA:     7s[> ] 51/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 52/81, 4.1 task/s, elapsed: 13s, ETA:     7s[> ] 53/81, 4.1 task/s, elapsed: 13s, ETA:     7s[> ] 54/81, 4.2 task/s, elapsed: 13s, ETA:     6s[> ] 55/81, 4.1 task/s, elapsed: 13s, ETA:     6s[> ] 56/81, 4.2 task/s, elapsed: 13s, ETA:     6s[> ] 57/81, 4.2 task/s, elapsed: 14s, ETA:     6s[> ] 58/81, 4.3 task/s, elapsed: 14s, ETA:     5s[> ] 59/81, 4.3 task/s, elapsed: 14s, ETA:     5s[> ] 60/81, 4.3 task/s, elapsed: 14s, ETA:     5s[> ] 61/81, 4.3 task/s, elapsed: 14s, ETA:     5s[> ] 62/81, 4.3 task/s, elapsed: 14s, ETA:     4s[> ] 63/81, 4.3 task/s, elapsed: 15s, ETA:     4s[> ] 64/81, 4.4 task/s, elapsed: 15s, ETA:     4s[> ] 65/81, 4.4 task/s, elapsed: 15s, ETA:     4s[> ] 66/81, 4.4 task/s, elapsed: 15s, ETA:     3s[> ] 67/81, 4.4 task/s, elapsed: 15s, ETA:     3s[> ] 68/81, 4.5 task/s, elapsed: 15s, ETA:     3s[> ] 69/81, 4.5 task/s, elapsed: 15s, ETA:     3s[> ] 70/81, 4.5 task/s, elapsed: 15s, ETA:     2s[> ] 71/81, 4.4 task/s, elapsed: 16s, ETA:     2s[> ] 72/81, 4.5 task/s, elapsed: 16s, ETA:     2s[> ] 73/81, 4.5 task/s, elapsed: 16s, ETA:     2s[> ] 74/81, 4.6 task/s, elapsed: 16s, ETA:     2s[> ] 75/81, 4.5 task/s, elapsed: 17s, ETA:     1s[> ] 76/81, 4.6 task/s, elapsed: 17s, ETA:     1s[> ] 77/81, 4.6 task/s, elapsed: 17s, ETA:     1s[> ] 78/81, 4.6 task/s, elapsed: 17s, ETA:     1s[> ] 79/81, 4.6 task/s, elapsed: 17s, ETA:     0s[> ] 80/81, 4.7 task/s, elapsed: 17s, ETA:     0s[>>] 81/81, 4.6 task/s, elapsed: 18s, ETA:     0s[>>] 82/81, 4.7 task/s, elapsed: 18s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 2/81, 34.2 task/s, elapsed: 0s, ETA:     2s[  ] 3/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 4/81, 34.5 task/s, elapsed: 0s, ETA:     2s[  ] 5/81, 34.6 task/s, elapsed: 0s, ETA:     2s[  ] 6/81, 34.6 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 34.6 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 34.5 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 34.4 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 34.4 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 34.4 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 34.4 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 17/81, 34.4 task/s, elapsed: 0s, ETA:     2s[  ] 18/81, 34.4 task/s, elapsed: 1s, ETA:     2s[  ] 19/81, 34.4 task/s, elapsed: 1s, ETA:     2s[  ] 20/81, 34.5 task/s, elapsed: 1s, ETA:     2s[  ] 21/81, 34.5 task/s, elapsed: 1s, ETA:     2s[  ] 22/81, 34.5 task/s, elapsed: 1s, ETA:     2s[  ] 23/81, 34.5 task/s, elapsed: 1s, ETA:     2s[  ] 24/81, 34.5 task/s, elapsed: 1s, ETA:     2s[  ] 25/81, 34.5 task/s, elapsed: 1s, ETA:     2s[  ] 26/81, 34.5 task/s, elapsed: 1s, ETA:     2s[  ] 27/81, 34.6 task/s, elapsed: 1s, ETA:     2s[  ] 28/81, 34.6 task/s, elapsed: 1s, ETA:     2s[  ] 29/81, 34.6 task/s, elapsed: 1s, ETA:     2s[  ] 30/81, 34.6 task/s, elapsed: 1s, ETA:     1s[  ] 31/81, 34.5 task/s, elapsed: 1s, ETA:     1s[  ] 32/81, 34.5 task/s, elapsed: 1s, ETA:     1s[  ] 33/81, 34.5 task/s, elapsed: 1s, ETA:     1s[  ] 34/81, 34.4 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 34.4 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 34.4 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 34.4 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 34.4 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 34.4 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 34.4 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 34.4 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 34.4 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 34.4 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 34.4 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 34.3 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 34.3 task/s, elapsed: 1s, ETA:     1s[> ] 47/81, 34.3 task/s, elapsed: 1s, ETA:     1s[> ] 48/81, 34.3 task/s, elapsed: 1s, ETA:     1s[> ] 49/81, 34.3 task/s, elapsed: 1s, ETA:     1s[> ] 50/81, 34.3 task/s, elapsed: 1s, ETA:     1s[> ] 51/81, 34.3 task/s, elapsed: 1s, ETA:     1s[> ] 52/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 53/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 54/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 55/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 56/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 57/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 58/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 59/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 60/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 61/81, 34.2 task/s, elapsed: 2s, ETA:     1s[> ] 62/81, 34.2 task/s, elapsed: 2s, ETA:     1s[> ] 63/81, 31.0 task/s, elapsed: 2s, ETA:     1s[> ] 64/81, 31.0 task/s, elapsed: 2s, ETA:     1s[> ] 65/81, 31.0 task/s, elapsed: 2s, ETA:     1s[> ] 66/81, 31.0 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 31.0 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 31.0 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 31.0 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 31.0 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 30.9 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 30.8 task/s, elapsed: 2s, ETA:     0s[> ] 73/81, 30.4 task/s, elapsed: 2s, ETA:     0s[> ] 74/81, 30.4 task/s, elapsed: 2s, ETA:     0s[> ] 75/81, 30.4 task/s, elapsed: 2s, ETA:     0s[> ] 76/81, 30.4 task/s, elapsed: 2s, ETA:     0s[> ] 77/81, 30.5 task/s, elapsed: 3s, ETA:     0s[> ] 78/81, 30.5 task/s, elapsed: 3s, ETA:     0s[> ] 79/81, 30.6 task/s, elapsed: 3s, ETA:     0s[> ] 80/81, 30.6 task/s, elapsed: 3s, ETA:     0s[>>] 81/81, 30.7 task/s, elapsed: 3s, ETA:     0s
Results writes to /tmp/tmp6iecyfws/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7f2868942460>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 53% 43/81 [00:00<00:00, 424.44it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0381
mATE: 0.9303
mASE: 0.8679
mAOE: 1.1109
mAVE: 0.8613
mAAE: 0.8562
NDS: 0.0675
Eval time: 2.9s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.229 	0.738 	0.321 	1.412 	0.321 	0.185 
truck               	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bus                 	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.152 	0.565 	0.358 	1.586 	0.569 	0.665 
motorcycle          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.000 	1.000 	1.000 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-28 05:19:05,912 - mmdet3d - INFO - Epoch(val) [4][41]	object/car_ap_dist_0.5: 0.0101, object/car_ap_dist_1.0: 0.1385, object/car_ap_dist_2.0: 0.3448, object/car_ap_dist_4.0: 0.4229, object/car_trans_err: 0.7381, object/car_scale_err: 0.3213, object/car_orient_err: 1.4120, object/car_vel_err: 0.3213, object/car_attr_err: 0.1849, object/mATE: 0.9303, object/mASE: 0.8679, object/mAOE: 1.1109, object/mAVE: 0.8613, object/mAAE: 0.8562, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0000, object/truck_ap_dist_2.0: 0.0000, object/truck_ap_dist_4.0: 0.0000, object/truck_trans_err: 1.0000, object/truck_scale_err: 1.0000, object/truck_orient_err: 1.0000, object/truck_vel_err: 1.0000, object/truck_attr_err: 1.0000, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0000, object/bus_ap_dist_4.0: 0.0000, object/bus_trans_err: 1.0000, object/bus_scale_err: 1.0000, object/bus_orient_err: 1.0000, object/bus_vel_err: 1.0000, object/bus_attr_err: 1.0000, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 1.0000, object/motorcycle_scale_err: 1.0000, object/motorcycle_orient_err: 1.0000, object/motorcycle_vel_err: 1.0000, object/motorcycle_attr_err: 1.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0674, object/pedestrian_ap_dist_1.0: 0.1177, object/pedestrian_ap_dist_2.0: 0.1694, object/pedestrian_ap_dist_4.0: 0.2536, object/pedestrian_trans_err: 0.5651, object/pedestrian_scale_err: 0.3577, object/pedestrian_orient_err: 1.5860, object/pedestrian_vel_err: 0.5692, object/pedestrian_attr_err: 0.6647, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0000, object/traffic_cone_ap_dist_2.0: 0.0000, object/traffic_cone_ap_dist_4.0: 0.0000, object/traffic_cone_trans_err: 1.0000, object/traffic_cone_scale_err: 1.0000, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.0675, object/map: 0.0381
2025-04-28 05:19:49,317 - mmdet3d - INFO - Epoch [5][50/815]	lr: 5.015e-05, eta: 0:21:28, time: 0.867, data_time: 0.068, memory: 13375, loss/object/loss_heatmap: 1.1832, loss/object/layer_-1_loss_cls: 0.2572, loss/object/layer_-1_loss_bbox: 1.7873, stats/object/matched_ious: 0.2062, loss: 3.2277, grad_norm: 6.2320
2025-04-28 05:20:30,231 - mmdet3d - INFO - Epoch [5][100/815]	lr: 5.015e-05, eta: 0:20:47, time: 0.818, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.1296, loss/object/layer_-1_loss_cls: 0.2548, loss/object/layer_-1_loss_bbox: 1.8224, stats/object/matched_ious: 0.2129, loss: 3.2068, grad_norm: 6.8081
2025-04-28 05:21:10,932 - mmdet3d - INFO - Epoch [5][150/815]	lr: 5.015e-05, eta: 0:20:06, time: 0.814, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.1424, loss/object/layer_-1_loss_cls: 0.2606, loss/object/layer_-1_loss_bbox: 1.6932, stats/object/matched_ious: 0.2112, loss: 3.0962, grad_norm: 6.9301
2025-04-28 05:21:51,713 - mmdet3d - INFO - Epoch [5][200/815]	lr: 5.015e-05, eta: 0:19:26, time: 0.816, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.0236, loss/object/layer_-1_loss_cls: 0.2457, loss/object/layer_-1_loss_bbox: 1.7287, stats/object/matched_ious: 0.2154, loss: 2.9979, grad_norm: 6.2046
2025-04-28 05:22:32,734 - mmdet3d - INFO - Epoch [5][250/815]	lr: 5.015e-05, eta: 0:18:45, time: 0.820, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.0584, loss/object/layer_-1_loss_cls: 0.2451, loss/object/layer_-1_loss_bbox: 1.6619, stats/object/matched_ious: 0.2154, loss: 2.9654, grad_norm: 6.3202
2025-04-28 05:23:13,876 - mmdet3d - INFO - Epoch [5][300/815]	lr: 5.015e-05, eta: 0:18:04, time: 0.823, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.1124, loss/object/layer_-1_loss_cls: 0.2500, loss/object/layer_-1_loss_bbox: 1.7746, stats/object/matched_ious: 0.2147, loss: 3.1370, grad_norm: 6.5781
2025-04-28 05:23:55,318 - mmdet3d - INFO - Epoch [5][350/815]	lr: 5.015e-05, eta: 0:17:24, time: 0.829, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.0444, loss/object/layer_-1_loss_cls: 0.2431, loss/object/layer_-1_loss_bbox: 1.7305, stats/object/matched_ious: 0.2160, loss: 3.0180, grad_norm: 7.0651
2025-04-28 05:24:36,537 - mmdet3d - INFO - Epoch [5][400/815]	lr: 5.015e-05, eta: 0:16:43, time: 0.824, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.1467, loss/object/layer_-1_loss_cls: 0.2501, loss/object/layer_-1_loss_bbox: 1.8328, stats/object/matched_ious: 0.2031, loss: 3.2296, grad_norm: 7.7914
2025-04-28 05:25:17,820 - mmdet3d - INFO - Epoch [5][450/815]	lr: 5.015e-05, eta: 0:16:03, time: 0.826, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.0886, loss/object/layer_-1_loss_cls: 0.2390, loss/object/layer_-1_loss_bbox: 1.7432, stats/object/matched_ious: 0.2152, loss: 3.0708, grad_norm: 6.3678
2025-04-28 05:25:59,188 - mmdet3d - INFO - Epoch [5][500/815]	lr: 5.015e-05, eta: 0:15:22, time: 0.827, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.0765, loss/object/layer_-1_loss_cls: 0.2493, loss/object/layer_-1_loss_bbox: 1.7975, stats/object/matched_ious: 0.2203, loss: 3.1233, grad_norm: 7.1527
2025-04-28 05:26:40,514 - mmdet3d - INFO - Epoch [5][550/815]	lr: 5.015e-05, eta: 0:14:41, time: 0.827, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.0965, loss/object/layer_-1_loss_cls: 0.2351, loss/object/layer_-1_loss_bbox: 1.7859, stats/object/matched_ious: 0.2115, loss: 3.1175, grad_norm: 7.2926
2025-04-28 05:27:21,923 - mmdet3d - INFO - Epoch [5][600/815]	lr: 5.015e-05, eta: 0:14:01, time: 0.828, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.0376, loss/object/layer_-1_loss_cls: 0.2386, loss/object/layer_-1_loss_bbox: 1.7275, stats/object/matched_ious: 0.2169, loss: 3.0037, grad_norm: 7.0945
2025-04-28 05:28:03,079 - mmdet3d - INFO - Epoch [5][650/815]	lr: 5.015e-05, eta: 0:13:20, time: 0.823, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.0297, loss/object/layer_-1_loss_cls: 0.2365, loss/object/layer_-1_loss_bbox: 1.6683, stats/object/matched_ious: 0.2268, loss: 2.9346, grad_norm: 6.7985
2025-04-28 05:28:44,286 - mmdet3d - INFO - Epoch [5][700/815]	lr: 5.015e-05, eta: 0:12:39, time: 0.824, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.0426, loss/object/layer_-1_loss_cls: 0.2285, loss/object/layer_-1_loss_bbox: 1.6658, stats/object/matched_ious: 0.2162, loss: 2.9369, grad_norm: 7.0614
2025-04-28 05:29:25,630 - mmdet3d - INFO - Epoch [5][750/815]	lr: 5.015e-05, eta: 0:11:58, time: 0.827, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 1.0141, loss/object/layer_-1_loss_cls: 0.2343, loss/object/layer_-1_loss_bbox: 1.7773, stats/object/matched_ious: 0.2274, loss: 3.0257, grad_norm: 7.0764
2025-04-28 05:30:07,044 - mmdet3d - INFO - Epoch [5][800/815]	lr: 5.015e-05, eta: 0:11:18, time: 0.828, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 0.9819, loss/object/layer_-1_loss_cls: 0.2220, loss/object/layer_-1_loss_bbox: 1.6983, stats/object/matched_ious: 0.2288, loss: 2.9023, grad_norm: 6.5693
2025-04-28 05:30:19,514 - mmdet3d - INFO - Saving checkpoint at 5 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 3s, ETA:   261s[  ] 2/81, 0.6 task/s, elapsed: 3s, ETA:   129s[  ] 3/81, 0.9 task/s, elapsed: 4s, ETA:    92s[  ] 4/81, 1.1 task/s, elapsed: 4s, ETA:    68s[  ] 5/81, 1.3 task/s, elapsed: 4s, ETA:    58s[  ] 6/81, 1.6 task/s, elapsed: 4s, ETA:    47s[  ] 7/81, 1.7 task/s, elapsed: 4s, ETA:    43s[  ] 8/81, 2.0 task/s, elapsed: 4s, ETA:    37s[  ] 9/81, 1.9 task/s, elapsed: 5s, ETA:    37s[  ] 10/81, 2.1 task/s, elapsed: 5s, ETA:    33s[  ] 11/81, 2.2 task/s, elapsed: 5s, ETA:    31s[  ] 12/81, 2.4 task/s, elapsed: 5s, ETA:    28s[  ] 13/81, 2.5 task/s, elapsed: 5s, ETA:    27s[  ] 14/81, 2.7 task/s, elapsed: 5s, ETA:    25s[  ] 15/81, 2.7 task/s, elapsed: 6s, ETA:    24s[  ] 16/81, 2.9 task/s, elapsed: 6s, ETA:    22s[  ] 17/81, 2.7 task/s, elapsed: 6s, ETA:    24s[  ] 18/81, 2.9 task/s, elapsed: 6s, ETA:    22s[  ] 19/81, 2.9 task/s, elapsed: 7s, ETA:    21s[  ] 20/81, 3.1 task/s, elapsed: 7s, ETA:    20s[  ] 21/81, 3.1 task/s, elapsed: 7s, ETA:    19s[  ] 22/81, 3.2 task/s, elapsed: 7s, ETA:    18s[  ] 23/81, 3.2 task/s, elapsed: 7s, ETA:    18s[  ] 24/81, 3.4 task/s, elapsed: 7s, ETA:    17s[  ] 25/81, 3.2 task/s, elapsed: 8s, ETA:    18s[  ] 26/81, 3.3 task/s, elapsed: 8s, ETA:    17s[  ] 27/81, 3.3 task/s, elapsed: 8s, ETA:    16s[  ] 28/81, 3.4 task/s, elapsed: 8s, ETA:    15s[  ] 29/81, 3.5 task/s, elapsed: 8s, ETA:    15s[  ] 30/81, 3.6 task/s, elapsed: 8s, ETA:    14s[  ] 31/81, 3.6 task/s, elapsed: 9s, ETA:    14s[  ] 32/81, 3.7 task/s, elapsed: 9s, ETA:    13s[  ] 33/81, 3.5 task/s, elapsed: 9s, ETA:    14s[  ] 34/81, 3.6 task/s, elapsed: 9s, ETA:    13s[  ] 35/81, 3.6 task/s, elapsed: 10s, ETA:    13s[  ] 36/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 37/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 38/81, 3.8 task/s, elapsed: 10s, ETA:    11s[  ] 39/81, 3.8 task/s, elapsed: 10s, ETA:    11s[  ] 40/81, 3.9 task/s, elapsed: 10s, ETA:    11s[> ] 41/81, 3.7 task/s, elapsed: 11s, ETA:    11s[> ] 42/81, 3.8 task/s, elapsed: 11s, ETA:    10s[> ] 43/81, 3.8 task/s, elapsed: 11s, ETA:    10s[> ] 44/81, 3.9 task/s, elapsed: 11s, ETA:    10s[> ] 45/81, 3.9 task/s, elapsed: 12s, ETA:     9s[> ] 46/81, 4.0 task/s, elapsed: 12s, ETA:     9s[> ] 47/81, 4.0 task/s, elapsed: 12s, ETA:     9s[> ] 48/81, 4.0 task/s, elapsed: 12s, ETA:     8s[> ] 49/81, 3.9 task/s, elapsed: 13s, ETA:     8s[> ] 50/81, 4.0 task/s, elapsed: 13s, ETA:     8s[> ] 51/81, 4.0 task/s, elapsed: 13s, ETA:     8s[> ] 52/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 53/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 54/81, 4.1 task/s, elapsed: 13s, ETA:     7s[> ] 55/81, 4.1 task/s, elapsed: 13s, ETA:     6s[> ] 56/81, 4.2 task/s, elapsed: 13s, ETA:     6s[> ] 57/81, 4.0 task/s, elapsed: 14s, ETA:     6s[> ] 58/81, 4.1 task/s, elapsed: 14s, ETA:     6s[> ] 59/81, 4.1 task/s, elapsed: 14s, ETA:     5s[> ] 60/81, 4.1 task/s, elapsed: 14s, ETA:     5s[> ] 61/81, 4.1 task/s, elapsed: 15s, ETA:     5s[> ] 62/81, 4.2 task/s, elapsed: 15s, ETA:     5s[> ] 63/81, 4.2 task/s, elapsed: 15s, ETA:     4s[> ] 64/81, 4.3 task/s, elapsed: 15s, ETA:     4s[> ] 65/81, 4.3 task/s, elapsed: 15s, ETA:     4s[> ] 66/81, 4.3 task/s, elapsed: 15s, ETA:     3s[> ] 67/81, 4.2 task/s, elapsed: 16s, ETA:     3s[> ] 68/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 69/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 70/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 71/81, 4.3 task/s, elapsed: 16s, ETA:     2s[> ] 72/81, 4.4 task/s, elapsed: 16s, ETA:     2s[> ] 73/81, 4.4 task/s, elapsed: 17s, ETA:     2s[> ] 74/81, 4.4 task/s, elapsed: 17s, ETA:     2s[> ] 75/81, 4.4 task/s, elapsed: 17s, ETA:     1s[> ] 76/81, 4.5 task/s, elapsed: 17s, ETA:     1s[> ] 77/81, 4.4 task/s, elapsed: 17s, ETA:     1s[> ] 78/81, 4.5 task/s, elapsed: 17s, ETA:     1s[> ] 79/81, 4.5 task/s, elapsed: 18s, ETA:     0s[> ] 80/81, 4.5 task/s, elapsed: 18s, ETA:     0s[>>] 81/81, 4.5 task/s, elapsed: 18s, ETA:     0s[>>] 82/81, 4.6 task/s, elapsed: 18s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 32.6 task/s, elapsed: 0s, ETA:     2s[  ] 2/81, 32.8 task/s, elapsed: 0s, ETA:     2s[  ] 3/81, 33.4 task/s, elapsed: 0s, ETA:     2s[  ] 4/81, 33.5 task/s, elapsed: 0s, ETA:     2s[  ] 5/81, 33.5 task/s, elapsed: 0s, ETA:     2s[  ] 6/81, 33.4 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 33.4 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 33.3 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 33.3 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 33.3 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 33.3 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 33.3 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 33.3 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 33.2 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 33.2 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 33.2 task/s, elapsed: 0s, ETA:     2s[  ] 17/81, 33.2 task/s, elapsed: 1s, ETA:     2s[  ] 18/81, 33.3 task/s, elapsed: 1s, ETA:     2s[  ] 19/81, 33.3 task/s, elapsed: 1s, ETA:     2s[  ] 20/81, 33.3 task/s, elapsed: 1s, ETA:     2s[  ] 21/81, 33.4 task/s, elapsed: 1s, ETA:     2s[  ] 22/81, 33.4 task/s, elapsed: 1s, ETA:     2s[  ] 23/81, 33.4 task/s, elapsed: 1s, ETA:     2s[  ] 24/81, 33.5 task/s, elapsed: 1s, ETA:     2s[  ] 25/81, 33.5 task/s, elapsed: 1s, ETA:     2s[  ] 26/81, 33.5 task/s, elapsed: 1s, ETA:     2s[  ] 27/81, 33.5 task/s, elapsed: 1s, ETA:     2s[  ] 28/81, 33.5 task/s, elapsed: 1s, ETA:     2s[  ] 29/81, 33.5 task/s, elapsed: 1s, ETA:     2s[  ] 30/81, 33.5 task/s, elapsed: 1s, ETA:     2s[  ] 31/81, 33.5 task/s, elapsed: 1s, ETA:     1s[  ] 32/81, 33.4 task/s, elapsed: 1s, ETA:     1s[  ] 33/81, 33.4 task/s, elapsed: 1s, ETA:     1s[  ] 34/81, 33.4 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 33.4 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 33.4 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 33.3 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 33.3 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 33.3 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 33.3 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 33.3 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 33.3 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 33.3 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 33.3 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 33.4 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 33.4 task/s, elapsed: 1s, ETA:     1s[> ] 47/81, 33.4 task/s, elapsed: 1s, ETA:     1s[> ] 48/81, 33.4 task/s, elapsed: 1s, ETA:     1s[> ] 49/81, 33.4 task/s, elapsed: 1s, ETA:     1s[> ] 50/81, 33.4 task/s, elapsed: 1s, ETA:     1s[> ] 51/81, 33.3 task/s, elapsed: 2s, ETA:     1s[> ] 52/81, 33.3 task/s, elapsed: 2s, ETA:     1s[> ] 53/81, 33.3 task/s, elapsed: 2s, ETA:     1s[> ] 54/81, 33.3 task/s, elapsed: 2s, ETA:     1s[> ] 55/81, 33.3 task/s, elapsed: 2s, ETA:     1s[> ] 56/81, 29.7 task/s, elapsed: 2s, ETA:     1s[> ] 57/81, 29.7 task/s, elapsed: 2s, ETA:     1s[> ] 58/81, 29.8 task/s, elapsed: 2s, ETA:     1s[> ] 59/81, 29.9 task/s, elapsed: 2s, ETA:     1s[> ] 60/81, 29.9 task/s, elapsed: 2s, ETA:     1s[> ] 61/81, 29.9 task/s, elapsed: 2s, ETA:     1s[> ] 62/81, 30.0 task/s, elapsed: 2s, ETA:     1s[> ] 63/81, 30.0 task/s, elapsed: 2s, ETA:     1s[> ] 64/81, 30.0 task/s, elapsed: 2s, ETA:     1s[> ] 65/81, 30.0 task/s, elapsed: 2s, ETA:     1s[> ] 66/81, 30.1 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 30.1 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 30.0 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 30.0 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 29.2 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 29.2 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 29.2 task/s, elapsed: 2s, ETA:     0s[> ] 73/81, 29.3 task/s, elapsed: 2s, ETA:     0s[> ] 74/81, 29.3 task/s, elapsed: 3s, ETA:     0s[> ] 75/81, 29.4 task/s, elapsed: 3s, ETA:     0s[> ] 76/81, 29.4 task/s, elapsed: 3s, ETA:     0s[> ] 77/81, 29.5 task/s, elapsed: 3s, ETA:     0s[> ] 78/81, 29.5 task/s, elapsed: 3s, ETA:     0s[> ] 79/81, 29.6 task/s, elapsed: 3s, ETA:     0s[> ] 80/81, 29.6 task/s, elapsed: 3s, ETA:     0s[>>] 81/81, 29.6 task/s, elapsed: 3s, ETA:     0s
Results writes to /tmp/tmp44bwlcze/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7f2855014070>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 54% 44/81 [00:00<00:00, 431.17it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0327
mATE: 0.9064
mASE: 0.8379
mAOE: 1.1139
mAVE: 0.8528
mAAE: 0.8528
NDS: 0.0714
Eval time: 2.5s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.227 	0.720 	0.345 	1.466 	0.234 	0.141 
truck               	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bus                 	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.100 	0.540 	0.347 	1.558 	0.589 	0.681 
motorcycle          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.000 	0.804 	0.687 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-28 05:30:53,286 - mmdet3d - INFO - Epoch(val) [5][41]	object/car_ap_dist_0.5: 0.0151, object/car_ap_dist_1.0: 0.1493, object/car_ap_dist_2.0: 0.3443, object/car_ap_dist_4.0: 0.3993, object/car_trans_err: 0.7198, object/car_scale_err: 0.3448, object/car_orient_err: 1.4664, object/car_vel_err: 0.2336, object/car_attr_err: 0.1415, object/mATE: 0.9064, object/mASE: 0.8379, object/mAOE: 1.1139, object/mAVE: 0.8528, object/mAAE: 0.8528, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0000, object/truck_ap_dist_2.0: 0.0000, object/truck_ap_dist_4.0: 0.0000, object/truck_trans_err: 1.0000, object/truck_scale_err: 1.0000, object/truck_orient_err: 1.0000, object/truck_vel_err: 1.0000, object/truck_attr_err: 1.0000, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0000, object/bus_ap_dist_4.0: 0.0000, object/bus_trans_err: 1.0000, object/bus_scale_err: 1.0000, object/bus_orient_err: 1.0000, object/bus_vel_err: 1.0000, object/bus_attr_err: 1.0000, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 1.0000, object/motorcycle_scale_err: 1.0000, object/motorcycle_orient_err: 1.0000, object/motorcycle_vel_err: 1.0000, object/motorcycle_attr_err: 1.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0432, object/pedestrian_ap_dist_1.0: 0.0729, object/pedestrian_ap_dist_2.0: 0.1070, object/pedestrian_ap_dist_4.0: 0.1783, object/pedestrian_trans_err: 0.5395, object/pedestrian_scale_err: 0.3475, object/pedestrian_orient_err: 1.5583, object/pedestrian_vel_err: 0.5892, object/pedestrian_attr_err: 0.6807, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0000, object/traffic_cone_ap_dist_2.0: 0.0000, object/traffic_cone_ap_dist_4.0: 0.0000, object/traffic_cone_trans_err: 0.8043, object/traffic_cone_scale_err: 0.6870, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.0714, object/map: 0.0327
2025-04-28 05:31:36,442 - mmdet3d - INFO - Epoch [6][50/815]	lr: 1.358e-05, eta: 0:10:23, time: 0.862, data_time: 0.067, memory: 13375, loss/object/loss_heatmap: 0.8885, loss/object/layer_-1_loss_cls: 0.2235, loss/object/layer_-1_loss_bbox: 1.4291, stats/object/matched_ious: 0.2538, loss: 2.5411, grad_norm: 6.3629
2025-04-28 05:32:17,357 - mmdet3d - INFO - Epoch [6][100/815]	lr: 1.358e-05, eta: 0:09:42, time: 0.818, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 0.9618, loss/object/layer_-1_loss_cls: 0.2278, loss/object/layer_-1_loss_bbox: 1.5783, stats/object/matched_ious: 0.2473, loss: 2.7678, grad_norm: 6.8498
2025-04-28 05:32:58,147 - mmdet3d - INFO - Epoch [6][150/815]	lr: 1.358e-05, eta: 0:09:01, time: 0.816, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 0.9672, loss/object/layer_-1_loss_cls: 0.2208, loss/object/layer_-1_loss_bbox: 1.6255, stats/object/matched_ious: 0.2347, loss: 2.8135, grad_norm: 6.6258
2025-04-28 05:33:38,988 - mmdet3d - INFO - Epoch [6][200/815]	lr: 1.358e-05, eta: 0:08:21, time: 0.817, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 0.9718, loss/object/layer_-1_loss_cls: 0.2264, loss/object/layer_-1_loss_bbox: 1.6513, stats/object/matched_ious: 0.2371, loss: 2.8495, grad_norm: 7.0808
2025-04-28 05:34:20,160 - mmdet3d - INFO - Epoch [6][250/815]	lr: 1.358e-05, eta: 0:07:40, time: 0.823, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 0.9495, loss/object/layer_-1_loss_cls: 0.2194, loss/object/layer_-1_loss_bbox: 1.6369, stats/object/matched_ious: 0.2334, loss: 2.8059, grad_norm: 6.2869
2025-04-28 05:35:01,474 - mmdet3d - INFO - Epoch [6][300/815]	lr: 1.358e-05, eta: 0:06:59, time: 0.826, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 0.8866, loss/object/layer_-1_loss_cls: 0.2163, loss/object/layer_-1_loss_bbox: 1.6143, stats/object/matched_ious: 0.2519, loss: 2.7172, grad_norm: 6.4407
2025-04-28 05:35:42,952 - mmdet3d - INFO - Epoch [6][350/815]	lr: 1.358e-05, eta: 0:06:19, time: 0.829, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 0.8944, loss/object/layer_-1_loss_cls: 0.2072, loss/object/layer_-1_loss_bbox: 1.6651, stats/object/matched_ious: 0.2265, loss: 2.7667, grad_norm: 5.6704
2025-04-28 05:36:24,249 - mmdet3d - INFO - Epoch [6][400/815]	lr: 1.358e-05, eta: 0:05:38, time: 0.826, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 0.9485, loss/object/layer_-1_loss_cls: 0.2179, loss/object/layer_-1_loss_bbox: 1.6184, stats/object/matched_ious: 0.2389, loss: 2.7848, grad_norm: 6.7154
2025-04-28 05:37:05,371 - mmdet3d - INFO - Epoch [6][450/815]	lr: 1.358e-05, eta: 0:04:57, time: 0.822, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 0.9072, loss/object/layer_-1_loss_cls: 0.2161, loss/object/layer_-1_loss_bbox: 1.5932, stats/object/matched_ious: 0.2349, loss: 2.7165, grad_norm: 7.1714
2025-04-28 05:37:46,810 - mmdet3d - INFO - Epoch [6][500/815]	lr: 1.358e-05, eta: 0:04:16, time: 0.829, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 0.9586, loss/object/layer_-1_loss_cls: 0.2200, loss/object/layer_-1_loss_bbox: 1.7112, stats/object/matched_ious: 0.2385, loss: 2.8898, grad_norm: 6.7422
2025-04-28 05:38:29,122 - mmdet3d - INFO - Epoch [6][550/815]	lr: 1.358e-05, eta: 0:03:36, time: 0.846, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 0.9033, loss/object/layer_-1_loss_cls: 0.2177, loss/object/layer_-1_loss_bbox: 1.5594, stats/object/matched_ious: 0.2529, loss: 2.6803, grad_norm: 6.8533
2025-04-28 05:39:10,408 - mmdet3d - INFO - Epoch [6][600/815]	lr: 1.358e-05, eta: 0:02:55, time: 0.826, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 0.9596, loss/object/layer_-1_loss_cls: 0.2153, loss/object/layer_-1_loss_bbox: 1.6526, stats/object/matched_ious: 0.2396, loss: 2.8274, grad_norm: 7.1739
2025-04-28 05:39:51,631 - mmdet3d - INFO - Epoch [6][650/815]	lr: 1.358e-05, eta: 0:02:14, time: 0.824, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 0.8899, loss/object/layer_-1_loss_cls: 0.2048, loss/object/layer_-1_loss_bbox: 1.5750, stats/object/matched_ious: 0.2414, loss: 2.6698, grad_norm: 6.2531
2025-04-28 05:40:33,092 - mmdet3d - INFO - Epoch [6][700/815]	lr: 1.358e-05, eta: 0:01:33, time: 0.829, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 0.9534, loss/object/layer_-1_loss_cls: 0.2141, loss/object/layer_-1_loss_bbox: 1.6187, stats/object/matched_ious: 0.2378, loss: 2.7863, grad_norm: 6.8339
2025-04-28 05:41:14,334 - mmdet3d - INFO - Epoch [6][750/815]	lr: 1.358e-05, eta: 0:00:53, time: 0.825, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 0.9121, loss/object/layer_-1_loss_cls: 0.2184, loss/object/layer_-1_loss_bbox: 1.4990, stats/object/matched_ious: 0.2486, loss: 2.6295, grad_norm: 6.8705
2025-04-28 05:41:55,570 - mmdet3d - INFO - Epoch [6][800/815]	lr: 1.358e-05, eta: 0:00:12, time: 0.825, data_time: 0.010, memory: 13375, loss/object/loss_heatmap: 0.9144, loss/object/layer_-1_loss_cls: 0.2152, loss/object/layer_-1_loss_bbox: 1.6007, stats/object/matched_ious: 0.2464, loss: 2.7303, grad_norm: 6.4548
2025-04-28 05:42:07,838 - mmdet3d - INFO - Saving checkpoint at 6 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 3s, ETA:   259s[  ] 2/81, 0.6 task/s, elapsed: 3s, ETA:   128s[  ] 3/81, 0.9 task/s, elapsed: 3s, ETA:    91s[  ] 4/81, 1.1 task/s, elapsed: 3s, ETA:    67s[  ] 5/81, 1.3 task/s, elapsed: 4s, ETA:    57s[  ] 6/81, 1.6 task/s, elapsed: 4s, ETA:    47s[  ] 7/81, 1.6 task/s, elapsed: 4s, ETA:    45s[  ] 8/81, 1.9 task/s, elapsed: 4s, ETA:    39s[  ] 9/81, 2.0 task/s, elapsed: 5s, ETA:    37s[  ] 10/81, 2.2 task/s, elapsed: 5s, ETA:    33s[  ] 11/81, 2.3 task/s, elapsed: 5s, ETA:    31s[  ] 12/81, 2.5 task/s, elapsed: 5s, ETA:    28s[  ] 13/81, 2.5 task/s, elapsed: 5s, ETA:    27s[  ] 14/81, 2.7 task/s, elapsed: 5s, ETA:    25s[  ] 15/81, 2.5 task/s, elapsed: 6s, ETA:    26s[  ] 16/81, 2.7 task/s, elapsed: 6s, ETA:    24s[  ] 17/81, 2.7 task/s, elapsed: 6s, ETA:    23s[  ] 18/81, 2.9 task/s, elapsed: 6s, ETA:    22s[  ] 19/81, 2.9 task/s, elapsed: 6s, ETA:    21s[  ] 20/81, 3.1 task/s, elapsed: 6s, ETA:    20s[  ] 21/81, 3.1 task/s, elapsed: 7s, ETA:    19s[  ] 22/81, 3.3 task/s, elapsed: 7s, ETA:    18s[  ] 23/81, 3.1 task/s, elapsed: 7s, ETA:    19s[  ] 24/81, 3.2 task/s, elapsed: 7s, ETA:    18s[  ] 25/81, 3.2 task/s, elapsed: 8s, ETA:    17s[  ] 26/81, 3.3 task/s, elapsed: 8s, ETA:    16s[  ] 27/81, 3.4 task/s, elapsed: 8s, ETA:    16s[  ] 28/81, 3.5 task/s, elapsed: 8s, ETA:    15s[  ] 29/81, 3.5 task/s, elapsed: 8s, ETA:    15s[  ] 30/81, 3.6 task/s, elapsed: 8s, ETA:    14s[  ] 31/81, 3.4 task/s, elapsed: 9s, ETA:    15s[  ] 32/81, 3.5 task/s, elapsed: 9s, ETA:    14s[  ] 33/81, 3.5 task/s, elapsed: 9s, ETA:    14s[  ] 34/81, 3.6 task/s, elapsed: 9s, ETA:    13s[  ] 35/81, 3.6 task/s, elapsed: 10s, ETA:    13s[  ] 36/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 37/81, 3.7 task/s, elapsed: 10s, ETA:    12s[  ] 38/81, 3.8 task/s, elapsed: 10s, ETA:    11s[  ] 39/81, 3.6 task/s, elapsed: 11s, ETA:    12s[  ] 40/81, 3.7 task/s, elapsed: 11s, ETA:    11s[> ] 41/81, 3.7 task/s, elapsed: 11s, ETA:    11s[> ] 42/81, 3.8 task/s, elapsed: 11s, ETA:    10s[> ] 43/81, 3.8 task/s, elapsed: 11s, ETA:    10s[> ] 44/81, 3.9 task/s, elapsed: 11s, ETA:     9s[> ] 45/81, 3.9 task/s, elapsed: 12s, ETA:     9s[> ] 46/81, 4.0 task/s, elapsed: 12s, ETA:     9s[> ] 47/81, 3.8 task/s, elapsed: 12s, ETA:     9s[> ] 48/81, 3.9 task/s, elapsed: 12s, ETA:     8s[> ] 49/81, 3.9 task/s, elapsed: 13s, ETA:     8s[> ] 50/81, 4.0 task/s, elapsed: 13s, ETA:     8s[> ] 51/81, 4.0 task/s, elapsed: 13s, ETA:     8s[> ] 52/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 53/81, 4.0 task/s, elapsed: 13s, ETA:     7s[> ] 54/81, 4.1 task/s, elapsed: 13s, ETA:     7s[> ] 55/81, 4.0 task/s, elapsed: 14s, ETA:     7s[> ] 56/81, 4.0 task/s, elapsed: 14s, ETA:     6s[> ] 57/81, 4.0 task/s, elapsed: 14s, ETA:     6s[> ] 58/81, 4.1 task/s, elapsed: 14s, ETA:     6s[> ] 59/81, 4.1 task/s, elapsed: 14s, ETA:     5s[> ] 60/81, 4.2 task/s, elapsed: 14s, ETA:     5s[> ] 61/81, 4.1 task/s, elapsed: 15s, ETA:     5s[> ] 62/81, 4.2 task/s, elapsed: 15s, ETA:     5s[> ] 63/81, 4.2 task/s, elapsed: 15s, ETA:     4s[> ] 64/81, 4.3 task/s, elapsed: 15s, ETA:     4s[> ] 65/81, 4.2 task/s, elapsed: 16s, ETA:     4s[> ] 66/81, 4.2 task/s, elapsed: 16s, ETA:     4s[> ] 67/81, 4.2 task/s, elapsed: 16s, ETA:     3s[> ] 68/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 69/81, 4.3 task/s, elapsed: 16s, ETA:     3s[> ] 70/81, 4.4 task/s, elapsed: 16s, ETA:     3s[> ] 71/81, 4.3 task/s, elapsed: 16s, ETA:     2s[> ] 72/81, 4.4 task/s, elapsed: 16s, ETA:     2s[> ] 73/81, 4.4 task/s, elapsed: 17s, ETA:     2s[> ] 74/81, 4.5 task/s, elapsed: 17s, ETA:     2s[> ] 75/81, 4.4 task/s, elapsed: 17s, ETA:     1s[> ] 76/81, 4.4 task/s, elapsed: 17s, ETA:     1s[> ] 77/81, 4.4 task/s, elapsed: 17s, ETA:     1s[> ] 78/81, 4.5 task/s, elapsed: 17s, ETA:     1s[> ] 79/81, 4.5 task/s, elapsed: 18s, ETA:     0s[> ] 80/81, 4.5 task/s, elapsed: 18s, ETA:     0s[>>] 81/81, 4.5 task/s, elapsed: 18s, ETA:     0s[>>] 82/81, 4.6 task/s, elapsed: 18s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 33.7 task/s, elapsed: 0s, ETA:     2s[  ] 2/81, 34.0 task/s, elapsed: 0s, ETA:     2s[  ] 3/81, 34.5 task/s, elapsed: 0s, ETA:     2s[  ] 4/81, 34.6 task/s, elapsed: 0s, ETA:     2s[  ] 5/81, 34.6 task/s, elapsed: 0s, ETA:     2s[  ] 6/81, 34.5 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 17/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 18/81, 34.4 task/s, elapsed: 1s, ETA:     2s[  ] 19/81, 34.4 task/s, elapsed: 1s, ETA:     2s[  ] 20/81, 34.5 task/s, elapsed: 1s, ETA:     2s[  ] 21/81, 34.5 task/s, elapsed: 1s, ETA:     2s[  ] 22/81, 34.6 task/s, elapsed: 1s, ETA:     2s[  ] 23/81, 34.7 task/s, elapsed: 1s, ETA:     2s[  ] 24/81, 34.7 task/s, elapsed: 1s, ETA:     2s[  ] 25/81, 34.7 task/s, elapsed: 1s, ETA:     2s[  ] 26/81, 34.7 task/s, elapsed: 1s, ETA:     2s[  ] 27/81, 34.7 task/s, elapsed: 1s, ETA:     2s[  ] 28/81, 34.7 task/s, elapsed: 1s, ETA:     2s[  ] 29/81, 34.7 task/s, elapsed: 1s, ETA:     1s[  ] 30/81, 34.7 task/s, elapsed: 1s, ETA:     1s[  ] 31/81, 34.7 task/s, elapsed: 1s, ETA:     1s[  ] 32/81, 34.6 task/s, elapsed: 1s, ETA:     1s[  ] 33/81, 34.6 task/s, elapsed: 1s, ETA:     1s[  ] 34/81, 34.6 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 34.5 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 34.5 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 34.5 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 34.5 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 34.5 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 34.5 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 34.5 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 34.4 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 34.4 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 30.1 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 30.2 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 30.3 task/s, elapsed: 2s, ETA:     1s[> ] 47/81, 30.4 task/s, elapsed: 2s, ETA:     1s[> ] 48/81, 30.4 task/s, elapsed: 2s, ETA:     1s[> ] 49/81, 30.5 task/s, elapsed: 2s, ETA:     1s[> ] 50/81, 30.5 task/s, elapsed: 2s, ETA:     1s[> ] 51/81, 30.6 task/s, elapsed: 2s, ETA:     1s[> ] 52/81, 30.6 task/s, elapsed: 2s, ETA:     1s[> ] 53/81, 30.7 task/s, elapsed: 2s, ETA:     1s[> ] 54/81, 30.8 task/s, elapsed: 2s, ETA:     1s[> ] 55/81, 30.8 task/s, elapsed: 2s, ETA:     1s[> ] 56/81, 30.9 task/s, elapsed: 2s, ETA:     1s[> ] 57/81, 30.9 task/s, elapsed: 2s, ETA:     1s[> ] 58/81, 31.0 task/s, elapsed: 2s, ETA:     1s[> ] 59/81, 31.0 task/s, elapsed: 2s, ETA:     1s[> ] 60/81, 31.1 task/s, elapsed: 2s, ETA:     1s[> ] 61/81, 31.1 task/s, elapsed: 2s, ETA:     1s[> ] 62/81, 31.1 task/s, elapsed: 2s, ETA:     1s[> ] 63/81, 31.2 task/s, elapsed: 2s, ETA:     1s[> ] 64/81, 31.2 task/s, elapsed: 2s, ETA:     1s[> ] 65/81, 31.3 task/s, elapsed: 2s, ETA:     1s[> ] 66/81, 31.3 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 31.4 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 31.4 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 31.5 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 31.5 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 31.6 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 31.6 task/s, elapsed: 2s, ETA:     0s[> ] 73/81, 31.7 task/s, elapsed: 2s, ETA:     0s[> ] 74/81, 31.7 task/s, elapsed: 2s, ETA:     0s[> ] 75/81, 31.7 task/s, elapsed: 2s, ETA:     0s[> ] 76/81, 31.7 task/s, elapsed: 2s, ETA:     0s[> ] 77/81, 31.8 task/s, elapsed: 2s, ETA:     0s[> ] 78/81, 31.8 task/s, elapsed: 2s, ETA:     0s[> ] 79/81, 31.8 task/s, elapsed: 2s, ETA:     0s[> ] 80/81, 31.9 task/s, elapsed: 3s, ETA:     0s[>>] 81/81, 31.9 task/s, elapsed: 3s, ETA:     0s
Results writes to /tmp/tmp7tjzsvgi/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7f28561cf850>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 54% 44/81 [00:00<00:00, 436.39it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0389
mATE: 0.8681
mASE: 0.8092
mAOE: 1.1996
mAVE: 0.7355
mAAE: 0.7240
NDS: 0.1058
Eval time: 2.5s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.256 	0.680 	0.273 	1.419 	0.287 	0.179 
truck               	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bus                 	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.133 	0.543 	0.344 	1.577 	0.503 	0.614 
motorcycle          	0.000 	0.516 	0.799 	1.801 	0.093 	0.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.000 	0.941 	0.676 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-28 05:42:41,203 - mmdet3d - INFO - Epoch(val) [6][41]	object/car_ap_dist_0.5: 0.0306, object/car_ap_dist_1.0: 0.1750, object/car_ap_dist_2.0: 0.3736, object/car_ap_dist_4.0: 0.4430, object/car_trans_err: 0.6800, object/car_scale_err: 0.2731, object/car_orient_err: 1.4187, object/car_vel_err: 0.2874, object/car_attr_err: 0.1785, object/mATE: 0.8681, object/mASE: 0.8092, object/mAOE: 1.1996, object/mAVE: 0.7355, object/mAAE: 0.7240, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0000, object/truck_ap_dist_2.0: 0.0000, object/truck_ap_dist_4.0: 0.0000, object/truck_trans_err: 1.0000, object/truck_scale_err: 1.0000, object/truck_orient_err: 1.0000, object/truck_vel_err: 1.0000, object/truck_attr_err: 1.0000, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0000, object/bus_ap_dist_4.0: 0.0000, object/bus_trans_err: 1.0000, object/bus_scale_err: 1.0000, object/bus_orient_err: 1.0000, object/bus_vel_err: 1.0000, object/bus_attr_err: 1.0000, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 0.5162, object/motorcycle_scale_err: 0.7988, object/motorcycle_orient_err: 1.8008, object/motorcycle_vel_err: 0.0931, object/motorcycle_attr_err: 0.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0612, object/pedestrian_ap_dist_1.0: 0.1012, object/pedestrian_ap_dist_2.0: 0.1494, object/pedestrian_ap_dist_4.0: 0.2219, object/pedestrian_trans_err: 0.5431, object/pedestrian_scale_err: 0.3444, object/pedestrian_orient_err: 1.5769, object/pedestrian_vel_err: 0.5033, object/pedestrian_attr_err: 0.6138, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0000, object/traffic_cone_ap_dist_2.0: 0.0000, object/traffic_cone_ap_dist_4.0: 0.0000, object/traffic_cone_trans_err: 0.9415, object/traffic_cone_scale_err: 0.6761, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.1058, object/map: 0.0389
