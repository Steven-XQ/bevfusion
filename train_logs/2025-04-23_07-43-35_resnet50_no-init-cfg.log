2025-04-23 07:43:47,245 - mmdet3d - INFO - Config:
seed = 0
deterministic = False
checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
load_from = None
resume_from = None
cudnn_benchmark = False
fp16 = dict(loss_scale=dict(growth_interval=2000))
max_epochs = 6
runner = dict(type='CustomEpochBasedRunner', max_epochs=6)
dataset_type = 'NuScenesDataset'
dataset_root = 'data/nuscenes/'
gt_paste_stop_epoch = -1
reduce_beams = 32
load_dim = 5
use_dim = 5
load_augmented = None
point_cloud_range = [-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]
voxel_size = [0.075, 0.075, 0.2]
image_size = [256, 704]
augment2d = dict(
    resize=[[0.38, 0.55], [0.48, 0.48]],
    rotate=[-5.4, 5.4],
    gridmask=dict(prob=0.0, fixed_prob=True))
augment3d = dict(
    scale=[0.9, 1.1], rotate=[-0.78539816, 0.78539816], translate=0.5)
object_classes = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
map_classes = [
    'drivable_area', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area',
    'divider'
]
input_modality = dict(
    use_lidar=True,
    use_camera=True,
    use_radar=False,
    use_map=False,
    use_external=False)
train_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        load_augmented=None),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=0,
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        pad_empty_sweeps=True,
        remove_close=True,
        load_augmented=None),
    dict(
        type='LoadRadarPointsMultiSweeps',
        load_dim=18,
        sweeps_num=6,
        use_dim=[
            0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
            30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
            47, 48, 49, 50, 51, 52, 53, 54, 55, 56
        ],
        max_num=2500,
        compensate_velocity=True,
        filtering='none',
        normalize=False),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False),
    dict(
        type='ObjectPaste',
        stop_epoch=-1,
        db_sampler=dict(
            dataset_root='data/nuscenes/',
            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
            rate=1.0,
            prepare=dict(
                filter_by_difficulty=[-1],
                filter_by_min_points=dict(
                    car=5,
                    truck=5,
                    bus=5,
                    trailer=5,
                    construction_vehicle=5,
                    traffic_cone=5,
                    barrier=5,
                    motorcycle=5,
                    bicycle=5,
                    pedestrian=5)),
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            sample_groups=dict(
                car=2,
                truck=3,
                construction_vehicle=7,
                bus=4,
                trailer=6,
                barrier=2,
                motorcycle=6,
                bicycle=6,
                pedestrian=2,
                traffic_cone=2),
            points_loader=dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32))),
    dict(
        type='ImageAug3D',
        final_dim=[256, 704],
        resize_lim=[0.38, 0.55],
        bot_pct_lim=[0.0, 0.0],
        rot_lim=[-5.4, 5.4],
        rand_flip=True,
        is_train=True),
    dict(
        type='GlobalRotScaleTrans',
        resize_lim=[0.9, 1.1],
        rot_lim=[-0.78539816, 0.78539816],
        trans_lim=0.5,
        is_train=True),
    dict(type='RandomFlip3D'),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(
        type='ObjectNameFilter',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='ImageNormalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(
        type='GridMask',
        use_h=True,
        use_w=True,
        max_epoch=6,
        rotate=1,
        offset=False,
        ratio=0.5,
        mode=1,
        prob=0.0,
        fixed_prob=True),
    dict(type='PointShuffle'),
    dict(
        type='DefaultFormatBundle3D',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='Collect3D',
        keys=['img', 'points', 'radar', 'gt_bboxes_3d', 'gt_labels_3d'],
        meta_keys=[
            'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
            'lidar2image', 'camera2lidar', 'img_aug_matrix', 'lidar_aug_matrix'
        ]),
    dict(type='GTDepth', keyframe_only=True)
]
test_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        load_augmented=None),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        pad_empty_sweeps=True,
        remove_close=True,
        load_augmented=None),
    dict(
        type='LoadRadarPointsMultiSweeps',
        load_dim=18,
        sweeps_num=6,
        use_dim=[
            0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
            30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
            47, 48, 49, 50, 51, 52, 53, 54, 55, 56
        ],
        max_num=2500,
        compensate_velocity=True,
        filtering='none',
        normalize=False),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False),
    dict(
        type='ImageAug3D',
        final_dim=[256, 704],
        resize_lim=[0.48, 0.48],
        bot_pct_lim=[0.0, 0.0],
        rot_lim=[0.0, 0.0],
        rand_flip=False,
        is_train=False),
    dict(
        type='GlobalRotScaleTrans',
        resize_lim=[1.0, 1.0],
        rot_lim=[0.0, 0.0],
        trans_lim=0.0,
        is_train=False),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(
        type='ImageNormalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(
        type='DefaultFormatBundle3D',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='Collect3D',
        keys=['img', 'points', 'radar', 'gt_bboxes_3d', 'gt_labels_3d'],
        meta_keys=[
            'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
            'lidar2image', 'camera2lidar', 'img_aug_matrix', 'lidar_aug_matrix'
        ]),
    dict(type='GTDepth', keyframe_only=True)
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=4,
    train=dict(
        type='CBGSDataset',
        dataset=dict(
            type='NuScenesDataset',
            dataset_root='data/nuscenes/',
            ann_file='data/nuscenes/nuscenes_infos_train.pkl',
            pipeline=[
                dict(type='LoadMultiViewImageFromFiles', to_float32=True),
                dict(
                    type='LoadPointsFromFile',
                    coord_type='LIDAR',
                    load_dim=5,
                    use_dim=5,
                    reduce_beams=32,
                    load_augmented=None),
                dict(
                    type='LoadPointsFromMultiSweeps',
                    sweeps_num=0,
                    load_dim=5,
                    use_dim=5,
                    reduce_beams=32,
                    pad_empty_sweeps=True,
                    remove_close=True,
                    load_augmented=None),
                dict(
                    type='LoadRadarPointsMultiSweeps',
                    load_dim=18,
                    sweeps_num=6,
                    use_dim=[
                        0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26,
                        27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
                        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56
                    ],
                    max_num=2500,
                    compensate_velocity=True,
                    filtering='none',
                    normalize=False),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True,
                    with_attr_label=False),
                dict(
                    type='ObjectPaste',
                    stop_epoch=-1,
                    db_sampler=dict(
                        dataset_root='data/nuscenes/',
                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1],
                            filter_by_min_points=dict(
                                car=5,
                                truck=5,
                                bus=5,
                                trailer=5,
                                construction_vehicle=5,
                                traffic_cone=5,
                                barrier=5,
                                motorcycle=5,
                                bicycle=5,
                                pedestrian=5)),
                        classes=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        sample_groups=dict(
                            car=2,
                            truck=3,
                            construction_vehicle=7,
                            bus=4,
                            trailer=6,
                            barrier=2,
                            motorcycle=6,
                            bicycle=6,
                            pedestrian=2,
                            traffic_cone=2),
                        points_loader=dict(
                            type='LoadPointsFromFile',
                            coord_type='LIDAR',
                            load_dim=5,
                            use_dim=5,
                            reduce_beams=32))),
                dict(
                    type='ImageAug3D',
                    final_dim=[256, 704],
                    resize_lim=[0.38, 0.55],
                    bot_pct_lim=[0.0, 0.0],
                    rot_lim=[-5.4, 5.4],
                    rand_flip=True,
                    is_train=True),
                dict(
                    type='GlobalRotScaleTrans',
                    resize_lim=[0.9, 1.1],
                    rot_lim=[-0.78539816, 0.78539816],
                    trans_lim=0.5,
                    is_train=True),
                dict(type='RandomFlip3D'),
                dict(
                    type='PointsRangeFilter',
                    point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
                dict(
                    type='ObjectRangeFilter',
                    point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
                dict(
                    type='ObjectNameFilter',
                    classes=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(
                    type='ImageNormalize',
                    mean=[0.485, 0.456, 0.406],
                    std=[0.229, 0.224, 0.225]),
                dict(
                    type='GridMask',
                    use_h=True,
                    use_w=True,
                    max_epoch=6,
                    rotate=1,
                    offset=False,
                    ratio=0.5,
                    mode=1,
                    prob=0.0,
                    fixed_prob=True),
                dict(type='PointShuffle'),
                dict(
                    type='DefaultFormatBundle3D',
                    classes=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(
                    type='Collect3D',
                    keys=[
                        'img', 'points', 'radar', 'gt_bboxes_3d',
                        'gt_labels_3d'
                    ],
                    meta_keys=[
                        'camera_intrinsics', 'camera2ego', 'lidar2ego',
                        'lidar2camera', 'lidar2image', 'camera2lidar',
                        'img_aug_matrix', 'lidar_aug_matrix'
                    ]),
                dict(type='GTDepth', keyframe_only=True)
            ],
            object_classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            map_classes=[
                'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
                'carpark_area', 'divider'
            ],
            modality=dict(
                use_lidar=True,
                use_camera=True,
                use_radar=False,
                use_map=False,
                use_external=False),
            test_mode=False,
            use_valid_flag=True,
            box_type_3d='LiDAR')),
    val=dict(
        type='NuScenesDataset',
        dataset_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                load_augmented=None),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                pad_empty_sweeps=True,
                remove_close=True,
                load_augmented=None),
            dict(
                type='LoadRadarPointsMultiSweeps',
                load_dim=18,
                sweeps_num=6,
                use_dim=[
                    0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
                    28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
                    43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56
                ],
                max_num=2500,
                compensate_velocity=True,
                filtering='none',
                normalize=False),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False),
            dict(
                type='ImageAug3D',
                final_dim=[256, 704],
                resize_lim=[0.48, 0.48],
                bot_pct_lim=[0.0, 0.0],
                rot_lim=[0.0, 0.0],
                rand_flip=False,
                is_train=False),
            dict(
                type='GlobalRotScaleTrans',
                resize_lim=[1.0, 1.0],
                rot_lim=[0.0, 0.0],
                trans_lim=0.0,
                is_train=False),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
            dict(
                type='ImageNormalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(
                type='DefaultFormatBundle3D',
                classes=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='Collect3D',
                keys=[
                    'img', 'points', 'radar', 'gt_bboxes_3d', 'gt_labels_3d'
                ],
                meta_keys=[
                    'camera_intrinsics', 'camera2ego', 'lidar2ego',
                    'lidar2camera', 'lidar2image', 'camera2lidar',
                    'img_aug_matrix', 'lidar_aug_matrix'
                ]),
            dict(type='GTDepth', keyframe_only=True)
        ],
        object_classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        map_classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area', 'divider'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        dataset_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                load_augmented=None),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                pad_empty_sweeps=True,
                remove_close=True,
                load_augmented=None),
            dict(
                type='LoadRadarPointsMultiSweeps',
                load_dim=18,
                sweeps_num=6,
                use_dim=[
                    0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
                    28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
                    43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56
                ],
                max_num=2500,
                compensate_velocity=True,
                filtering='none',
                normalize=False),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False),
            dict(
                type='ImageAug3D',
                final_dim=[256, 704],
                resize_lim=[0.48, 0.48],
                bot_pct_lim=[0.0, 0.0],
                rot_lim=[0.0, 0.0],
                rand_flip=False,
                is_train=False),
            dict(
                type='GlobalRotScaleTrans',
                resize_lim=[1.0, 1.0],
                rot_lim=[0.0, 0.0],
                trans_lim=0.0,
                is_train=False),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
            dict(
                type='ImageNormalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(
                type='DefaultFormatBundle3D',
                classes=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='Collect3D',
                keys=[
                    'img', 'points', 'radar', 'gt_bboxes_3d', 'gt_labels_3d'
                ],
                meta_keys=[
                    'camera_intrinsics', 'camera2ego', 'lidar2ego',
                    'lidar2camera', 'lidar2image', 'camera2lidar',
                    'img_aug_matrix', 'lidar_aug_matrix'
                ]),
            dict(type='GTDepth', keyframe_only=True)
        ],
        object_classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        map_classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area', 'divider'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=1,
    pipeline=[
        dict(type='LoadMultiViewImageFromFiles', to_float32=True),
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            reduce_beams=32,
            load_augmented=None),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=9,
            load_dim=5,
            use_dim=5,
            reduce_beams=32,
            pad_empty_sweeps=True,
            remove_close=True,
            load_augmented=None),
        dict(
            type='LoadRadarPointsMultiSweeps',
            load_dim=18,
            sweeps_num=6,
            use_dim=[
                0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
                45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56
            ],
            max_num=2500,
            compensate_velocity=True,
            filtering='none',
            normalize=False),
        dict(
            type='LoadAnnotations3D',
            with_bbox_3d=True,
            with_label_3d=True,
            with_attr_label=False),
        dict(
            type='ImageAug3D',
            final_dim=[256, 704],
            resize_lim=[0.48, 0.48],
            bot_pct_lim=[0.0, 0.0],
            rot_lim=[0.0, 0.0],
            rand_flip=False,
            is_train=False),
        dict(
            type='GlobalRotScaleTrans',
            resize_lim=[1.0, 1.0],
            rot_lim=[0.0, 0.0],
            trans_lim=0.0,
            is_train=False),
        dict(
            type='PointsRangeFilter',
            point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
        dict(
            type='ImageNormalize',
            mean=[0.485, 0.456, 0.406],
            std=[0.229, 0.224, 0.225]),
        dict(
            type='DefaultFormatBundle3D',
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ]),
        dict(
            type='Collect3D',
            keys=['img', 'points', 'radar', 'gt_bboxes_3d', 'gt_labels_3d'],
            meta_keys=[
                'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
                'lidar2image', 'camera2lidar', 'img_aug_matrix',
                'lidar_aug_matrix'
            ]),
        dict(type='GTDepth', keyframe_only=True)
    ])
radar_sweeps = 6
radar_max_points = 2500
radar_use_dims = [
    0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
    51, 52, 53, 54, 55, 56
]
radar_compensate_velocity = True
radar_filtering = 'none'
radar_voxel_size = [0.8, 0.8, 8]
radar_jitter = 0
radar_normalize = False
model = dict(
    type='BEVFusion',
    encoders=dict(
        camera=dict(
            neck=dict(
                type='GeneralizedLSSFPN',
                in_channels=[512, 1024, 2048],
                out_channels=256,
                start_level=0,
                num_outs=3,
                norm_cfg=dict(type='BN2d', requires_grad=True),
                act_cfg=dict(type='ReLU', inplace=True),
                upsample_cfg=dict(mode='bilinear', align_corners=False)),
            vtransform=dict(
                type='DepthLSSTransform',
                in_channels=256,
                out_channels=80,
                image_size=[256, 704],
                feature_size=[32, 88],
                xbound=[-54.0, 54.0, 0.3],
                ybound=[-54.0, 54.0, 0.3],
                zbound=[-10.0, 10.0, 20.0],
                dbound=[1.0, 60.0, 0.5],
                downsample=2),
            backbone=dict(
                type='ResNet',
                depth=50,
                num_stages=4,
                out_indices=[1, 2, 3],
                norm_cfg=dict(type='BN2d', requires_grad=True),
                norm_eval=False)),
        lidar=dict(
            voxelize=dict(
                max_num_points=10,
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0],
                voxel_size=[0.075, 0.075, 0.2],
                max_voxels=[120000, 160000]),
            backbone=dict(
                type='SparseEncoder',
                in_channels=5,
                sparse_shape=[1440, 1440, 41],
                output_channels=128,
                order=['conv', 'norm', 'act'],
                encoder_channels=[[16, 16, 32], [32, 32, 64], [64, 64, 128],
                                  [128, 128]],
                encoder_paddings=[[0, 0, 1], [0, 0, 1], [0, 0, [1, 1, 0]],
                                  [0, 0]],
                block_type='basicblock'))),
    fuser=dict(type='ConvFuser', in_channels=[80, 256], out_channels=256),
    heads=dict(
        map=None,
        object=dict(
            type='TransFusionHead',
            num_proposals=200,
            auxiliary=True,
            in_channels=512,
            hidden_channel=128,
            num_classes=10,
            num_decoder_layers=1,
            num_heads=8,
            nms_kernel_size=3,
            ffn_channel=256,
            dropout=0.1,
            bn_momentum=0.1,
            activation='relu',
            train_cfg=dict(
                dataset='nuScenes',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0],
                grid_size=[1440, 1440, 41],
                voxel_size=[0.075, 0.075, 0.2],
                out_size_factor=8,
                gaussian_overlap=0.1,
                min_radius=2,
                pos_weight=-1,
                code_weights=[
                    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2
                ],
                assigner=dict(
                    type='HungarianAssigner3D',
                    iou_calculator=dict(
                        type='BboxOverlaps3D', coordinate='lidar'),
                    cls_cost=dict(
                        type='FocalLossCost',
                        gamma=2.0,
                        alpha=0.25,
                        weight=0.15),
                    reg_cost=dict(type='BBoxBEVL1Cost', weight=0.25),
                    iou_cost=dict(type='IoU3DCost', weight=0.25))),
            test_cfg=dict(
                dataset='nuScenes',
                grid_size=[1440, 1440, 41],
                out_size_factor=8,
                voxel_size=[0.075, 0.075],
                pc_range=[-54.0, -54.0],
                nms_type=None),
            common_heads=dict(
                center=[2, 2],
                height=[1, 2],
                dim=[3, 2],
                rot=[2, 2],
                vel=[2, 2]),
            bbox_coder=dict(
                type='TransFusionBBoxCoder',
                pc_range=[-54.0, -54.0],
                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
                score_threshold=0.0,
                out_size_factor=8,
                voxel_size=[0.075, 0.075],
                code_size=10),
            loss_cls=dict(
                type='FocalLoss',
                use_sigmoid=True,
                gamma=2.0,
                alpha=0.25,
                reduction='mean',
                loss_weight=1.0),
            loss_heatmap=dict(
                type='GaussianFocalLoss', reduction='mean', loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', reduction='mean',
                           loss_weight=0.25))),
    decoder=dict(
        backbone=dict(
            type='SECOND',
            in_channels=256,
            out_channels=[128, 256],
            layer_nums=[5, 5],
            layer_strides=[1, 2],
            norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
            conv_cfg=dict(type='Conv2d', bias=False)),
        neck=dict(
            type='SECONDFPN',
            in_channels=[128, 256],
            out_channels=[256, 256],
            upsample_strides=[1, 2],
            norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
            upsample_cfg=dict(type='deconv', bias=False),
            use_conv_for_no_stride=True)))
optimizer = dict(type='AdamW', lr=0.0002, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.33333333,
    min_lr_ratio=0.001)
momentum_config = dict(policy='cyclic')
run_dir = 'runs/run-c9b79eff-8fec89aa'

2025-04-23 07:43:47,246 - mmdet3d - INFO - Set random seed to 0, deterministic mode: False
2025-04-23 07:43:47,756 - mmdet3d - INFO - load 3068 pedestrian database infos
2025-04-23 07:43:47,756 - mmdet3d - INFO - load 4082 car database infos
2025-04-23 07:43:47,756 - mmdet3d - INFO - load 773 traffic_cone database infos
2025-04-23 07:43:47,756 - mmdet3d - INFO - load 147 bicycle database infos
2025-04-23 07:43:47,756 - mmdet3d - INFO - load 1851 barrier database infos
2025-04-23 07:43:47,756 - mmdet3d - INFO - load 451 truck database infos
2025-04-23 07:43:47,756 - mmdet3d - INFO - load 337 bus database infos
2025-04-23 07:43:47,756 - mmdet3d - INFO - load 174 construction_vehicle database infos
2025-04-23 07:43:47,756 - mmdet3d - INFO - load 57 movable_object.pushable_pullable database infos
2025-04-23 07:43:47,756 - mmdet3d - INFO - load 179 motorcycle database infos
2025-04-23 07:43:47,756 - mmdet3d - INFO - load 13 movable_object.debris database infos
2025-04-23 07:43:47,756 - mmdet3d - INFO - load 59 trailer database infos
2025-04-23 07:43:47,756 - mmdet3d - INFO - load 25 human.pedestrian.personal_mobility database infos
2025-04-23 07:43:47,777 - mmdet3d - INFO - After filter database:
2025-04-23 07:43:47,778 - mmdet3d - INFO - load 2395 pedestrian database infos
2025-04-23 07:43:47,778 - mmdet3d - INFO - load 2287 car database infos
2025-04-23 07:43:47,778 - mmdet3d - INFO - load 381 traffic_cone database infos
2025-04-23 07:43:47,778 - mmdet3d - INFO - load 108 bicycle database infos
2025-04-23 07:43:47,778 - mmdet3d - INFO - load 1442 barrier database infos
2025-04-23 07:43:47,778 - mmdet3d - INFO - load 381 truck database infos
2025-04-23 07:43:47,778 - mmdet3d - INFO - load 275 bus database infos
2025-04-23 07:43:47,778 - mmdet3d - INFO - load 155 construction_vehicle database infos
2025-04-23 07:43:47,778 - mmdet3d - INFO - load 57 movable_object.pushable_pullable database infos
2025-04-23 07:43:47,778 - mmdet3d - INFO - load 124 motorcycle database infos
2025-04-23 07:43:47,778 - mmdet3d - INFO - load 13 movable_object.debris database infos
2025-04-23 07:43:47,778 - mmdet3d - INFO - load 57 trailer database infos
2025-04-23 07:43:47,778 - mmdet3d - INFO - load 25 human.pedestrian.personal_mobility database infos
/opt/conda/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  /opt/conda/conda-bld/pytorch_1639180588308/work/aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
2025-04-23 07:43:48,132 - mmdet3d - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2025-04-23 07:43:48,308 - mmdet3d - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-23 07:43:48,309 - mmdet3d - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-23 07:43:48,310 - mmdet3d - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-23 07:43:48,311 - mmdet3d - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-23 07:43:48,312 - mmdet3d - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-23 07:43:48,312 - mmdet3d - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-23 07:43:48,313 - mmdet3d - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-23 07:43:48,315 - mmdet3d - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-23 07:43:48,316 - mmdet3d - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-23 07:43:48,318 - mmdet3d - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-23 07:43:48,319 - mmdet3d - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-23 07:43:48,321 - mmdet3d - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-23 07:43:48,322 - mmdet3d - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-23 07:43:48,327 - mmdet3d - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-23 07:43:48,332 - mmdet3d - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-23 07:43:48,337 - mmdet3d - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
/opt/conda/lib/python3.8/site-packages/mmcv/runner/base_module.py:127: UserWarning: init_weights of ResNet has been called more than once.
  warnings.warn(f'init_weights of {self.__class__.__name__} has '
2025-04-23 07:43:48,365 - mmdet3d - INFO - Model:
BEVFusion(
  (encoders): ModuleDict(
    (camera): ModuleDict(
      (backbone): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): ResLayer(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (downsample): Sequential(
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
        )
        (layer2): ResLayer(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
        )
        (layer3): ResLayer(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (downsample): Sequential(
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
        )
        (layer4): ResLayer(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (downsample): Sequential(
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
        )
      )
      init_cfg=[{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
      (neck): GeneralizedLSSFPN(
        (lateral_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(3072, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
        (fpn_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
      )
      (vtransform): DepthLSSTransform(
        (dtransform): Sequential(
          (0): Conv2d(1, 8, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(8, 32, kernel_size=(5, 5), stride=(4, 4), padding=(2, 2))
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(32, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
        (depthnet): Sequential(
          (0): Conv2d(320, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 198, kernel_size=(1, 1), stride=(1, 1))
        )
        (downsample): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (4): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
      )
    )
    (lidar): ModuleDict(
      (voxelize): Voxelization(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0], max_num_points=10, max_voxels=(120000, 160000), deterministic=True)
      (backbone): SparseEncoder(
        (conv_input): SparseSequential(
          (0): SubMConv3d()
          (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (encoder_layers): SparseSequential(
          (encoder_layer1): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer2): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer3): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer4): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
          )
        )
        (conv_out): SparseSequential(
          (0): SparseConv3d()
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (fuser): ConvFuser(
    (0): Conv2d(336, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (decoder): ModuleDict(
    (backbone): SECOND(
      (blocks): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
          (9): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (10): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (11): ReLU(inplace=True)
          (12): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (13): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (14): ReLU(inplace=True)
          (15): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (16): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (17): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (10): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (11): ReLU(inplace=True)
          (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (13): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (14): ReLU(inplace=True)
          (15): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (16): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (17): ReLU(inplace=True)
        )
      )
    )
    init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
    (neck): SECONDFPN(
      (deblocks): ModuleList(
        (0): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
    init_cfg=[{'type': 'Kaiming', 'layer': 'ConvTranspose2d'}, {'type': 'Constant', 'layer': 'NaiveSyncBatchNorm2d', 'val': 1.0}]
  )
  (heads): ModuleDict(
    (object): TransFusionHead(
      (loss_cls): FocalLoss()
      (loss_bbox): L1Loss()
      (loss_iou): VarifocalLoss()
      (loss_heatmap): GaussianFocalLoss()
      (shared_conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (heatmap_head): Sequential(
        (0): ConvModule(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (1): Conv2d(128, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (class_encoding): Conv1d(10, 128, kernel_size=(1,), stride=(1,))
      (decoder): ModuleList(
        (0): TransformerDecoderLayer(
          (self_attn): MultiheadAttention(
            (out_proj): Linear(in_features=128, out_features=128, bias=True)
          )
          (multihead_attn): MultiheadAttention(
            (out_proj): Linear(in_features=128, out_features=128, bias=True)
          )
          (linear1): Linear(in_features=128, out_features=256, bias=True)
          (dropout): Dropout(p=0.1, inplace=False)
          (linear2): Linear(in_features=256, out_features=128, bias=True)
          (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (norm3): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (dropout1): Dropout(p=0.1, inplace=False)
          (dropout2): Dropout(p=0.1, inplace=False)
          (dropout3): Dropout(p=0.1, inplace=False)
          (self_posembed): PositionEmbeddingLearned(
            (position_embedding_head): Sequential(
              (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
            )
          )
          (cross_posembed): PositionEmbeddingLearned(
            (position_embedding_head): Sequential(
              (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
            )
          )
        )
      )
      (prediction_heads): ModuleList(
        (0): FFN(
          (center): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 1, kernel_size=(1,), stride=(1,))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 3, kernel_size=(1,), stride=(1,))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 10, kernel_size=(1,), stride=(1,))
          )
        )
      )
    )
  )
)
2025-04-23 07:43:54,637 - mmdet3d - INFO - Start running, host: root@1cf78a6d245c, work_dir: /bevfusion/runs/run-c9b79eff-8fec89aa
2025-04-23 07:43:54,638 - mmdet3d - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2025-04-23 07:43:54,638 - mmdet3d - INFO - workflow: [('train', 1)], max: 6 epochs
2025-04-23 07:43:54,640 - mmdet3d - INFO - Checkpoints will be saved to /bevfusion/runs/run-c9b79eff-8fec89aa by HardDiskBackend.
/bevfusion/mmdet3d/models/heads/bbox/transfusion.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  top_proposals_class = top_proposals // heatmap.shape[-1]
/bevfusion/mmdet3d/models/heads/bbox/transfusion.py:535: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  grid_size[:2] // self.train_cfg["out_size_factor"]
2025-04-23 07:44:02,015 - mmcv - INFO - Reducer buckets have been rebuilt in this iteration.
2025-04-23 07:44:43,294 - mmdet3d - INFO - Epoch [1][50/204]	lr: 7.973e-05, eta: 0:18:55, time: 0.968, data_time: 0.109, memory: 13903, loss/object/loss_heatmap: 770.8717, loss/object/layer_-1_loss_cls: 7.5431, loss/object/layer_-1_loss_bbox: 13.3594, stats/object/matched_ious: 0.0025, loss: 791.7741, grad_norm: nan
2025-04-23 07:45:25,069 - mmdet3d - INFO - Epoch [1][100/204]	lr: 9.307e-05, eta: 0:16:53, time: 0.835, data_time: 0.027, memory: 13947, loss/object/loss_heatmap: 10.5725, loss/object/layer_-1_loss_cls: 5.5745, loss/object/layer_-1_loss_bbox: 12.2862, stats/object/matched_ious: 0.0070, loss: 28.4332, grad_norm: 114.8891
2025-04-23 07:46:07,016 - mmdet3d - INFO - Epoch [1][150/204]	lr: 1.064e-04, eta: 0:15:45, time: 0.839, data_time: 0.026, memory: 13950, loss/object/loss_heatmap: 2.7388, loss/object/layer_-1_loss_cls: 3.5771, loss/object/layer_-1_loss_bbox: 6.1959, stats/object/matched_ious: 0.0321, loss: 12.5119, grad_norm: 14.8301
2025-04-23 07:46:49,067 - mmdet3d - INFO - Epoch [1][200/204]	lr: 1.197e-04, eta: 0:14:51, time: 0.841, data_time: 0.026, memory: 13950, loss/object/loss_heatmap: 2.4334, loss/object/layer_-1_loss_cls: 2.4637, loss/object/layer_-1_loss_bbox: 4.1760, stats/object/matched_ious: 0.0462, loss: 9.0731, grad_norm: 11.9410
2025-04-23 07:46:52,581 - mmdet3d - INFO - Saving checkpoint at 1 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 3s, ETA:   262s[  ] 2/81, 0.6 task/s, elapsed: 3s, ETA:   129s/bevfusion/mmdet3d/core/bbox/coders/transfusion_bbox_coder.py:96: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.post_center_range = torch.tensor(
[  ] 3/81, 0.9 task/s, elapsed: 3s, ETA:    90s[  ] 4/81, 1.2 task/s, elapsed: 3s, ETA:    66s[  ] 5/81, 1.4 task/s, elapsed: 4s, ETA:    55s[  ] 6/81, 1.6 task/s, elapsed: 4s, ETA:    46s[  ] 7/81, 1.8 task/s, elapsed: 4s, ETA:    41s[  ] 8/81, 2.1 task/s, elapsed: 4s, ETA:    35s[  ] 9/81, 2.0 task/s, elapsed: 4s, ETA:    35s[  ] 10/81, 2.3 task/s, elapsed: 4s, ETA:    31s[  ] 11/81, 2.4 task/s, elapsed: 5s, ETA:    29s[  ] 12/81, 2.6 task/s, elapsed: 5s, ETA:    27s[  ] 13/81, 2.7 task/s, elapsed: 5s, ETA:    25s[  ] 14/81, 2.9 task/s, elapsed: 5s, ETA:    23s[  ] 15/81, 3.0 task/s, elapsed: 5s, ETA:    22s[  ] 16/81, 3.2 task/s, elapsed: 5s, ETA:    21s[  ] 17/81, 3.2 task/s, elapsed: 5s, ETA:    20s[  ] 18/81, 3.4 task/s, elapsed: 5s, ETA:    18s[  ] 19/81, 3.5 task/s, elapsed: 5s, ETA:    18s[  ] 20/81, 3.6 task/s, elapsed: 5s, ETA:    17s[  ] 21/81, 3.5 task/s, elapsed: 6s, ETA:    17s[  ] 22/81, 3.6 task/s, elapsed: 6s, ETA:    16s[  ] 23/81, 3.7 task/s, elapsed: 6s, ETA:    16s[  ] 24/81, 3.8 task/s, elapsed: 6s, ETA:    15s[  ] 25/81, 3.9 task/s, elapsed: 6s, ETA:    14s[  ] 26/81, 4.0 task/s, elapsed: 6s, ETA:    14s[  ] 27/81, 4.0 task/s, elapsed: 7s, ETA:    13s[  ] 28/81, 4.2 task/s, elapsed: 7s, ETA:    13s[  ] 29/81, 4.2 task/s, elapsed: 7s, ETA:    12s[  ] 30/81, 4.4 task/s, elapsed: 7s, ETA:    12s[  ] 31/81, 4.4 task/s, elapsed: 7s, ETA:    11s[  ] 32/81, 4.5 task/s, elapsed: 7s, ETA:    11s[  ] 33/81, 4.3 task/s, elapsed: 8s, ETA:    11s[  ] 34/81, 4.5 task/s, elapsed: 8s, ETA:    11s[  ] 35/81, 4.5 task/s, elapsed: 8s, ETA:    10s[  ] 36/81, 4.6 task/s, elapsed: 8s, ETA:    10s[  ] 37/81, 4.6 task/s, elapsed: 8s, ETA:    10s[  ] 38/81, 4.7 task/s, elapsed: 8s, ETA:     9s[  ] 39/81, 4.7 task/s, elapsed: 8s, ETA:     9s[  ] 40/81, 4.8 task/s, elapsed: 8s, ETA:     8s[> ] 41/81, 4.8 task/s, elapsed: 8s, ETA:     8s[> ] 42/81, 5.0 task/s, elapsed: 8s, ETA:     8s[> ] 43/81, 4.9 task/s, elapsed: 9s, ETA:     8s[> ] 44/81, 5.1 task/s, elapsed: 9s, ETA:     7s[> ] 45/81, 4.9 task/s, elapsed: 9s, ETA:     7s[> ] 46/81, 5.0 task/s, elapsed: 9s, ETA:     7s[> ] 47/81, 5.0 task/s, elapsed: 9s, ETA:     7s[> ] 48/81, 5.1 task/s, elapsed: 9s, ETA:     7s[> ] 49/81, 5.1 task/s, elapsed: 10s, ETA:     6s[> ] 50/81, 5.2 task/s, elapsed: 10s, ETA:     6s[> ] 51/81, 5.2 task/s, elapsed: 10s, ETA:     6s[> ] 52/81, 5.3 task/s, elapsed: 10s, ETA:     6s[> ] 53/81, 5.3 task/s, elapsed: 10s, ETA:     5s[> ] 54/81, 5.4 task/s, elapsed: 10s, ETA:     5s[> ] 55/81, 5.3 task/s, elapsed: 10s, ETA:     5s[> ] 56/81, 5.4 task/s, elapsed: 10s, ETA:     5s[> ] 57/81, 5.3 task/s, elapsed: 11s, ETA:     5s[> ] 58/81, 5.3 task/s, elapsed: 11s, ETA:     4s[> ] 59/81, 5.3 task/s, elapsed: 11s, ETA:     4s[> ] 60/81, 5.4 task/s, elapsed: 11s, ETA:     4s[> ] 61/81, 5.4 task/s, elapsed: 11s, ETA:     4s[> ] 62/81, 5.5 task/s, elapsed: 11s, ETA:     3s[> ] 63/81, 5.5 task/s, elapsed: 11s, ETA:     3s[> ] 64/81, 5.6 task/s, elapsed: 11s, ETA:     3s[> ] 65/81, 5.6 task/s, elapsed: 12s, ETA:     3s[> ] 66/81, 5.7 task/s, elapsed: 12s, ETA:     3s[> ] 67/81, 5.7 task/s, elapsed: 12s, ETA:     2s[> ] 68/81, 5.7 task/s, elapsed: 12s, ETA:     2s[> ] 69/81, 5.5 task/s, elapsed: 12s, ETA:     2s[> ] 70/81, 5.6 task/s, elapsed: 12s, ETA:     2s[> ] 71/81, 5.6 task/s, elapsed: 13s, ETA:     2s[> ] 72/81, 5.7 task/s, elapsed: 13s, ETA:     2s[> ] 73/81, 5.7 task/s, elapsed: 13s, ETA:     1s[> ] 74/81, 5.8 task/s, elapsed: 13s, ETA:     1s[> ] 75/81, 5.8 task/s, elapsed: 13s, ETA:     1s[> ] 76/81, 5.8 task/s, elapsed: 13s, ETA:     1s[> ] 77/81, 5.8 task/s, elapsed: 13s, ETA:     1s[> ] 78/81, 5.9 task/s, elapsed: 13s, ETA:     1s[> ] 79/81, 5.9 task/s, elapsed: 13s, ETA:     0s[> ] 80/81, 5.9 task/s, elapsed: 13s, ETA:     0s[>>] 81/81, 5.8 task/s, elapsed: 14s, ETA:     0s[>>] 82/81, 5.8 task/s, elapsed: 14s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 33.3 task/s, elapsed: 0s, ETA:     2s[  ] 2/81, 37.1 task/s, elapsed: 0s, ETA:     2s[  ] 3/81, 38.7 task/s, elapsed: 0s, ETA:     2s[  ] 4/81, 39.8 task/s, elapsed: 0s, ETA:     2s[  ] 5/81, 40.4 task/s, elapsed: 0s, ETA:     2s[  ] 6/81, 40.8 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 41.1 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 41.4 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 41.5 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 41.7 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 41.8 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 41.9 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 42.0 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 42.1 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 42.2 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 42.3 task/s, elapsed: 0s, ETA:     2s[  ] 17/81, 42.3 task/s, elapsed: 0s, ETA:     2s[  ] 18/81, 42.4 task/s, elapsed: 0s, ETA:     1s[  ] 19/81, 42.5 task/s, elapsed: 0s, ETA:     1s[  ] 20/81, 42.5 task/s, elapsed: 0s, ETA:     1s[  ] 21/81, 42.5 task/s, elapsed: 0s, ETA:     1s[  ] 22/81, 42.6 task/s, elapsed: 1s, ETA:     1s[  ] 23/81, 42.6 task/s, elapsed: 1s, ETA:     1s[  ] 24/81, 42.6 task/s, elapsed: 1s, ETA:     1s[  ] 25/81, 42.6 task/s, elapsed: 1s, ETA:     1s[  ] 26/81, 42.6 task/s, elapsed: 1s, ETA:     1s[  ] 27/81, 42.6 task/s, elapsed: 1s, ETA:     1s[  ] 28/81, 42.6 task/s, elapsed: 1s, ETA:     1s[  ] 29/81, 42.6 task/s, elapsed: 1s, ETA:     1s[  ] 30/81, 42.6 task/s, elapsed: 1s, ETA:     1s[  ] 31/81, 42.7 task/s, elapsed: 1s, ETA:     1s[  ] 32/81, 42.7 task/s, elapsed: 1s, ETA:     1s[  ] 33/81, 42.7 task/s, elapsed: 1s, ETA:     1s[  ] 34/81, 42.7 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 42.7 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 42.7 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 42.7 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 42.6 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 42.6 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 42.6 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 42.6 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 42.6 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 42.7 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 42.7 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 42.7 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 42.7 task/s, elapsed: 1s, ETA:     1s[> ] 47/81, 42.7 task/s, elapsed: 1s, ETA:     1s[> ] 48/81, 42.7 task/s, elapsed: 1s, ETA:     1s[> ] 49/81, 42.7 task/s, elapsed: 1s, ETA:     1s[> ] 50/81, 42.6 task/s, elapsed: 1s, ETA:     1s[> ] 51/81, 42.7 task/s, elapsed: 1s, ETA:     1s[> ] 52/81, 42.7 task/s, elapsed: 1s, ETA:     1s[> ] 53/81, 42.7 task/s, elapsed: 1s, ETA:     1s[> ] 54/81, 42.7 task/s, elapsed: 1s, ETA:     1s[> ] 55/81, 42.8 task/s, elapsed: 1s, ETA:     1s[> ] 56/81, 42.8 task/s, elapsed: 1s, ETA:     1s[> ] 57/81, 42.8 task/s, elapsed: 1s, ETA:     1s[> ] 58/81, 42.8 task/s, elapsed: 1s, ETA:     1s[> ] 59/81, 42.8 task/s, elapsed: 1s, ETA:     1s[> ] 60/81, 42.7 task/s, elapsed: 1s, ETA:     0s[> ] 61/81, 42.7 task/s, elapsed: 1s, ETA:     0s[> ] 62/81, 42.7 task/s, elapsed: 1s, ETA:     0s[> ] 63/81, 42.7 task/s, elapsed: 1s, ETA:     0s[> ] 64/81, 42.7 task/s, elapsed: 1s, ETA:     0s[> ] 65/81, 42.7 task/s, elapsed: 2s, ETA:     0s[> ] 66/81, 42.8 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 42.8 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 42.8 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 42.8 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 42.8 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 42.8 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 42.8 task/s, elapsed: 2s, ETA:     0s[> ] 73/81, 42.8 task/s, elapsed: 2s, ETA:     0s[> ] 74/81, 42.8 task/s, elapsed: 2s, ETA:     0s[> ] 75/81, 42.8 task/s, elapsed: 2s, ETA:     0s[> ] 76/81, 42.8 task/s, elapsed: 2s, ETA:     0s[> ] 77/81, 42.8 task/s, elapsed: 2s, ETA:     0s[> ] 78/81, 42.9 task/s, elapsed: 2s, ETA:     0s[> ] 79/81, 42.9 task/s, elapsed: 2s, ETA:     0s[> ] 80/81, 42.9 task/s, elapsed: 2s, ETA:     0s[>>] 81/81, 42.9 task/s, elapsed: 2s, ETA:     0s
Results writes to /tmp/tmpljk0wl20/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7f0f9ea13bb0>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 35% 28/81 [00:00<00:00, 98.22it/s] 75% 61/81 [00:00<00:00, 174.72it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0000
mATE: 1.0000
mASE: 1.0000
mAOE: 1.0000
mAVE: 1.0000
mAAE: 1.0000
NDS: 0.0000
Eval time: 0.3s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
truck               	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bus                 	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
motorcycle          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.000 	1.000 	1.000 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-23 07:47:11,631 - mmdet3d - INFO - Epoch(val) [1][41]	object/car_ap_dist_0.5: 0.0000, object/car_ap_dist_1.0: 0.0000, object/car_ap_dist_2.0: 0.0000, object/car_ap_dist_4.0: 0.0000, object/car_trans_err: 1.0000, object/car_scale_err: 1.0000, object/car_orient_err: 1.0000, object/car_vel_err: 1.0000, object/car_attr_err: 1.0000, object/mATE: 1.0000, object/mASE: 1.0000, object/mAOE: 1.0000, object/mAVE: 1.0000, object/mAAE: 1.0000, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0000, object/truck_ap_dist_2.0: 0.0000, object/truck_ap_dist_4.0: 0.0000, object/truck_trans_err: 1.0000, object/truck_scale_err: 1.0000, object/truck_orient_err: 1.0000, object/truck_vel_err: 1.0000, object/truck_attr_err: 1.0000, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0000, object/bus_ap_dist_4.0: 0.0000, object/bus_trans_err: 1.0000, object/bus_scale_err: 1.0000, object/bus_orient_err: 1.0000, object/bus_vel_err: 1.0000, object/bus_attr_err: 1.0000, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 1.0000, object/motorcycle_scale_err: 1.0000, object/motorcycle_orient_err: 1.0000, object/motorcycle_vel_err: 1.0000, object/motorcycle_attr_err: 1.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0000, object/pedestrian_ap_dist_1.0: 0.0000, object/pedestrian_ap_dist_2.0: 0.0000, object/pedestrian_ap_dist_4.0: 0.0000, object/pedestrian_trans_err: 1.0000, object/pedestrian_scale_err: 1.0000, object/pedestrian_orient_err: 1.0000, object/pedestrian_vel_err: 1.0000, object/pedestrian_attr_err: 1.0000, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0000, object/traffic_cone_ap_dist_2.0: 0.0000, object/traffic_cone_ap_dist_4.0: 0.0000, object/traffic_cone_trans_err: 1.0000, object/traffic_cone_scale_err: 1.0000, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.0000, object/map: 0.0000
2025-04-23 07:47:57,208 - mmdet3d - INFO - Epoch [2][50/204]	lr: 1.252e-04, eta: 0:13:58, time: 0.911, data_time: 0.106, memory: 13950, loss/object/loss_heatmap: 2.2816, loss/object/layer_-1_loss_cls: 1.8674, loss/object/layer_-1_loss_bbox: 3.5132, stats/object/matched_ious: 0.0628, loss: 7.6622, grad_norm: 11.0717
2025-04-23 07:48:39,249 - mmdet3d - INFO - Epoch [2][100/204]	lr: 1.376e-04, eta: 0:13:12, time: 0.841, data_time: 0.026, memory: 13958, loss/object/loss_heatmap: 2.2537, loss/object/layer_-1_loss_cls: 1.3624, loss/object/layer_-1_loss_bbox: 3.1866, stats/object/matched_ious: 0.0643, loss: 6.8026, grad_norm: 11.3775
2025-04-23 07:49:21,248 - mmdet3d - INFO - Epoch [2][150/204]	lr: 1.500e-04, eta: 0:12:26, time: 0.840, data_time: 0.027, memory: 13958, loss/object/loss_heatmap: 1.9721, loss/object/layer_-1_loss_cls: 0.9926, loss/object/layer_-1_loss_bbox: 2.8370, stats/object/matched_ious: 0.0753, loss: 5.8016, grad_norm: 8.7841
2025-04-23 07:50:03,021 - mmdet3d - INFO - Epoch [2][200/204]	lr: 1.625e-04, eta: 0:11:41, time: 0.835, data_time: 0.028, memory: 13958, loss/object/loss_heatmap: 1.9460, loss/object/layer_-1_loss_cls: 0.9042, loss/object/layer_-1_loss_bbox: 2.8245, stats/object/matched_ious: 0.0902, loss: 5.6747, grad_norm: 9.0843
2025-04-23 07:50:06,573 - mmdet3d - INFO - Saving checkpoint at 2 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 4s, ETA:   297s[  ] 2/81, 0.5 task/s, elapsed: 4s, ETA:   147s[  ] 3/81, 0.8 task/s, elapsed: 4s, ETA:   101s[  ] 4/81, 1.0 task/s, elapsed: 4s, ETA:    75s[  ] 5/81, 1.2 task/s, elapsed: 4s, ETA:    62s[  ] 6/81, 1.5 task/s, elapsed: 4s, ETA:    51s[  ] 7/81, 1.6 task/s, elapsed: 4s, ETA:    45s[  ] 8/81, 1.9 task/s, elapsed: 4s, ETA:    39s[  ] 9/81, 2.0 task/s, elapsed: 5s, ETA:    36s[  ] 10/81, 2.2 task/s, elapsed: 5s, ETA:    32s[  ] 11/81, 2.3 task/s, elapsed: 5s, ETA:    30s[  ] 12/81, 2.5 task/s, elapsed: 5s, ETA:    27s[  ] 13/81, 2.4 task/s, elapsed: 5s, ETA:    28s[  ] 14/81, 2.6 task/s, elapsed: 5s, ETA:    26s[  ] 15/81, 2.7 task/s, elapsed: 6s, ETA:    24s[  ] 16/81, 2.9 task/s, elapsed: 6s, ETA:    23s[  ] 17/81, 2.9 task/s, elapsed: 6s, ETA:    22s[  ] 18/81, 3.1 task/s, elapsed: 6s, ETA:    20s[  ] 19/81, 3.2 task/s, elapsed: 6s, ETA:    20s[  ] 20/81, 3.3 task/s, elapsed: 6s, ETA:    18s[  ] 21/81, 3.4 task/s, elapsed: 6s, ETA:    18s[  ] 22/81, 3.5 task/s, elapsed: 6s, ETA:    17s[  ] 23/81, 3.6 task/s, elapsed: 6s, ETA:    16s[  ] 24/81, 3.7 task/s, elapsed: 6s, ETA:    15s[  ] 25/81, 3.6 task/s, elapsed: 7s, ETA:    16s[  ] 26/81, 3.7 task/s, elapsed: 7s, ETA:    15s[  ] 27/81, 3.8 task/s, elapsed: 7s, ETA:    14s[  ] 28/81, 3.9 task/s, elapsed: 7s, ETA:    14s[  ] 29/81, 3.9 task/s, elapsed: 7s, ETA:    13s[  ] 30/81, 4.1 task/s, elapsed: 7s, ETA:    13s[  ] 31/81, 4.1 task/s, elapsed: 8s, ETA:    12s[  ] 32/81, 4.2 task/s, elapsed: 8s, ETA:    12s[  ] 33/81, 4.2 task/s, elapsed: 8s, ETA:    11s[  ] 34/81, 4.4 task/s, elapsed: 8s, ETA:    11s[  ] 35/81, 4.4 task/s, elapsed: 8s, ETA:    11s[  ] 36/81, 4.5 task/s, elapsed: 8s, ETA:    10s[  ] 37/81, 4.3 task/s, elapsed: 9s, ETA:    10s[  ] 38/81, 4.4 task/s, elapsed: 9s, ETA:    10s[  ] 39/81, 4.4 task/s, elapsed: 9s, ETA:     9s[  ] 40/81, 4.6 task/s, elapsed: 9s, ETA:     9s[> ] 41/81, 4.6 task/s, elapsed: 9s, ETA:     9s[> ] 42/81, 4.7 task/s, elapsed: 9s, ETA:     8s[> ] 43/81, 4.7 task/s, elapsed: 9s, ETA:     8s[> ] 44/81, 4.8 task/s, elapsed: 9s, ETA:     8s[> ] 45/81, 4.8 task/s, elapsed: 9s, ETA:     8s[> ] 46/81, 4.9 task/s, elapsed: 9s, ETA:     7s[> ] 47/81, 4.9 task/s, elapsed: 10s, ETA:     7s[> ] 48/81, 5.0 task/s, elapsed: 10s, ETA:     7s[> ] 49/81, 4.8 task/s, elapsed: 10s, ETA:     7s[> ] 50/81, 4.9 task/s, elapsed: 10s, ETA:     6s[> ] 51/81, 4.9 task/s, elapsed: 10s, ETA:     6s[> ] 52/81, 5.0 task/s, elapsed: 10s, ETA:     6s[> ] 53/81, 5.0 task/s, elapsed: 11s, ETA:     6s[> ] 54/81, 5.1 task/s, elapsed: 11s, ETA:     5s[> ] 55/81, 5.1 task/s, elapsed: 11s, ETA:     5s[> ] 56/81, 5.2 task/s, elapsed: 11s, ETA:     5s[> ] 57/81, 5.2 task/s, elapsed: 11s, ETA:     5s[> ] 58/81, 5.3 task/s, elapsed: 11s, ETA:     4s[> ] 59/81, 5.3 task/s, elapsed: 11s, ETA:     4s[> ] 60/81, 5.4 task/s, elapsed: 11s, ETA:     4s[> ] 61/81, 5.2 task/s, elapsed: 12s, ETA:     4s[> ] 62/81, 5.3 task/s, elapsed: 12s, ETA:     4s[> ] 63/81, 5.3 task/s, elapsed: 12s, ETA:     3s[> ] 64/81, 5.4 task/s, elapsed: 12s, ETA:     3s[> ] 65/81, 5.3 task/s, elapsed: 12s, ETA:     3s[> ] 66/81, 5.4 task/s, elapsed: 12s, ETA:     3s[> ] 67/81, 5.4 task/s, elapsed: 12s, ETA:     3s[> ] 68/81, 5.5 task/s, elapsed: 12s, ETA:     2s[> ] 69/81, 5.5 task/s, elapsed: 13s, ETA:     2s[> ] 70/81, 5.6 task/s, elapsed: 13s, ETA:     2s[> ] 71/81, 5.6 task/s, elapsed: 13s, ETA:     2s[> ] 72/81, 5.6 task/s, elapsed: 13s, ETA:     2s[> ] 73/81, 5.5 task/s, elapsed: 13s, ETA:     1s[> ] 74/81, 5.5 task/s, elapsed: 13s, ETA:     1s[> ] 75/81, 5.5 task/s, elapsed: 14s, ETA:     1s[> ] 76/81, 5.6 task/s, elapsed: 14s, ETA:     1s[> ] 77/81, 5.6 task/s, elapsed: 14s, ETA:     1s[> ] 78/81, 5.7 task/s, elapsed: 14s, ETA:     1s[> ] 79/81, 5.7 task/s, elapsed: 14s, ETA:     0s[> ] 80/81, 5.7 task/s, elapsed: 14s, ETA:     0s[>>] 81/81, 5.7 task/s, elapsed: 14s, ETA:     0s[>>] 82/81, 5.8 task/s, elapsed: 14s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 24.0 task/s, elapsed: 0s, ETA:     3s[  ] 2/81, 25.8 task/s, elapsed: 0s, ETA:     3s[  ] 3/81, 27.8 task/s, elapsed: 0s, ETA:     3s[  ] 4/81, 29.1 task/s, elapsed: 0s, ETA:     3s[  ] 5/81, 30.0 task/s, elapsed: 0s, ETA:     3s[  ] 6/81, 30.3 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 30.4 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 30.8 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 30.9 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 31.2 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 31.4 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 31.6 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 31.7 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 31.8 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 31.8 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 31.8 task/s, elapsed: 1s, ETA:     2s[  ] 17/81, 31.9 task/s, elapsed: 1s, ETA:     2s[  ] 18/81, 31.9 task/s, elapsed: 1s, ETA:     2s[  ] 19/81, 32.0 task/s, elapsed: 1s, ETA:     2s[  ] 20/81, 32.0 task/s, elapsed: 1s, ETA:     2s[  ] 21/81, 32.0 task/s, elapsed: 1s, ETA:     2s[  ] 22/81, 32.0 task/s, elapsed: 1s, ETA:     2s[  ] 23/81, 32.0 task/s, elapsed: 1s, ETA:     2s[  ] 24/81, 32.0 task/s, elapsed: 1s, ETA:     2s[  ] 25/81, 31.9 task/s, elapsed: 1s, ETA:     2s[  ] 26/81, 31.9 task/s, elapsed: 1s, ETA:     2s[  ] 27/81, 31.9 task/s, elapsed: 1s, ETA:     2s[  ] 28/81, 31.8 task/s, elapsed: 1s, ETA:     2s[  ] 29/81, 31.8 task/s, elapsed: 1s, ETA:     2s[  ] 30/81, 31.8 task/s, elapsed: 1s, ETA:     2s[  ] 31/81, 31.8 task/s, elapsed: 1s, ETA:     2s[  ] 32/81, 31.8 task/s, elapsed: 1s, ETA:     2s[  ] 33/81, 31.8 task/s, elapsed: 1s, ETA:     2s[  ] 34/81, 31.8 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 31.7 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 31.7 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 31.6 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 31.6 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 31.6 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 31.5 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 31.5 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 31.6 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 31.6 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 31.7 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 31.7 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 31.8 task/s, elapsed: 1s, ETA:     1s[> ] 47/81, 31.8 task/s, elapsed: 1s, ETA:     1s[> ] 48/81, 31.8 task/s, elapsed: 2s, ETA:     1s[> ] 49/81, 31.8 task/s, elapsed: 2s, ETA:     1s[> ] 50/81, 31.8 task/s, elapsed: 2s, ETA:     1s[> ] 51/81, 31.8 task/s, elapsed: 2s, ETA:     1s[> ] 52/81, 31.8 task/s, elapsed: 2s, ETA:     1s[> ] 53/81, 31.8 task/s, elapsed: 2s, ETA:     1s[> ] 54/81, 31.8 task/s, elapsed: 2s, ETA:     1s[> ] 55/81, 31.7 task/s, elapsed: 2s, ETA:     1s[> ] 56/81, 31.7 task/s, elapsed: 2s, ETA:     1s[> ] 57/81, 31.7 task/s, elapsed: 2s, ETA:     1s[> ] 58/81, 31.7 task/s, elapsed: 2s, ETA:     1s[> ] 59/81, 31.8 task/s, elapsed: 2s, ETA:     1s[> ] 60/81, 31.7 task/s, elapsed: 2s, ETA:     1s[> ] 61/81, 31.7 task/s, elapsed: 2s, ETA:     1s[> ] 62/81, 31.8 task/s, elapsed: 2s, ETA:     1s[> ] 63/81, 31.8 task/s, elapsed: 2s, ETA:     1s[> ] 64/81, 31.9 task/s, elapsed: 2s, ETA:     1s[> ] 65/81, 31.9 task/s, elapsed: 2s, ETA:     1s[> ] 66/81, 31.9 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 31.9 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 31.8 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 31.9 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 31.9 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 31.8 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 31.8 task/s, elapsed: 2s, ETA:     0s[> ] 73/81, 31.9 task/s, elapsed: 2s, ETA:     0s[> ] 74/81, 31.9 task/s, elapsed: 2s, ETA:     0s[> ] 75/81, 31.9 task/s, elapsed: 2s, ETA:     0s[> ] 76/81, 31.9 task/s, elapsed: 2s, ETA:     0s[> ] 77/81, 31.9 task/s, elapsed: 2s, ETA:     0s[> ] 78/81, 31.3 task/s, elapsed: 2s, ETA:     0s[> ] 79/81, 31.0 task/s, elapsed: 3s, ETA:     0s[> ] 80/81, 31.0 task/s, elapsed: 3s, ETA:     0s[>>] 81/81, 31.1 task/s, elapsed: 3s, ETA:     0s
Results writes to /tmp/tmpc1nd8b1g/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7f0f9ebf4b80>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 48% 39/81 [00:00<00:00, 389.83it/s] 96% 78/81 [00:00<00:00, 352.18it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0059
mATE: 0.9920
mASE: 0.8772
mAOE: 1.1517
mAVE: 0.8338
mAAE: 0.7663
NDS: 0.0560
Eval time: 3.8s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.054 	0.879 	0.533 	1.586 	0.578 	0.208 
truck               	0.000 	1.159 	0.627 	1.258 	0.077 	0.000 
bus                 	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.004 	0.751 	0.717 	1.520 	1.015 	0.923 
motorcycle          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.002 	1.131 	0.895 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-23 07:50:30,980 - mmdet3d - INFO - Epoch(val) [2][41]	object/car_ap_dist_0.5: 0.0000, object/car_ap_dist_1.0: 0.0166, object/car_ap_dist_2.0: 0.0773, object/car_ap_dist_4.0: 0.1221, object/car_trans_err: 0.8793, object/car_scale_err: 0.5331, object/car_orient_err: 1.5863, object/car_vel_err: 0.5778, object/car_attr_err: 0.2075, object/mATE: 0.9920, object/mASE: 0.8772, object/mAOE: 1.1517, object/mAVE: 0.8338, object/mAAE: 0.7663, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0000, object/truck_ap_dist_2.0: 0.0000, object/truck_ap_dist_4.0: 0.0000, object/truck_trans_err: 1.1592, object/truck_scale_err: 0.6275, object/truck_orient_err: 1.2584, object/truck_vel_err: 0.0770, object/truck_attr_err: 0.0000, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0000, object/bus_ap_dist_4.0: 0.0000, object/bus_trans_err: 1.0000, object/bus_scale_err: 1.0000, object/bus_orient_err: 1.0000, object/bus_vel_err: 1.0000, object/bus_attr_err: 1.0000, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 1.0000, object/motorcycle_scale_err: 1.0000, object/motorcycle_orient_err: 1.0000, object/motorcycle_vel_err: 1.0000, object/motorcycle_attr_err: 1.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0000, object/pedestrian_ap_dist_1.0: 0.0000, object/pedestrian_ap_dist_2.0: 0.0008, object/pedestrian_ap_dist_4.0: 0.0134, object/pedestrian_trans_err: 0.7508, object/pedestrian_scale_err: 0.7174, object/pedestrian_orient_err: 1.5204, object/pedestrian_vel_err: 1.0154, object/pedestrian_attr_err: 0.9228, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0000, object/traffic_cone_ap_dist_2.0: 0.0015, object/traffic_cone_ap_dist_4.0: 0.0059, object/traffic_cone_trans_err: 1.1308, object/traffic_cone_scale_err: 0.8946, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.0560, object/map: 0.0059
2025-04-23 07:51:16,903 - mmdet3d - INFO - Epoch [3][50/204]	lr: 1.414e-04, eta: 0:10:54, time: 0.918, data_time: 0.105, memory: 13958, loss/object/loss_heatmap: 1.7469, loss/object/layer_-1_loss_cls: 0.7152, loss/object/layer_-1_loss_bbox: 2.5095, stats/object/matched_ious: 0.1062, loss: 4.9716, grad_norm: 7.5322
2025-04-23 07:51:58,842 - mmdet3d - INFO - Epoch [3][100/204]	lr: 1.501e-04, eta: 0:10:10, time: 0.839, data_time: 0.025, memory: 13958, loss/object/loss_heatmap: 1.7353, loss/object/layer_-1_loss_cls: 0.6545, loss/object/layer_-1_loss_bbox: 2.4497, stats/object/matched_ious: 0.1243, loss: 4.8395, grad_norm: 8.6363
2025-04-23 07:52:40,859 - mmdet3d - INFO - Epoch [3][150/204]	lr: 1.501e-04, eta: 0:09:27, time: 0.840, data_time: 0.026, memory: 13958, loss/object/loss_heatmap: 1.6318, loss/object/layer_-1_loss_cls: 0.5837, loss/object/layer_-1_loss_bbox: 2.2172, stats/object/matched_ious: 0.1475, loss: 4.4327, grad_norm: 7.3093
2025-04-23 07:53:22,662 - mmdet3d - INFO - Epoch [3][200/204]	lr: 1.501e-04, eta: 0:08:43, time: 0.836, data_time: 0.027, memory: 13958, loss/object/loss_heatmap: 1.4834, loss/object/layer_-1_loss_cls: 0.5171, loss/object/layer_-1_loss_bbox: 2.0566, stats/object/matched_ious: 0.1691, loss: 4.0570, grad_norm: 7.0205
2025-04-23 07:53:26,339 - mmdet3d - INFO - Saving checkpoint at 3 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 4s, ETA:   286s[  ] 2/81, 0.6 task/s, elapsed: 4s, ETA:   141s[  ] 3/81, 0.8 task/s, elapsed: 4s, ETA:    98s[  ] 4/81, 1.1 task/s, elapsed: 4s, ETA:    73s[  ] 5/81, 1.3 task/s, elapsed: 4s, ETA:    60s[  ] 6/81, 1.5 task/s, elapsed: 4s, ETA:    50s[  ] 7/81, 1.7 task/s, elapsed: 4s, ETA:    44s[  ] 8/81, 1.9 task/s, elapsed: 4s, ETA:    38s[  ] 9/81, 2.1 task/s, elapsed: 4s, ETA:    35s[  ] 10/81, 2.3 task/s, elapsed: 4s, ETA:    31s[  ] 11/81, 2.4 task/s, elapsed: 5s, ETA:    29s[  ] 12/81, 2.6 task/s, elapsed: 5s, ETA:    26s[  ] 13/81, 2.5 task/s, elapsed: 5s, ETA:    27s[  ] 14/81, 2.7 task/s, elapsed: 5s, ETA:    25s[  ] 15/81, 2.8 task/s, elapsed: 5s, ETA:    24s[  ] 16/81, 3.0 task/s, elapsed: 5s, ETA:    22s[  ] 17/81, 3.0 task/s, elapsed: 6s, ETA:    21s[  ] 18/81, 3.2 task/s, elapsed: 6s, ETA:    20s[  ] 19/81, 3.3 task/s, elapsed: 6s, ETA:    19s[  ] 20/81, 3.4 task/s, elapsed: 6s, ETA:    18s[  ] 21/81, 3.5 task/s, elapsed: 6s, ETA:    17s[  ] 22/81, 3.6 task/s, elapsed: 6s, ETA:    16s[  ] 23/81, 3.4 task/s, elapsed: 7s, ETA:    17s[  ] 24/81, 3.6 task/s, elapsed: 7s, ETA:    16s[  ] 25/81, 3.6 task/s, elapsed: 7s, ETA:    16s[  ] 26/81, 3.7 task/s, elapsed: 7s, ETA:    15s[  ] 27/81, 3.8 task/s, elapsed: 7s, ETA:    14s[  ] 28/81, 3.9 task/s, elapsed: 7s, ETA:    14s[  ] 29/81, 3.9 task/s, elapsed: 7s, ETA:    13s[  ] 30/81, 4.1 task/s, elapsed: 7s, ETA:    13s[  ] 31/81, 4.1 task/s, elapsed: 8s, ETA:    12s[  ] 32/81, 4.2 task/s, elapsed: 8s, ETA:    12s[  ] 33/81, 4.2 task/s, elapsed: 8s, ETA:    11s[  ] 34/81, 4.3 task/s, elapsed: 8s, ETA:    11s[  ] 35/81, 4.2 task/s, elapsed: 8s, ETA:    11s[  ] 36/81, 4.3 task/s, elapsed: 8s, ETA:    10s[  ] 37/81, 4.3 task/s, elapsed: 9s, ETA:    10s[  ] 38/81, 4.4 task/s, elapsed: 9s, ETA:    10s[  ] 39/81, 4.4 task/s, elapsed: 9s, ETA:     9s[  ] 40/81, 4.6 task/s, elapsed: 9s, ETA:     9s[> ] 41/81, 4.6 task/s, elapsed: 9s, ETA:     9s[> ] 42/81, 4.7 task/s, elapsed: 9s, ETA:     8s[> ] 43/81, 4.7 task/s, elapsed: 9s, ETA:     8s[> ] 44/81, 4.8 task/s, elapsed: 9s, ETA:     8s[> ] 45/81, 4.8 task/s, elapsed: 9s, ETA:     8s[> ] 46/81, 4.9 task/s, elapsed: 9s, ETA:     7s[> ] 47/81, 4.7 task/s, elapsed: 10s, ETA:     7s[> ] 48/81, 4.8 task/s, elapsed: 10s, ETA:     7s[> ] 49/81, 4.8 task/s, elapsed: 10s, ETA:     7s[> ] 50/81, 4.9 task/s, elapsed: 10s, ETA:     6s[> ] 51/81, 4.9 task/s, elapsed: 10s, ETA:     6s[> ] 52/81, 5.0 task/s, elapsed: 10s, ETA:     6s[> ] 53/81, 5.0 task/s, elapsed: 11s, ETA:     6s[> ] 54/81, 5.1 task/s, elapsed: 11s, ETA:     5s[> ] 55/81, 5.1 task/s, elapsed: 11s, ETA:     5s[> ] 56/81, 5.2 task/s, elapsed: 11s, ETA:     5s[> ] 57/81, 5.2 task/s, elapsed: 11s, ETA:     5s[> ] 58/81, 5.3 task/s, elapsed: 11s, ETA:     4s[> ] 59/81, 5.1 task/s, elapsed: 12s, ETA:     4s[> ] 60/81, 5.2 task/s, elapsed: 12s, ETA:     4s[> ] 61/81, 5.2 task/s, elapsed: 12s, ETA:     4s[> ] 62/81, 5.3 task/s, elapsed: 12s, ETA:     4s[> ] 63/81, 5.3 task/s, elapsed: 12s, ETA:     3s[> ] 64/81, 5.4 task/s, elapsed: 12s, ETA:     3s[> ] 65/81, 5.3 task/s, elapsed: 12s, ETA:     3s[> ] 66/81, 5.4 task/s, elapsed: 12s, ETA:     3s[> ] 67/81, 5.4 task/s, elapsed: 12s, ETA:     3s[> ] 68/81, 5.5 task/s, elapsed: 12s, ETA:     2s[> ] 69/81, 5.5 task/s, elapsed: 13s, ETA:     2s[> ] 70/81, 5.6 task/s, elapsed: 13s, ETA:     2s[> ] 71/81, 5.4 task/s, elapsed: 13s, ETA:     2s[> ] 72/81, 5.5 task/s, elapsed: 13s, ETA:     2s[> ] 73/81, 5.5 task/s, elapsed: 13s, ETA:     1s[> ] 74/81, 5.5 task/s, elapsed: 13s, ETA:     1s[> ] 75/81, 5.5 task/s, elapsed: 14s, ETA:     1s[> ] 76/81, 5.6 task/s, elapsed: 14s, ETA:     1s[> ] 77/81, 5.6 task/s, elapsed: 14s, ETA:     1s[> ] 78/81, 5.7 task/s, elapsed: 14s, ETA:     1s[> ] 79/81, 5.7 task/s, elapsed: 14s, ETA:     0s[> ] 80/81, 5.7 task/s, elapsed: 14s, ETA:     0s[>>] 81/81, 5.7 task/s, elapsed: 14s, ETA:     0s[>>] 82/81, 5.8 task/s, elapsed: 14s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 28.9 task/s, elapsed: 0s, ETA:     3s[  ] 2/81, 32.6 task/s, elapsed: 0s, ETA:     2s[  ] 3/81, 34.0 task/s, elapsed: 0s, ETA:     2s[  ] 4/81, 34.4 task/s, elapsed: 0s, ETA:     2s[  ] 5/81, 34.4 task/s, elapsed: 0s, ETA:     2s[  ] 6/81, 34.2 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 34.1 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 34.1 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 34.1 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 34.0 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 34.1 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 34.1 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 34.2 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 34.3 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 34.2 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 34.1 task/s, elapsed: 0s, ETA:     2s[  ] 17/81, 34.1 task/s, elapsed: 0s, ETA:     2s[  ] 18/81, 34.1 task/s, elapsed: 1s, ETA:     2s[  ] 19/81, 34.0 task/s, elapsed: 1s, ETA:     2s[  ] 20/81, 33.9 task/s, elapsed: 1s, ETA:     2s[  ] 21/81, 33.8 task/s, elapsed: 1s, ETA:     2s[  ] 22/81, 33.8 task/s, elapsed: 1s, ETA:     2s[  ] 23/81, 33.8 task/s, elapsed: 1s, ETA:     2s[  ] 24/81, 33.7 task/s, elapsed: 1s, ETA:     2s[  ] 25/81, 33.8 task/s, elapsed: 1s, ETA:     2s[  ] 26/81, 33.8 task/s, elapsed: 1s, ETA:     2s[  ] 27/81, 33.8 task/s, elapsed: 1s, ETA:     2s[  ] 28/81, 33.8 task/s, elapsed: 1s, ETA:     2s[  ] 29/81, 33.8 task/s, elapsed: 1s, ETA:     2s[  ] 30/81, 33.8 task/s, elapsed: 1s, ETA:     2s[  ] 31/81, 33.8 task/s, elapsed: 1s, ETA:     1s[  ] 32/81, 33.8 task/s, elapsed: 1s, ETA:     1s[  ] 33/81, 33.8 task/s, elapsed: 1s, ETA:     1s[  ] 34/81, 33.7 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 33.5 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 33.4 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 33.4 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 33.3 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 33.3 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 33.2 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 33.2 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 33.2 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 33.2 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 33.3 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 33.3 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 33.4 task/s, elapsed: 1s, ETA:     1s[> ] 47/81, 33.4 task/s, elapsed: 1s, ETA:     1s[> ] 48/81, 33.4 task/s, elapsed: 1s, ETA:     1s[> ] 49/81, 33.5 task/s, elapsed: 1s, ETA:     1s[> ] 50/81, 33.4 task/s, elapsed: 1s, ETA:     1s[> ] 51/81, 33.4 task/s, elapsed: 2s, ETA:     1s[> ] 52/81, 33.4 task/s, elapsed: 2s, ETA:     1s[> ] 53/81, 33.4 task/s, elapsed: 2s, ETA:     1s[> ] 54/81, 33.3 task/s, elapsed: 2s, ETA:     1s[> ] 55/81, 33.3 task/s, elapsed: 2s, ETA:     1s[> ] 56/81, 33.3 task/s, elapsed: 2s, ETA:     1s[> ] 57/81, 33.3 task/s, elapsed: 2s, ETA:     1s[> ] 58/81, 33.3 task/s, elapsed: 2s, ETA:     1s[> ] 59/81, 33.3 task/s, elapsed: 2s, ETA:     1s[> ] 60/81, 33.3 task/s, elapsed: 2s, ETA:     1s[> ] 61/81, 33.3 task/s, elapsed: 2s, ETA:     1s[> ] 62/81, 33.3 task/s, elapsed: 2s, ETA:     1s[> ] 63/81, 33.3 task/s, elapsed: 2s, ETA:     1s[> ] 64/81, 33.3 task/s, elapsed: 2s, ETA:     1s[> ] 65/81, 33.3 task/s, elapsed: 2s, ETA:     0s[> ] 66/81, 33.3 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 33.3 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 33.3 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 33.3 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 33.4 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 33.3 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 33.3 task/s, elapsed: 2s, ETA:     0s[> ] 73/81, 33.3 task/s, elapsed: 2s, ETA:     0s[> ] 74/81, 33.2 task/s, elapsed: 2s, ETA:     0s[> ] 75/81, 33.2 task/s, elapsed: 2s, ETA:     0s[> ] 76/81, 33.2 task/s, elapsed: 2s, ETA:     0s[> ] 77/81, 33.2 task/s, elapsed: 2s, ETA:     0s[> ] 78/81, 33.2 task/s, elapsed: 2s, ETA:     0s[> ] 79/81, 33.1 task/s, elapsed: 2s, ETA:     0s[> ] 80/81, 32.7 task/s, elapsed: 2s, ETA:     0s[>>] 81/81, 31.8 task/s, elapsed: 3s, ETA:     0s
Results writes to /tmp/tmp_r0hp3t2/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7f0f9bed5460>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 49% 40/81 [00:00<00:00, 397.71it/s] 99% 80/81 [00:00<00:00, 358.68it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0038
mATE: 1.0005
mASE: 0.9186
mAOE: 1.0470
mAVE: 0.8983
mAAE: 0.8956
NDS: 0.0307
Eval time: 1.0s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.036 	0.871 	0.348 	1.423 	0.186 	0.165 
truck               	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bus                 	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.002 	1.000 	1.000 	1.000 	1.000 	1.000 
motorcycle          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.000 	1.134 	0.838 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-23 07:53:47,815 - mmdet3d - INFO - Epoch(val) [3][41]	object/car_ap_dist_0.5: 0.0000, object/car_ap_dist_1.0: 0.0070, object/car_ap_dist_2.0: 0.0525, object/car_ap_dist_4.0: 0.0850, object/car_trans_err: 0.8710, object/car_scale_err: 0.3477, object/car_orient_err: 1.4226, object/car_vel_err: 0.1864, object/car_attr_err: 0.1651, object/mATE: 1.0005, object/mASE: 0.9186, object/mAOE: 1.0470, object/mAVE: 0.8983, object/mAAE: 0.8956, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0000, object/truck_ap_dist_2.0: 0.0000, object/truck_ap_dist_4.0: 0.0000, object/truck_trans_err: 1.0000, object/truck_scale_err: 1.0000, object/truck_orient_err: 1.0000, object/truck_vel_err: 1.0000, object/truck_attr_err: 1.0000, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0000, object/bus_ap_dist_4.0: 0.0000, object/bus_trans_err: 1.0000, object/bus_scale_err: 1.0000, object/bus_orient_err: 1.0000, object/bus_vel_err: 1.0000, object/bus_attr_err: 1.0000, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 1.0000, object/motorcycle_scale_err: 1.0000, object/motorcycle_orient_err: 1.0000, object/motorcycle_vel_err: 1.0000, object/motorcycle_attr_err: 1.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0000, object/pedestrian_ap_dist_1.0: 0.0000, object/pedestrian_ap_dist_2.0: 0.0000, object/pedestrian_ap_dist_4.0: 0.0093, object/pedestrian_trans_err: 1.0000, object/pedestrian_scale_err: 1.0000, object/pedestrian_orient_err: 1.0000, object/pedestrian_vel_err: 1.0000, object/pedestrian_attr_err: 1.0000, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0000, object/traffic_cone_ap_dist_2.0: 0.0000, object/traffic_cone_ap_dist_4.0: 0.0000, object/traffic_cone_trans_err: 1.1336, object/traffic_cone_scale_err: 0.8384, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.0307, object/map: 0.0038
2025-04-23 07:54:34,270 - mmdet3d - INFO - Epoch [4][50/204]	lr: 1.001e-04, eta: 0:07:58, time: 0.928, data_time: 0.111, memory: 13958, loss/object/loss_heatmap: 1.3570, loss/object/layer_-1_loss_cls: 0.4696, loss/object/layer_-1_loss_bbox: 1.9176, stats/object/matched_ious: 0.1932, loss: 3.7442, grad_norm: 6.2202
2025-04-23 07:55:16,258 - mmdet3d - INFO - Epoch [4][100/204]	lr: 1.001e-04, eta: 0:07:15, time: 0.840, data_time: 0.028, memory: 13958, loss/object/loss_heatmap: 1.2636, loss/object/layer_-1_loss_cls: 0.4312, loss/object/layer_-1_loss_bbox: 1.8938, stats/object/matched_ious: 0.2044, loss: 3.5885, grad_norm: 5.7690
2025-04-23 07:55:58,174 - mmdet3d - INFO - Epoch [4][150/204]	lr: 1.001e-04, eta: 0:06:32, time: 0.838, data_time: 0.028, memory: 13958, loss/object/loss_heatmap: 1.2670, loss/object/layer_-1_loss_cls: 0.4340, loss/object/layer_-1_loss_bbox: 1.7780, stats/object/matched_ious: 0.2128, loss: 3.4790, grad_norm: 6.9195
2025-04-23 07:56:40,923 - mmdet3d - INFO - Epoch [4][200/204]	lr: 1.001e-04, eta: 0:05:50, time: 0.855, data_time: 0.026, memory: 13984, loss/object/loss_heatmap: 1.2518, loss/object/layer_-1_loss_cls: 0.4129, loss/object/layer_-1_loss_bbox: 1.7518, stats/object/matched_ious: 0.2155, loss: 3.4164, grad_norm: 6.3309
2025-04-23 07:56:44,408 - mmdet3d - INFO - Saving checkpoint at 4 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 4s, ETA:   292s[  ] 2/81, 0.5 task/s, elapsed: 4s, ETA:   144s[  ] 3/81, 0.8 task/s, elapsed: 4s, ETA:   100s[  ] 4/81, 1.0 task/s, elapsed: 4s, ETA:    74s[  ] 5/81, 1.2 task/s, elapsed: 4s, ETA:    61s[  ] 6/81, 1.5 task/s, elapsed: 4s, ETA:    50s[  ] 7/81, 1.7 task/s, elapsed: 4s, ETA:    45s[  ] 8/81, 1.9 task/s, elapsed: 4s, ETA:    38s[  ] 9/81, 2.0 task/s, elapsed: 4s, ETA:    35s[  ] 10/81, 2.3 task/s, elapsed: 4s, ETA:    32s[  ] 11/81, 2.4 task/s, elapsed: 5s, ETA:    30s[  ] 12/81, 2.6 task/s, elapsed: 5s, ETA:    27s[  ] 13/81, 2.5 task/s, elapsed: 5s, ETA:    27s[  ] 14/81, 2.7 task/s, elapsed: 5s, ETA:    25s[  ] 15/81, 2.7 task/s, elapsed: 5s, ETA:    24s[  ] 16/81, 2.9 task/s, elapsed: 5s, ETA:    22s[  ] 17/81, 3.0 task/s, elapsed: 6s, ETA:    21s[  ] 18/81, 3.2 task/s, elapsed: 6s, ETA:    20s[  ] 19/81, 3.2 task/s, elapsed: 6s, ETA:    19s[  ] 20/81, 3.4 task/s, elapsed: 6s, ETA:    18s[  ] 21/81, 3.4 task/s, elapsed: 6s, ETA:    17s[  ] 22/81, 3.6 task/s, elapsed: 6s, ETA:    16s[  ] 23/81, 3.6 task/s, elapsed: 6s, ETA:    16s[  ] 24/81, 3.8 task/s, elapsed: 6s, ETA:    15s[  ] 25/81, 3.6 task/s, elapsed: 7s, ETA:    15s[  ] 26/81, 3.8 task/s, elapsed: 7s, ETA:    15s[  ] 27/81, 3.8 task/s, elapsed: 7s, ETA:    14s[  ] 28/81, 4.0 task/s, elapsed: 7s, ETA:    13s[  ] 29/81, 4.0 task/s, elapsed: 7s, ETA:    13s[  ] 30/81, 4.1 task/s, elapsed: 7s, ETA:    12s[  ] 31/81, 4.1 task/s, elapsed: 7s, ETA:    12s[  ] 32/81, 4.3 task/s, elapsed: 7s, ETA:    11s[  ] 33/81, 4.3 task/s, elapsed: 8s, ETA:    11s[  ] 34/81, 4.4 task/s, elapsed: 8s, ETA:    11s[  ] 35/81, 4.4 task/s, elapsed: 8s, ETA:    10s[  ] 36/81, 4.5 task/s, elapsed: 8s, ETA:    10s[  ] 37/81, 4.4 task/s, elapsed: 8s, ETA:    10s[  ] 38/81, 4.5 task/s, elapsed: 8s, ETA:    10s[  ] 39/81, 4.5 task/s, elapsed: 9s, ETA:     9s[  ] 40/81, 4.6 task/s, elapsed: 9s, ETA:     9s[> ] 41/81, 4.6 task/s, elapsed: 9s, ETA:     9s[> ] 42/81, 4.7 task/s, elapsed: 9s, ETA:     8s[> ] 43/81, 4.7 task/s, elapsed: 9s, ETA:     8s[> ] 44/81, 4.8 task/s, elapsed: 9s, ETA:     8s[> ] 45/81, 4.8 task/s, elapsed: 9s, ETA:     7s[> ] 46/81, 4.9 task/s, elapsed: 9s, ETA:     7s[> ] 47/81, 4.9 task/s, elapsed: 10s, ETA:     7s[> ] 48/81, 5.0 task/s, elapsed: 10s, ETA:     7s[> ] 49/81, 4.9 task/s, elapsed: 10s, ETA:     7s[> ] 50/81, 5.0 task/s, elapsed: 10s, ETA:     6s[> ] 51/81, 5.0 task/s, elapsed: 10s, ETA:     6s[> ] 52/81, 5.1 task/s, elapsed: 10s, ETA:     6s[> ] 53/81, 5.1 task/s, elapsed: 10s, ETA:     6s[> ] 54/81, 5.2 task/s, elapsed: 10s, ETA:     5s[> ] 55/81, 5.1 task/s, elapsed: 11s, ETA:     5s[> ] 56/81, 5.2 task/s, elapsed: 11s, ETA:     5s[> ] 57/81, 5.2 task/s, elapsed: 11s, ETA:     5s[> ] 58/81, 5.3 task/s, elapsed: 11s, ETA:     4s[> ] 59/81, 5.3 task/s, elapsed: 11s, ETA:     4s[> ] 60/81, 5.4 task/s, elapsed: 11s, ETA:     4s[> ] 61/81, 5.2 task/s, elapsed: 12s, ETA:     4s[> ] 62/81, 5.3 task/s, elapsed: 12s, ETA:     4s[> ] 63/81, 5.3 task/s, elapsed: 12s, ETA:     3s[> ] 64/81, 5.4 task/s, elapsed: 12s, ETA:     3s[> ] 65/81, 5.4 task/s, elapsed: 12s, ETA:     3s[> ] 66/81, 5.5 task/s, elapsed: 12s, ETA:     3s[> ] 67/81, 5.5 task/s, elapsed: 12s, ETA:     3s[> ] 68/81, 5.6 task/s, elapsed: 12s, ETA:     2s[> ] 69/81, 5.5 task/s, elapsed: 12s, ETA:     2s[> ] 70/81, 5.6 task/s, elapsed: 12s, ETA:     2s[> ] 71/81, 5.6 task/s, elapsed: 13s, ETA:     2s[> ] 72/81, 5.7 task/s, elapsed: 13s, ETA:     2s[> ] 73/81, 5.5 task/s, elapsed: 13s, ETA:     1s[> ] 74/81, 5.6 task/s, elapsed: 13s, ETA:     1s[> ] 75/81, 5.6 task/s, elapsed: 13s, ETA:     1s[> ] 76/81, 5.6 task/s, elapsed: 13s, ETA:     1s[> ] 77/81, 5.6 task/s, elapsed: 14s, ETA:     1s[> ] 78/81, 5.7 task/s, elapsed: 14s, ETA:     1s[> ] 79/81, 5.7 task/s, elapsed: 14s, ETA:     0s[> ] 80/81, 5.8 task/s, elapsed: 14s, ETA:     0s[>>] 81/81, 5.8 task/s, elapsed: 14s, ETA:     0s[>>] 82/81, 5.8 task/s, elapsed: 14s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 31.7 task/s, elapsed: 0s, ETA:     3s[  ] 2/81, 32.4 task/s, elapsed: 0s, ETA:     2s[  ] 3/81, 33.3 task/s, elapsed: 0s, ETA:     2s[  ] 4/81, 33.7 task/s, elapsed: 0s, ETA:     2s[  ] 5/81, 33.7 task/s, elapsed: 0s, ETA:     2s[  ] 6/81, 33.7 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 33.3 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 33.1 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 33.2 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 33.4 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 33.5 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 33.5 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 33.5 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 33.4 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 33.4 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 33.4 task/s, elapsed: 0s, ETA:     2s[  ] 17/81, 33.3 task/s, elapsed: 1s, ETA:     2s[  ] 18/81, 33.1 task/s, elapsed: 1s, ETA:     2s[  ] 19/81, 33.1 task/s, elapsed: 1s, ETA:     2s[  ] 20/81, 33.1 task/s, elapsed: 1s, ETA:     2s[  ] 21/81, 33.1 task/s, elapsed: 1s, ETA:     2s[  ] 22/81, 33.1 task/s, elapsed: 1s, ETA:     2s[  ] 23/81, 33.1 task/s, elapsed: 1s, ETA:     2s[  ] 24/81, 33.0 task/s, elapsed: 1s, ETA:     2s[  ] 25/81, 33.0 task/s, elapsed: 1s, ETA:     2s[  ] 26/81, 32.9 task/s, elapsed: 1s, ETA:     2s[  ] 27/81, 33.0 task/s, elapsed: 1s, ETA:     2s[  ] 28/81, 32.9 task/s, elapsed: 1s, ETA:     2s[  ] 29/81, 32.9 task/s, elapsed: 1s, ETA:     2s[  ] 30/81, 32.9 task/s, elapsed: 1s, ETA:     2s[  ] 31/81, 32.9 task/s, elapsed: 1s, ETA:     2s[  ] 32/81, 32.8 task/s, elapsed: 1s, ETA:     1s[  ] 33/81, 32.8 task/s, elapsed: 1s, ETA:     1s[  ] 34/81, 32.7 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 32.6 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 32.5 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 32.4 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 32.4 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 32.4 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 32.3 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 32.3 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 32.3 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 32.4 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 32.4 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 32.5 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 32.5 task/s, elapsed: 1s, ETA:     1s[> ] 47/81, 32.6 task/s, elapsed: 1s, ETA:     1s[> ] 48/81, 32.6 task/s, elapsed: 1s, ETA:     1s[> ] 49/81, 32.6 task/s, elapsed: 2s, ETA:     1s[> ] 50/81, 32.6 task/s, elapsed: 2s, ETA:     1s[> ] 51/81, 32.6 task/s, elapsed: 2s, ETA:     1s[> ] 52/81, 32.6 task/s, elapsed: 2s, ETA:     1s[> ] 53/81, 32.6 task/s, elapsed: 2s, ETA:     1s[> ] 54/81, 32.6 task/s, elapsed: 2s, ETA:     1s[> ] 55/81, 32.6 task/s, elapsed: 2s, ETA:     1s[> ] 56/81, 32.6 task/s, elapsed: 2s, ETA:     1s[> ] 57/81, 32.6 task/s, elapsed: 2s, ETA:     1s[> ] 58/81, 32.6 task/s, elapsed: 2s, ETA:     1s[> ] 59/81, 32.7 task/s, elapsed: 2s, ETA:     1s[> ] 60/81, 32.7 task/s, elapsed: 2s, ETA:     1s[> ] 61/81, 32.7 task/s, elapsed: 2s, ETA:     1s[> ] 62/81, 32.7 task/s, elapsed: 2s, ETA:     1s[> ] 63/81, 32.7 task/s, elapsed: 2s, ETA:     1s[> ] 64/81, 32.7 task/s, elapsed: 2s, ETA:     1s[> ] 65/81, 32.8 task/s, elapsed: 2s, ETA:     0s[> ] 66/81, 32.8 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 32.8 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 32.8 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 32.8 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 32.8 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 32.8 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 32.8 task/s, elapsed: 2s, ETA:     0s[> ] 73/81, 32.8 task/s, elapsed: 2s, ETA:     0s[> ] 74/81, 32.8 task/s, elapsed: 2s, ETA:     0s[> ] 75/81, 32.8 task/s, elapsed: 2s, ETA:     0s[> ] 76/81, 32.8 task/s, elapsed: 2s, ETA:     0s[> ] 77/81, 32.8 task/s, elapsed: 2s, ETA:     0s[> ] 78/81, 32.8 task/s, elapsed: 2s, ETA:     0s[> ] 79/81, 32.4 task/s, elapsed: 2s, ETA:     0s[> ] 80/81, 31.4 task/s, elapsed: 3s, ETA:     0s[>>] 81/81, 31.5 task/s, elapsed: 3s, ETA:     0s
Results writes to /tmp/tmpml364fiu/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7f0f9e7e7070>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 49% 40/81 [00:00<00:00, 398.73it/s] 99% 80/81 [00:00<00:00, 359.96it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0285
mATE: 0.9179
mASE: 0.7543
mAOE: 1.0039
mAVE: 0.7288
mAAE: 0.7240
NDS: 0.1018
Eval time: 3.8s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.237 	0.791 	0.343 	1.372 	0.338 	0.179 
truck               	0.001 	1.062 	0.344 	0.971 	0.045 	0.000 
bus                 	0.000 	1.011 	0.668 	0.172 	0.604 	0.745 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.015 	0.551 	0.575 	1.521 	0.844 	0.868 
motorcycle          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.031 	0.764 	0.613 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-23 07:57:08,512 - mmdet3d - INFO - Epoch(val) [4][41]	object/car_ap_dist_0.5: 0.0052, object/car_ap_dist_1.0: 0.1351, object/car_ap_dist_2.0: 0.3557, object/car_ap_dist_4.0: 0.4535, object/car_trans_err: 0.7914, object/car_scale_err: 0.3431, object/car_orient_err: 1.3715, object/car_vel_err: 0.3383, object/car_attr_err: 0.1792, object/mATE: 0.9179, object/mASE: 0.7543, object/mAOE: 1.0039, object/mAVE: 0.7288, object/mAAE: 0.7240, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0000, object/truck_ap_dist_2.0: 0.0013, object/truck_ap_dist_4.0: 0.0040, object/truck_trans_err: 1.0622, object/truck_scale_err: 0.3439, object/truck_orient_err: 0.9714, object/truck_vel_err: 0.0445, object/truck_attr_err: 0.0000, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0000, object/bus_ap_dist_4.0: 0.0001, object/bus_trans_err: 1.0106, object/bus_scale_err: 0.6680, object/bus_orient_err: 0.1715, object/bus_vel_err: 0.6036, object/bus_attr_err: 0.7449, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 1.0000, object/motorcycle_scale_err: 1.0000, object/motorcycle_orient_err: 1.0000, object/motorcycle_vel_err: 1.0000, object/motorcycle_attr_err: 1.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0013, object/pedestrian_ap_dist_1.0: 0.0057, object/pedestrian_ap_dist_2.0: 0.0116, object/pedestrian_ap_dist_4.0: 0.0431, object/pedestrian_trans_err: 0.5513, object/pedestrian_scale_err: 0.5755, object/pedestrian_orient_err: 1.5206, object/pedestrian_vel_err: 0.8444, object/pedestrian_attr_err: 0.8677, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0085, object/traffic_cone_ap_dist_2.0: 0.0178, object/traffic_cone_ap_dist_4.0: 0.0989, object/traffic_cone_trans_err: 0.7638, object/traffic_cone_scale_err: 0.6130, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.1018, object/map: 0.0285
2025-04-23 07:57:54,801 - mmdet3d - INFO - Epoch [5][50/204]	lr: 5.015e-05, eta: 0:05:04, time: 0.925, data_time: 0.110, memory: 13984, loss/object/loss_heatmap: 1.1149, loss/object/layer_-1_loss_cls: 0.3877, loss/object/layer_-1_loss_bbox: 1.6397, stats/object/matched_ious: 0.2410, loss: 3.1423, grad_norm: 5.5027
2025-04-23 07:58:36,743 - mmdet3d - INFO - Epoch [5][100/204]	lr: 5.015e-05, eta: 0:04:21, time: 0.839, data_time: 0.026, memory: 13984, loss/object/loss_heatmap: 1.0717, loss/object/layer_-1_loss_cls: 0.3747, loss/object/layer_-1_loss_bbox: 1.5822, stats/object/matched_ious: 0.2467, loss: 3.0286, grad_norm: 5.3798
2025-04-23 07:59:18,638 - mmdet3d - INFO - Epoch [5][150/204]	lr: 5.015e-05, eta: 0:03:39, time: 0.838, data_time: 0.027, memory: 13984, loss/object/loss_heatmap: 1.0459, loss/object/layer_-1_loss_cls: 0.3557, loss/object/layer_-1_loss_bbox: 1.5774, stats/object/matched_ious: 0.2429, loss: 2.9790, grad_norm: 5.4279
2025-04-23 08:00:00,702 - mmdet3d - INFO - Epoch [5][200/204]	lr: 5.015e-05, eta: 0:02:56, time: 0.841, data_time: 0.025, memory: 13984, loss/object/loss_heatmap: 1.0401, loss/object/layer_-1_loss_cls: 0.3539, loss/object/layer_-1_loss_bbox: 1.5608, stats/object/matched_ious: 0.2528, loss: 2.9549, grad_norm: 5.7536
2025-04-23 08:00:04,222 - mmdet3d - INFO - Saving checkpoint at 5 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 4s, ETA:   297s[  ] 2/81, 0.5 task/s, elapsed: 4s, ETA:   147s[  ] 3/81, 0.8 task/s, elapsed: 4s, ETA:   101s[  ] 4/81, 1.0 task/s, elapsed: 4s, ETA:    75s[  ] 5/81, 1.2 task/s, elapsed: 4s, ETA:    62s[  ] 6/81, 1.5 task/s, elapsed: 4s, ETA:    51s[  ] 7/81, 1.6 task/s, elapsed: 4s, ETA:    45s[  ] 8/81, 1.9 task/s, elapsed: 4s, ETA:    39s[  ] 9/81, 2.0 task/s, elapsed: 5s, ETA:    36s[  ] 10/81, 2.2 task/s, elapsed: 5s, ETA:    32s[  ] 11/81, 2.3 task/s, elapsed: 5s, ETA:    30s[  ] 12/81, 2.5 task/s, elapsed: 5s, ETA:    27s[  ] 13/81, 2.4 task/s, elapsed: 5s, ETA:    28s[  ] 14/81, 2.6 task/s, elapsed: 5s, ETA:    25s[  ] 15/81, 2.7 task/s, elapsed: 6s, ETA:    24s[  ] 16/81, 2.9 task/s, elapsed: 6s, ETA:    23s[  ] 17/81, 3.0 task/s, elapsed: 6s, ETA:    22s[  ] 18/81, 3.1 task/s, elapsed: 6s, ETA:    20s[  ] 19/81, 3.2 task/s, elapsed: 6s, ETA:    19s[  ] 20/81, 3.3 task/s, elapsed: 6s, ETA:    18s[  ] 21/81, 3.4 task/s, elapsed: 6s, ETA:    18s[  ] 22/81, 3.6 task/s, elapsed: 6s, ETA:    17s[  ] 23/81, 3.6 task/s, elapsed: 6s, ETA:    16s[  ] 24/81, 3.7 task/s, elapsed: 6s, ETA:    15s[  ] 25/81, 3.6 task/s, elapsed: 7s, ETA:    16s[  ] 26/81, 3.8 task/s, elapsed: 7s, ETA:    15s[  ] 27/81, 3.8 task/s, elapsed: 7s, ETA:    14s[  ] 28/81, 3.9 task/s, elapsed: 7s, ETA:    14s[  ] 29/81, 3.9 task/s, elapsed: 7s, ETA:    13s[  ] 30/81, 4.1 task/s, elapsed: 7s, ETA:    13s[  ] 31/81, 4.1 task/s, elapsed: 8s, ETA:    12s[  ] 32/81, 4.2 task/s, elapsed: 8s, ETA:    12s[  ] 33/81, 4.2 task/s, elapsed: 8s, ETA:    11s[  ] 34/81, 4.4 task/s, elapsed: 8s, ETA:    11s[  ] 35/81, 4.4 task/s, elapsed: 8s, ETA:    11s[  ] 36/81, 4.5 task/s, elapsed: 8s, ETA:    10s[  ] 37/81, 4.3 task/s, elapsed: 9s, ETA:    10s[  ] 38/81, 4.4 task/s, elapsed: 9s, ETA:    10s[  ] 39/81, 4.5 task/s, elapsed: 9s, ETA:     9s[  ] 40/81, 4.6 task/s, elapsed: 9s, ETA:     9s[> ] 41/81, 4.6 task/s, elapsed: 9s, ETA:     9s[> ] 42/81, 4.7 task/s, elapsed: 9s, ETA:     8s[> ] 43/81, 4.7 task/s, elapsed: 9s, ETA:     8s[> ] 44/81, 4.8 task/s, elapsed: 9s, ETA:     8s[> ] 45/81, 4.8 task/s, elapsed: 9s, ETA:     8s[> ] 46/81, 4.9 task/s, elapsed: 9s, ETA:     7s[> ] 47/81, 4.9 task/s, elapsed: 10s, ETA:     7s[> ] 48/81, 5.0 task/s, elapsed: 10s, ETA:     7s[> ] 49/81, 4.8 task/s, elapsed: 10s, ETA:     7s[> ] 50/81, 4.9 task/s, elapsed: 10s, ETA:     6s[> ] 51/81, 4.9 task/s, elapsed: 10s, ETA:     6s[> ] 52/81, 5.0 task/s, elapsed: 10s, ETA:     6s[> ] 53/81, 5.0 task/s, elapsed: 11s, ETA:     6s[> ] 54/81, 5.1 task/s, elapsed: 11s, ETA:     5s[> ] 55/81, 5.1 task/s, elapsed: 11s, ETA:     5s[> ] 56/81, 5.2 task/s, elapsed: 11s, ETA:     5s[> ] 57/81, 5.2 task/s, elapsed: 11s, ETA:     5s[> ] 58/81, 5.3 task/s, elapsed: 11s, ETA:     4s[> ] 59/81, 5.3 task/s, elapsed: 11s, ETA:     4s[> ] 60/81, 5.4 task/s, elapsed: 11s, ETA:     4s[> ] 61/81, 5.2 task/s, elapsed: 12s, ETA:     4s[> ] 62/81, 5.3 task/s, elapsed: 12s, ETA:     4s[> ] 63/81, 5.3 task/s, elapsed: 12s, ETA:     3s[> ] 64/81, 5.4 task/s, elapsed: 12s, ETA:     3s[> ] 65/81, 5.4 task/s, elapsed: 12s, ETA:     3s[> ] 66/81, 5.4 task/s, elapsed: 12s, ETA:     3s[> ] 67/81, 5.4 task/s, elapsed: 12s, ETA:     3s[> ] 68/81, 5.5 task/s, elapsed: 12s, ETA:     2s[> ] 69/81, 5.5 task/s, elapsed: 13s, ETA:     2s[> ] 70/81, 5.6 task/s, elapsed: 13s, ETA:     2s[> ] 71/81, 5.6 task/s, elapsed: 13s, ETA:     2s[> ] 72/81, 5.7 task/s, elapsed: 13s, ETA:     2s[> ] 73/81, 5.5 task/s, elapsed: 13s, ETA:     1s[> ] 74/81, 5.5 task/s, elapsed: 13s, ETA:     1s[> ] 75/81, 5.5 task/s, elapsed: 14s, ETA:     1s[> ] 76/81, 5.6 task/s, elapsed: 14s, ETA:     1s[> ] 77/81, 5.6 task/s, elapsed: 14s, ETA:     1s[> ] 78/81, 5.7 task/s, elapsed: 14s, ETA:     1s[> ] 79/81, 5.7 task/s, elapsed: 14s, ETA:     0s[> ] 80/81, 5.7 task/s, elapsed: 14s, ETA:     0s[>>] 81/81, 5.7 task/s, elapsed: 14s, ETA:     0s[>>] 82/81, 5.8 task/s, elapsed: 14s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 27.2 task/s, elapsed: 0s, ETA:     3s[  ] 2/81, 30.7 task/s, elapsed: 0s, ETA:     3s[  ] 3/81, 32.8 task/s, elapsed: 0s, ETA:     2s[  ] 4/81, 34.1 task/s, elapsed: 0s, ETA:     2s[  ] 5/81, 34.7 task/s, elapsed: 0s, ETA:     2s[  ] 6/81, 34.7 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 34.7 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 34.6 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 34.9 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 35.1 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 35.3 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 35.3 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 35.3 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 35.2 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 35.1 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 35.0 task/s, elapsed: 0s, ETA:     2s[  ] 17/81, 35.0 task/s, elapsed: 0s, ETA:     2s[  ] 18/81, 35.0 task/s, elapsed: 1s, ETA:     2s[  ] 19/81, 34.9 task/s, elapsed: 1s, ETA:     2s[  ] 20/81, 34.8 task/s, elapsed: 1s, ETA:     2s[  ] 21/81, 34.8 task/s, elapsed: 1s, ETA:     2s[  ] 22/81, 34.7 task/s, elapsed: 1s, ETA:     2s[  ] 23/81, 34.6 task/s, elapsed: 1s, ETA:     2s[  ] 24/81, 34.5 task/s, elapsed: 1s, ETA:     2s[  ] 25/81, 34.5 task/s, elapsed: 1s, ETA:     2s[  ] 26/81, 34.4 task/s, elapsed: 1s, ETA:     2s[  ] 27/81, 34.4 task/s, elapsed: 1s, ETA:     2s[  ] 28/81, 34.3 task/s, elapsed: 1s, ETA:     2s[  ] 29/81, 34.3 task/s, elapsed: 1s, ETA:     2s[  ] 30/81, 34.3 task/s, elapsed: 1s, ETA:     1s[  ] 31/81, 34.2 task/s, elapsed: 1s, ETA:     1s[  ] 32/81, 34.1 task/s, elapsed: 1s, ETA:     1s[  ] 33/81, 34.0 task/s, elapsed: 1s, ETA:     1s[  ] 34/81, 33.9 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 33.8 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 33.8 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 33.7 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 33.6 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 33.6 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 33.5 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 33.4 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 33.5 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 33.6 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 33.7 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 33.8 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 33.9 task/s, elapsed: 1s, ETA:     1s[> ] 47/81, 34.0 task/s, elapsed: 1s, ETA:     1s[> ] 48/81, 34.0 task/s, elapsed: 1s, ETA:     1s[> ] 49/81, 34.0 task/s, elapsed: 1s, ETA:     1s[> ] 50/81, 34.0 task/s, elapsed: 1s, ETA:     1s[> ] 51/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 52/81, 33.9 task/s, elapsed: 2s, ETA:     1s[> ] 53/81, 33.9 task/s, elapsed: 2s, ETA:     1s[> ] 54/81, 33.9 task/s, elapsed: 2s, ETA:     1s[> ] 55/81, 33.9 task/s, elapsed: 2s, ETA:     1s[> ] 56/81, 33.9 task/s, elapsed: 2s, ETA:     1s[> ] 57/81, 33.9 task/s, elapsed: 2s, ETA:     1s[> ] 58/81, 33.9 task/s, elapsed: 2s, ETA:     1s[> ] 59/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 60/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 61/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 62/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 63/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 64/81, 34.0 task/s, elapsed: 2s, ETA:     1s[> ] 65/81, 34.0 task/s, elapsed: 2s, ETA:     0s[> ] 66/81, 34.0 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 29.3 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 29.3 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 29.4 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 29.4 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 29.2 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 28.4 task/s, elapsed: 3s, ETA:     0s[> ] 73/81, 28.3 task/s, elapsed: 3s, ETA:     0s[> ] 74/81, 28.4 task/s, elapsed: 3s, ETA:     0s[> ] 75/81, 28.5 task/s, elapsed: 3s, ETA:     0s[> ] 76/81, 28.6 task/s, elapsed: 3s, ETA:     0s[> ] 77/81, 28.7 task/s, elapsed: 3s, ETA:     0s[> ] 78/81, 28.7 task/s, elapsed: 3s, ETA:     0s[> ] 79/81, 28.8 task/s, elapsed: 3s, ETA:     0s[> ] 80/81, 28.9 task/s, elapsed: 3s, ETA:     0s[>>] 81/81, 29.0 task/s, elapsed: 3s, ETA:     0s
Results writes to /tmp/tmpoo9lg60x/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7f0fa61ce460>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 48% 39/81 [00:00<00:00, 386.89it/s] 96% 78/81 [00:00<00:00, 347.13it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0195
mATE: 0.9082
mASE: 0.8051
mAOE: 1.0765
mAVE: 0.7818
mAAE: 0.7612
NDS: 0.0841
Eval time: 2.6s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.171 	0.821 	0.396 	1.358 	0.330 	0.207 
truck               	0.000 	0.868 	0.424 	0.735 	0.119 	0.010 
bus                 	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.006 	0.439 	0.597 	1.595 	0.805 	0.873 
motorcycle          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.018 	0.954 	0.634 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-23 08:00:27,379 - mmdet3d - INFO - Epoch(val) [5][41]	object/car_ap_dist_0.5: 0.0007, object/car_ap_dist_1.0: 0.0834, object/car_ap_dist_2.0: 0.2567, object/car_ap_dist_4.0: 0.3446, object/car_trans_err: 0.8208, object/car_scale_err: 0.3965, object/car_orient_err: 1.3585, object/car_vel_err: 0.3299, object/car_attr_err: 0.2073, object/mATE: 0.9082, object/mASE: 0.8051, object/mAOE: 1.0765, object/mAVE: 0.7818, object/mAAE: 0.7612, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0000, object/truck_ap_dist_2.0: 0.0001, object/truck_ap_dist_4.0: 0.0008, object/truck_trans_err: 0.8679, object/truck_scale_err: 0.4235, object/truck_orient_err: 0.7348, object/truck_vel_err: 0.1191, object/truck_attr_err: 0.0096, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0000, object/bus_ap_dist_4.0: 0.0000, object/bus_trans_err: 1.0000, object/bus_scale_err: 1.0000, object/bus_orient_err: 1.0000, object/bus_vel_err: 1.0000, object/bus_attr_err: 1.0000, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 1.0000, object/motorcycle_scale_err: 1.0000, object/motorcycle_orient_err: 1.0000, object/motorcycle_vel_err: 1.0000, object/motorcycle_attr_err: 1.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0008, object/pedestrian_ap_dist_1.0: 0.0026, object/pedestrian_ap_dist_2.0: 0.0038, object/pedestrian_ap_dist_4.0: 0.0171, object/pedestrian_trans_err: 0.4390, object/pedestrian_scale_err: 0.5970, object/pedestrian_orient_err: 1.5955, object/pedestrian_vel_err: 0.8051, object/pedestrian_attr_err: 0.8726, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0064, object/traffic_cone_ap_dist_2.0: 0.0134, object/traffic_cone_ap_dist_4.0: 0.0512, object/traffic_cone_trans_err: 0.9544, object/traffic_cone_scale_err: 0.6335, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.0841, object/map: 0.0195
2025-04-23 08:01:13,084 - mmdet3d - INFO - Epoch [6][50/204]	lr: 1.358e-05, eta: 0:02:10, time: 0.913, data_time: 0.105, memory: 13984, loss/object/loss_heatmap: 0.9591, loss/object/layer_-1_loss_cls: 0.3341, loss/object/layer_-1_loss_bbox: 1.4968, stats/object/matched_ious: 0.2614, loss: 2.7900, grad_norm: 4.9726
2025-04-23 08:01:55,053 - mmdet3d - INFO - Epoch [6][100/204]	lr: 1.358e-05, eta: 0:01:28, time: 0.839, data_time: 0.026, memory: 13984, loss/object/loss_heatmap: 0.9498, loss/object/layer_-1_loss_cls: 0.3325, loss/object/layer_-1_loss_bbox: 1.4876, stats/object/matched_ious: 0.2653, loss: 2.7699, grad_norm: 5.0032
2025-04-23 08:02:37,026 - mmdet3d - INFO - Epoch [6][150/204]	lr: 1.358e-05, eta: 0:00:45, time: 0.839, data_time: 0.025, memory: 13984, loss/object/loss_heatmap: 0.9496, loss/object/layer_-1_loss_cls: 0.3435, loss/object/layer_-1_loss_bbox: 1.4983, stats/object/matched_ious: 0.2606, loss: 2.7915, grad_norm: 5.3933
2025-04-23 08:03:19,047 - mmdet3d - INFO - Epoch [6][200/204]	lr: 1.358e-05, eta: 0:00:03, time: 0.840, data_time: 0.026, memory: 13984, loss/object/loss_heatmap: 0.9395, loss/object/layer_-1_loss_cls: 0.3423, loss/object/layer_-1_loss_bbox: 1.4104, stats/object/matched_ious: 0.2702, loss: 2.6922, grad_norm: 5.4212
2025-04-23 08:03:22,357 - mmdet3d - INFO - Saving checkpoint at 6 epochs
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 0.3 task/s, elapsed: 4s, ETA:   299s[  ] 2/81, 0.5 task/s, elapsed: 4s, ETA:   148s[  ] 3/81, 0.8 task/s, elapsed: 4s, ETA:   102s[  ] 4/81, 1.0 task/s, elapsed: 4s, ETA:    75s[  ] 5/81, 1.2 task/s, elapsed: 4s, ETA:    62s[  ] 6/81, 1.5 task/s, elapsed: 4s, ETA:    51s[  ] 7/81, 1.6 task/s, elapsed: 4s, ETA:    46s[  ] 8/81, 1.9 task/s, elapsed: 4s, ETA:    39s[  ] 9/81, 2.0 task/s, elapsed: 5s, ETA:    36s[  ] 10/81, 2.2 task/s, elapsed: 5s, ETA:    32s[  ] 11/81, 2.3 task/s, elapsed: 5s, ETA:    30s[  ] 12/81, 2.5 task/s, elapsed: 5s, ETA:    27s[  ] 13/81, 2.4 task/s, elapsed: 5s, ETA:    28s[  ] 14/81, 2.6 task/s, elapsed: 5s, ETA:    25s[  ] 15/81, 2.7 task/s, elapsed: 6s, ETA:    24s[  ] 16/81, 2.9 task/s, elapsed: 6s, ETA:    23s[  ] 17/81, 2.9 task/s, elapsed: 6s, ETA:    22s[  ] 18/81, 3.1 task/s, elapsed: 6s, ETA:    20s[  ] 19/81, 3.2 task/s, elapsed: 6s, ETA:    20s[  ] 20/81, 3.3 task/s, elapsed: 6s, ETA:    18s[  ] 21/81, 3.4 task/s, elapsed: 6s, ETA:    18s[  ] 22/81, 3.6 task/s, elapsed: 6s, ETA:    17s[  ] 23/81, 3.6 task/s, elapsed: 6s, ETA:    16s[  ] 24/81, 3.7 task/s, elapsed: 6s, ETA:    15s[  ] 25/81, 3.6 task/s, elapsed: 7s, ETA:    16s[  ] 26/81, 3.7 task/s, elapsed: 7s, ETA:    15s[  ] 27/81, 3.8 task/s, elapsed: 7s, ETA:    14s[  ] 28/81, 3.9 task/s, elapsed: 7s, ETA:    14s[  ] 29/81, 3.9 task/s, elapsed: 7s, ETA:    13s[  ] 30/81, 4.1 task/s, elapsed: 7s, ETA:    13s[  ] 31/81, 4.1 task/s, elapsed: 8s, ETA:    12s[  ] 32/81, 4.2 task/s, elapsed: 8s, ETA:    12s[  ] 33/81, 4.2 task/s, elapsed: 8s, ETA:    11s[  ] 34/81, 4.4 task/s, elapsed: 8s, ETA:    11s[  ] 35/81, 4.4 task/s, elapsed: 8s, ETA:    11s[  ] 36/81, 4.5 task/s, elapsed: 8s, ETA:    10s[  ] 37/81, 4.3 task/s, elapsed: 9s, ETA:    10s[  ] 38/81, 4.4 task/s, elapsed: 9s, ETA:    10s[  ] 39/81, 4.5 task/s, elapsed: 9s, ETA:     9s[  ] 40/81, 4.6 task/s, elapsed: 9s, ETA:     9s[> ] 41/81, 4.6 task/s, elapsed: 9s, ETA:     9s[> ] 42/81, 4.7 task/s, elapsed: 9s, ETA:     8s[> ] 43/81, 4.7 task/s, elapsed: 9s, ETA:     8s[> ] 44/81, 4.8 task/s, elapsed: 9s, ETA:     8s[> ] 45/81, 4.8 task/s, elapsed: 9s, ETA:     8s[> ] 46/81, 4.9 task/s, elapsed: 9s, ETA:     7s[> ] 47/81, 4.9 task/s, elapsed: 10s, ETA:     7s[> ] 48/81, 5.0 task/s, elapsed: 10s, ETA:     7s[> ] 49/81, 4.8 task/s, elapsed: 10s, ETA:     7s[> ] 50/81, 4.9 task/s, elapsed: 10s, ETA:     6s[> ] 51/81, 4.9 task/s, elapsed: 10s, ETA:     6s[> ] 52/81, 5.0 task/s, elapsed: 10s, ETA:     6s[> ] 53/81, 5.0 task/s, elapsed: 11s, ETA:     6s[> ] 54/81, 5.1 task/s, elapsed: 11s, ETA:     5s[> ] 55/81, 5.1 task/s, elapsed: 11s, ETA:     5s[> ] 56/81, 5.2 task/s, elapsed: 11s, ETA:     5s[> ] 57/81, 5.2 task/s, elapsed: 11s, ETA:     5s[> ] 58/81, 5.3 task/s, elapsed: 11s, ETA:     4s[> ] 59/81, 5.3 task/s, elapsed: 11s, ETA:     4s[> ] 60/81, 5.4 task/s, elapsed: 11s, ETA:     4s[> ] 61/81, 5.2 task/s, elapsed: 12s, ETA:     4s[> ] 62/81, 5.3 task/s, elapsed: 12s, ETA:     4s[> ] 63/81, 5.3 task/s, elapsed: 12s, ETA:     3s[> ] 64/81, 5.4 task/s, elapsed: 12s, ETA:     3s[> ] 65/81, 5.4 task/s, elapsed: 12s, ETA:     3s[> ] 66/81, 5.4 task/s, elapsed: 12s, ETA:     3s[> ] 67/81, 5.4 task/s, elapsed: 12s, ETA:     3s[> ] 68/81, 5.5 task/s, elapsed: 12s, ETA:     2s[> ] 69/81, 5.5 task/s, elapsed: 13s, ETA:     2s[> ] 70/81, 5.6 task/s, elapsed: 13s, ETA:     2s[> ] 71/81, 5.6 task/s, elapsed: 13s, ETA:     2s[> ] 72/81, 5.6 task/s, elapsed: 13s, ETA:     2s[> ] 73/81, 5.5 task/s, elapsed: 13s, ETA:     1s[> ] 74/81, 5.5 task/s, elapsed: 13s, ETA:     1s[> ] 75/81, 5.5 task/s, elapsed: 14s, ETA:     1s[> ] 76/81, 5.6 task/s, elapsed: 14s, ETA:     1s[> ] 77/81, 5.6 task/s, elapsed: 14s, ETA:     1s[> ] 78/81, 5.7 task/s, elapsed: 14s, ETA:     1s[> ] 79/81, 5.7 task/s, elapsed: 14s, ETA:     0s[> ] 80/81, 5.7 task/s, elapsed: 14s, ETA:     0s[>>] 81/81, 5.7 task/s, elapsed: 14s, ETA:     0s[>>] 82/81, 5.8 task/s, elapsed: 14s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/81, elapsed: 0s, ETA:[  ] 1/81, 30.1 task/s, elapsed: 0s, ETA:     3s[  ] 2/81, 32.7 task/s, elapsed: 0s, ETA:     2s[  ] 3/81, 34.2 task/s, elapsed: 0s, ETA:     2s[  ] 4/81, 35.3 task/s, elapsed: 0s, ETA:     2s[  ] 5/81, 35.9 task/s, elapsed: 0s, ETA:     2s[  ] 6/81, 36.0 task/s, elapsed: 0s, ETA:     2s[  ] 7/81, 35.7 task/s, elapsed: 0s, ETA:     2s[  ] 8/81, 35.6 task/s, elapsed: 0s, ETA:     2s[  ] 9/81, 35.7 task/s, elapsed: 0s, ETA:     2s[  ] 10/81, 36.0 task/s, elapsed: 0s, ETA:     2s[  ] 11/81, 36.1 task/s, elapsed: 0s, ETA:     2s[  ] 12/81, 36.0 task/s, elapsed: 0s, ETA:     2s[  ] 13/81, 36.0 task/s, elapsed: 0s, ETA:     2s[  ] 14/81, 35.9 task/s, elapsed: 0s, ETA:     2s[  ] 15/81, 35.9 task/s, elapsed: 0s, ETA:     2s[  ] 16/81, 35.9 task/s, elapsed: 0s, ETA:     2s[  ] 17/81, 35.8 task/s, elapsed: 0s, ETA:     2s[  ] 18/81, 35.8 task/s, elapsed: 1s, ETA:     2s[  ] 19/81, 35.7 task/s, elapsed: 1s, ETA:     2s[  ] 20/81, 35.7 task/s, elapsed: 1s, ETA:     2s[  ] 21/81, 35.6 task/s, elapsed: 1s, ETA:     2s[  ] 22/81, 35.5 task/s, elapsed: 1s, ETA:     2s[  ] 23/81, 35.5 task/s, elapsed: 1s, ETA:     2s[  ] 24/81, 35.4 task/s, elapsed: 1s, ETA:     2s[  ] 25/81, 35.4 task/s, elapsed: 1s, ETA:     2s[  ] 26/81, 35.3 task/s, elapsed: 1s, ETA:     2s[  ] 27/81, 35.3 task/s, elapsed: 1s, ETA:     2s[  ] 28/81, 35.3 task/s, elapsed: 1s, ETA:     2s[  ] 29/81, 35.3 task/s, elapsed: 1s, ETA:     1s[  ] 30/81, 35.2 task/s, elapsed: 1s, ETA:     1s[  ] 31/81, 35.1 task/s, elapsed: 1s, ETA:     1s[  ] 32/81, 35.0 task/s, elapsed: 1s, ETA:     1s[  ] 33/81, 35.0 task/s, elapsed: 1s, ETA:     1s[  ] 34/81, 34.8 task/s, elapsed: 1s, ETA:     1s[  ] 35/81, 34.7 task/s, elapsed: 1s, ETA:     1s[  ] 36/81, 34.7 task/s, elapsed: 1s, ETA:     1s[  ] 37/81, 34.6 task/s, elapsed: 1s, ETA:     1s[  ] 38/81, 34.5 task/s, elapsed: 1s, ETA:     1s[  ] 39/81, 34.4 task/s, elapsed: 1s, ETA:     1s[  ] 40/81, 34.3 task/s, elapsed: 1s, ETA:     1s[> ] 41/81, 34.2 task/s, elapsed: 1s, ETA:     1s[> ] 42/81, 34.3 task/s, elapsed: 1s, ETA:     1s[> ] 43/81, 34.3 task/s, elapsed: 1s, ETA:     1s[> ] 44/81, 34.4 task/s, elapsed: 1s, ETA:     1s[> ] 45/81, 34.5 task/s, elapsed: 1s, ETA:     1s[> ] 46/81, 34.6 task/s, elapsed: 1s, ETA:     1s[> ] 47/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 48/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 49/81, 34.7 task/s, elapsed: 1s, ETA:     1s[> ] 50/81, 34.6 task/s, elapsed: 1s, ETA:     1s[> ] 51/81, 34.5 task/s, elapsed: 1s, ETA:     1s[> ] 52/81, 34.5 task/s, elapsed: 2s, ETA:     1s[> ] 53/81, 34.4 task/s, elapsed: 2s, ETA:     1s[> ] 54/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 55/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 56/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 57/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 58/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 59/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 60/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 61/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 62/81, 34.3 task/s, elapsed: 2s, ETA:     1s[> ] 63/81, 34.2 task/s, elapsed: 2s, ETA:     1s[> ] 64/81, 34.2 task/s, elapsed: 2s, ETA:     0s[> ] 65/81, 34.2 task/s, elapsed: 2s, ETA:     0s[> ] 66/81, 34.2 task/s, elapsed: 2s, ETA:     0s[> ] 67/81, 34.2 task/s, elapsed: 2s, ETA:     0s[> ] 68/81, 34.2 task/s, elapsed: 2s, ETA:     0s[> ] 69/81, 34.2 task/s, elapsed: 2s, ETA:     0s[> ] 70/81, 34.2 task/s, elapsed: 2s, ETA:     0s[> ] 71/81, 34.3 task/s, elapsed: 2s, ETA:     0s[> ] 72/81, 34.3 task/s, elapsed: 2s, ETA:     0s[> ] 73/81, 34.3 task/s, elapsed: 2s, ETA:     0s[> ] 74/81, 34.3 task/s, elapsed: 2s, ETA:     0s[> ] 75/81, 34.3 task/s, elapsed: 2s, ETA:     0s[> ] 76/81, 34.3 task/s, elapsed: 2s, ETA:     0s[> ] 77/81, 34.4 task/s, elapsed: 2s, ETA:     0s[> ] 78/81, 34.4 task/s, elapsed: 2s, ETA:     0s[> ] 79/81, 34.4 task/s, elapsed: 2s, ETA:     0s[> ] 80/81, 34.5 task/s, elapsed: 2s, ETA:     0s[>>] 81/81, 34.5 task/s, elapsed: 2s, ETA:     0s
Results writes to /tmp/tmpaajt92a3/results/results_nusc.json
self.nusc: <nuscenes.nuscenes.NuScenes object at 0x7f0f9ebe9880>
self.eval_set: mini_val
  0% 0/81 [00:00<?, ?it/s] 49% 40/81 [00:00<00:00, 394.14it/s] 99% 80/81 [00:00<00:00, 359.75it/s]                                    len(set(self.pred_boxes.sample_tokens)): 81
len(set(self.gt_boxes.sample_tokens)): 81
mAP: 0.0199
mATE: 0.8854
mASE: 0.7887
mAOE: 1.0721
mAVE: 0.7776
mAAE: 0.7523
NDS: 0.0895
Eval time: 2.7s

Per-class results:
Object Class        	AP    	ATE   	ASE   	AOE   	AVE   	AAE   
car                 	0.174 	0.788 	0.346 	1.366 	0.309 	0.200 
truck               	0.000 	0.922 	0.461 	0.705 	0.150 	0.015 
bus                 	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
trailer             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
construction_vehicle	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
pedestrian          	0.009 	0.442 	0.533 	1.578 	0.761 	0.803 
motorcycle          	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
bicycle             	0.000 	1.000 	1.000 	1.000 	1.000 	1.000 
traffic_cone        	0.016 	0.702 	0.548 	nan   	nan   	nan   
barrier             	0.000 	1.000 	1.000 	1.000 	nan   	nan   
2025-04-23 08:03:45,189 - mmdet3d - INFO - Epoch(val) [6][41]	object/car_ap_dist_0.5: 0.0041, object/car_ap_dist_1.0: 0.0994, object/car_ap_dist_2.0: 0.2576, object/car_ap_dist_4.0: 0.3353, object/car_trans_err: 0.7884, object/car_scale_err: 0.3457, object/car_orient_err: 1.3658, object/car_vel_err: 0.3091, object/car_attr_err: 0.1998, object/mATE: 0.8854, object/mASE: 0.7887, object/mAOE: 1.0721, object/mAVE: 0.7776, object/mAAE: 0.7523, object/truck_ap_dist_0.5: 0.0000, object/truck_ap_dist_1.0: 0.0000, object/truck_ap_dist_2.0: 0.0000, object/truck_ap_dist_4.0: 0.0000, object/truck_trans_err: 0.9218, object/truck_scale_err: 0.4605, object/truck_orient_err: 0.7046, object/truck_vel_err: 0.1500, object/truck_attr_err: 0.0148, object/construction_vehicle_ap_dist_0.5: 0.0000, object/construction_vehicle_ap_dist_1.0: 0.0000, object/construction_vehicle_ap_dist_2.0: 0.0000, object/construction_vehicle_ap_dist_4.0: 0.0000, object/construction_vehicle_trans_err: 1.0000, object/construction_vehicle_scale_err: 1.0000, object/construction_vehicle_orient_err: 1.0000, object/construction_vehicle_vel_err: 1.0000, object/construction_vehicle_attr_err: 1.0000, object/bus_ap_dist_0.5: 0.0000, object/bus_ap_dist_1.0: 0.0000, object/bus_ap_dist_2.0: 0.0000, object/bus_ap_dist_4.0: 0.0000, object/bus_trans_err: 1.0000, object/bus_scale_err: 1.0000, object/bus_orient_err: 1.0000, object/bus_vel_err: 1.0000, object/bus_attr_err: 1.0000, object/trailer_ap_dist_0.5: 0.0000, object/trailer_ap_dist_1.0: 0.0000, object/trailer_ap_dist_2.0: 0.0000, object/trailer_ap_dist_4.0: 0.0000, object/trailer_trans_err: 1.0000, object/trailer_scale_err: 1.0000, object/trailer_orient_err: 1.0000, object/trailer_vel_err: 1.0000, object/trailer_attr_err: 1.0000, object/barrier_ap_dist_0.5: 0.0000, object/barrier_ap_dist_1.0: 0.0000, object/barrier_ap_dist_2.0: 0.0000, object/barrier_ap_dist_4.0: 0.0000, object/barrier_trans_err: 1.0000, object/barrier_scale_err: 1.0000, object/barrier_orient_err: 1.0000, object/barrier_vel_err: nan, object/barrier_attr_err: nan, object/motorcycle_ap_dist_0.5: 0.0000, object/motorcycle_ap_dist_1.0: 0.0000, object/motorcycle_ap_dist_2.0: 0.0000, object/motorcycle_ap_dist_4.0: 0.0000, object/motorcycle_trans_err: 1.0000, object/motorcycle_scale_err: 1.0000, object/motorcycle_orient_err: 1.0000, object/motorcycle_vel_err: 1.0000, object/motorcycle_attr_err: 1.0000, object/bicycle_ap_dist_0.5: 0.0000, object/bicycle_ap_dist_1.0: 0.0000, object/bicycle_ap_dist_2.0: 0.0000, object/bicycle_ap_dist_4.0: 0.0000, object/bicycle_trans_err: 1.0000, object/bicycle_scale_err: 1.0000, object/bicycle_orient_err: 1.0000, object/bicycle_vel_err: 1.0000, object/bicycle_attr_err: 1.0000, object/pedestrian_ap_dist_0.5: 0.0015, object/pedestrian_ap_dist_1.0: 0.0039, object/pedestrian_ap_dist_2.0: 0.0070, object/pedestrian_ap_dist_4.0: 0.0233, object/pedestrian_trans_err: 0.4417, object/pedestrian_scale_err: 0.5329, object/pedestrian_orient_err: 1.5782, object/pedestrian_vel_err: 0.7615, object/pedestrian_attr_err: 0.8034, object/traffic_cone_ap_dist_0.5: 0.0000, object/traffic_cone_ap_dist_1.0: 0.0102, object/traffic_cone_ap_dist_2.0: 0.0200, object/traffic_cone_ap_dist_4.0: 0.0330, object/traffic_cone_trans_err: 0.7022, object/traffic_cone_scale_err: 0.5475, object/traffic_cone_orient_err: nan, object/traffic_cone_vel_err: nan, object/traffic_cone_attr_err: nan, object/nds: 0.0895, object/map: 0.0199
